using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DatabaseFirst.Models;

public partial class PostgresContext : DbContext
{
    public PostgresContext()
    {
    }

    public PostgresContext(DbContextOptions<PostgresContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccountRole> AccountRoles { get; set; }

    public virtual DbSet<AppointmentMedicalExamination> AppointmentMedicalExaminations { get; set; }

    public virtual DbSet<BasicInformationPatientIpd> BasicInformationPatientIpds { get; set; }

    public virtual DbSet<BedServiceOtherSourcesPay> BedServiceOtherSourcesPays { get; set; }

    public virtual DbSet<BedServiceServiceList> BedServiceServiceLists { get; set; }

    public virtual DbSet<BedServiceSetUpBedSelection> BedServiceSetUpBedSelections { get; set; }

    public virtual DbSet<BedServiceTabAccompanyingService> BedServiceTabAccompanyingServices { get; set; }

    public virtual DbSet<BedServiceTabCostGroup> BedServiceTabCostGroups { get; set; }

    public virtual DbSet<BedServiceTabImplementationRoom> BedServiceTabImplementationRooms { get; set; }

    public virtual DbSet<BedServiceTabPriceOption> BedServiceTabPriceOptions { get; set; }

    public virtual DbSet<BidDetailBaseDeclaration> BidDetailBaseDeclarations { get; set; }

    public virtual DbSet<BidDetailDiscountDeclaration> BidDetailDiscountDeclarations { get; set; }

    public virtual DbSet<BidDetailsProduct> BidDetailsProducts { get; set; }

    public virtual DbSet<BidServiceServiceType> BidServiceServiceTypes { get; set; }

    public virtual DbSet<BloodProductsCostGroup> BloodProductsCostGroups { get; set; }

    public virtual DbSet<BloodProductsOtherSourcesPay> BloodProductsOtherSourcesPays { get; set; }

    public virtual DbSet<BloodProductsTabAccompanyingService> BloodProductsTabAccompanyingServices { get; set; }

    public virtual DbSet<Category10daySurgeryPackage> Category10daySurgeryPackages { get; set; }

    public virtual DbSet<CategoryAccount> CategoryAccounts { get; set; }

    public virtual DbSet<CategoryActiveElement> CategoryActiveElements { get; set; }

    public virtual DbSet<CategoryAdvice> CategoryAdvices { get; set; }

    public virtual DbSet<CategoryAffiliatedWarehouse> CategoryAffiliatedWarehouses { get; set; }

    public virtual DbSet<CategoryAgenciesUnit> CategoryAgenciesUnits { get; set; }

    public virtual DbSet<CategoryAntigen> CategoryAntigens { get; set; }

    public virtual DbSet<CategoryAppoiment> CategoryAppoiments { get; set; }

    public virtual DbSet<CategoryAppointmentOther> CategoryAppointmentOthers { get; set; }

    public virtual DbSet<CategoryArea> CategoryAreas { get; set; }

    public virtual DbSet<CategoryAttribute> CategoryAttributes { get; set; }

    public virtual DbSet<CategoryAttributeType> CategoryAttributeTypes { get; set; }

    public virtual DbSet<CategoryBallotType> CategoryBallotTypes { get; set; }

    public virtual DbSet<CategoryBasicInformationPatient> CategoryBasicInformationPatients { get; set; }

    public virtual DbSet<CategoryBedNumber> CategoryBedNumbers { get; set; }

    public virtual DbSet<CategoryBedService> CategoryBedServices { get; set; }

    public virtual DbSet<CategoryBedType> CategoryBedTypes { get; set; }

    public virtual DbSet<CategoryBidDetail> CategoryBidDetails { get; set; }

    public virtual DbSet<CategoryBidService> CategoryBidServices { get; set; }

    public virtual DbSet<CategoryBiopsyLocation> CategoryBiopsyLocations { get; set; }

    public virtual DbSet<CategoryBiosignal> CategoryBiosignals { get; set; }

    public virtual DbSet<CategoryBloodProduct> CategoryBloodProducts { get; set; }

    public virtual DbSet<CategoryBmi> CategoryBmis { get; set; }

    public virtual DbSet<CategoryBranch> CategoryBranches { get; set; }

    public virtual DbSet<CategoryBuilding> CategoryBuildings { get; set; }

    public virtual DbSet<CategoryCardClass> CategoryCardClasses { get; set; }

    public virtual DbSet<CategoryCareMode> CategoryCareModes { get; set; }

    public virtual DbSet<CategoryCauseOfHospital> CategoryCauseOfHospitals { get; set; }

    public virtual DbSet<CategoryCdhatdcn> CategoryCdhatdcns { get; set; }

    public virtual DbSet<CategoryCdhatdcnresultTemplate> CategoryCdhatdcnresultTemplates { get; set; }

    public virtual DbSet<CategoryChemistry> CategoryChemistries { get; set; }

    public virtual DbSet<CategoryChildPartner> CategoryChildPartners { get; set; }

    public virtual DbSet<CategoryCity> CategoryCities { get; set; }

    public virtual DbSet<CategoryClassifyPatient> CategoryClassifyPatients { get; set; }

    public virtual DbSet<CategoryCompensationSlip> CategoryCompensationSlips { get; set; }

    public virtual DbSet<CategoryConcept> CategoryConcepts { get; set; }

    public virtual DbSet<CategoryConceptType> CategoryConceptTypes { get; set; }

    public virtual DbSet<CategoryCostGroup> CategoryCostGroups { get; set; }

    public virtual DbSet<CategoryCouncil> CategoryCouncils { get; set; }

    public virtual DbSet<CategoryCouncilDetail> CategoryCouncilDetails { get; set; }

    public virtual DbSet<CategoryCounter> CategoryCounters { get; set; }

    public virtual DbSet<CategoryCountriesSupply> CategoryCountriesSupplies { get; set; }

    public virtual DbSet<CategoryCountryDrug> CategoryCountryDrugs { get; set; }

    public virtual DbSet<CategoryDepartment> CategoryDepartments { get; set; }

    public virtual DbSet<CategoryDesignationKit> CategoryDesignationKits { get; set; }

    public virtual DbSet<CategoryDesignationKitService> CategoryDesignationKitServices { get; set; }

    public virtual DbSet<CategoryDinner> CategoryDinners { get; set; }

    public virtual DbSet<CategoryDiseaseChapter> CategoryDiseaseChapters { get; set; }

    public virtual DbSet<CategoryDiseaseGroup> CategoryDiseaseGroups { get; set; }

    public virtual DbSet<CategoryDiseaseName> CategoryDiseaseNames { get; set; }

    public virtual DbSet<CategoryDiseaseType> CategoryDiseaseTypes { get; set; }

    public virtual DbSet<CategoryDistrict> CategoryDistricts { get; set; }

    public virtual DbSet<CategoryDoctorDosage> CategoryDoctorDosages { get; set; }

    public virtual DbSet<CategoryDosage> CategoryDosages { get; set; }

    public virtual DbSet<CategoryDrug> CategoryDrugs { get; set; }

    public virtual DbSet<CategoryDrugClassification> CategoryDrugClassifications { get; set; }

    public virtual DbSet<CategoryDrugGrouping> CategoryDrugGroupings { get; set; }

    public virtual DbSet<CategoryDryingCost> CategoryDryingCosts { get; set; }

    public virtual DbSet<CategoryDyeingMethod> CategoryDyeingMethods { get; set; }

    public virtual DbSet<CategoryEmergencyTime> CategoryEmergencyTimes { get; set; }

    public virtual DbSet<CategoryEmergencyType> CategoryEmergencyTypes { get; set; }

    public virtual DbSet<CategoryEmotionlessMethod> CategoryEmotionlessMethods { get; set; }

    public virtual DbSet<CategoryEmployee> CategoryEmployees { get; set; }

    public virtual DbSet<CategoryEthnic> CategoryEthnics { get; set; }

    public virtual DbSet<CategoryExamineCode> CategoryExamineCodes { get; set; }

    public virtual DbSet<CategoryFinsishExamine> CategoryFinsishExamines { get; set; }

    public virtual DbSet<CategoryGenerateProduct> CategoryGenerateProducts { get; set; }

    public virtual DbSet<CategoryGroupChemistry> CategoryGroupChemistries { get; set; }

    public virtual DbSet<CategoryGroupCustomerCare> CategoryGroupCustomerCares { get; set; }

    public virtual DbSet<CategoryGroupDrug> CategoryGroupDrugs { get; set; }

    public virtual DbSet<CategoryGroupMaterial> CategoryGroupMaterials { get; set; }

    public virtual DbSet<CategoryGroupPermission> CategoryGroupPermissions { get; set; }

    public virtual DbSet<CategoryGroupService> CategoryGroupServices { get; set; }

    public virtual DbSet<CategoryGroupServiceLevel1> CategoryGroupServiceLevel1s { get; set; }

    public virtual DbSet<CategoryGroupServiceLevel2> CategoryGroupServiceLevel2s { get; set; }

    public virtual DbSet<CategoryGroupServiceLevel3> CategoryGroupServiceLevel3s { get; set; }

    public virtual DbSet<CategoryHistoryPartner> CategoryHistoryPartners { get; set; }

    public virtual DbSet<CategoryHoliday> CategoryHolidays { get; set; }

    public virtual DbSet<CategoryHospital> CategoryHospitals { get; set; }

    public virtual DbSet<CategoryHospitalDischargeInfomation> CategoryHospitalDischargeInfomations { get; set; }

    public virtual DbSet<CategoryIndexGroup> CategoryIndexGroups { get; set; }

    public virtual DbSet<CategoryInjectionAppointment> CategoryInjectionAppointments { get; set; }

    public virtual DbSet<CategoryInjury> CategoryInjuries { get; set; }

    public virtual DbSet<CategoryInputOrOutputType> CategoryInputOrOutputTypes { get; set; }

    public virtual DbSet<CategoryInsuranceCard> CategoryInsuranceCards { get; set; }

    public virtual DbSet<CategoryInteractionConsequence> CategoryInteractionConsequences { get; set; }

    public virtual DbSet<CategoryInventory> CategoryInventories { get; set; }

    public virtual DbSet<CategoryInventoryHistory> CategoryInventoryHistories { get; set; }

    public virtual DbSet<CategoryJob> CategoryJobs { get; set; }

    public virtual DbSet<CategoryKiosk> CategoryKiosks { get; set; }

    public virtual DbSet<CategoryKioskClinicDoctor> CategoryKioskClinicDoctors { get; set; }

    public virtual DbSet<CategoryKitSupply> CategoryKitSupplies { get; set; }

    public virtual DbSet<CategoryLaboratoryResultTemplate> CategoryLaboratoryResultTemplates { get; set; }

    public virtual DbSet<CategoryLaboratoryService> CategoryLaboratoryServices { get; set; }

    public virtual DbSet<CategoryLevelOfInteraction> CategoryLevelOfInteractions { get; set; }

    public virtual DbSet<CategoryLongTermTreatment> CategoryLongTermTreatments { get; set; }

    public virtual DbSet<CategoryMachine> CategoryMachines { get; set; }

    public virtual DbSet<CategoryMainDiseaseGroup> CategoryMainDiseaseGroups { get; set; }

    public virtual DbSet<CategoryMedicalExaminationService> CategoryMedicalExaminationServices { get; set; }

    public virtual DbSet<CategoryMedicalUnit> CategoryMedicalUnits { get; set; }

    public virtual DbSet<CategoryNational> CategoryNationals { get; set; }

    public virtual DbSet<CategoryObjectType> CategoryObjectTypes { get; set; }

    public virtual DbSet<CategoryOrigin> CategoryOrigins { get; set; }

    public virtual DbSet<CategoryOutpatientDoctor> CategoryOutpatientDoctors { get; set; }

    public virtual DbSet<CategoryOutsiteOfTreatmentService> CategoryOutsiteOfTreatmentServices { get; set; }

    public virtual DbSet<CategoryPackageService> CategoryPackageServices { get; set; }

    public virtual DbSet<CategoryPartner> CategoryPartners { get; set; }

    public virtual DbSet<CategoryPatient> CategoryPatients { get; set; }

    public virtual DbSet<CategoryPatientDesignateService> CategoryPatientDesignateServices { get; set; }

    public virtual DbSet<CategoryPatientPrescription> CategoryPatientPrescriptions { get; set; }

    public virtual DbSet<CategoryPatientReceiptCode> CategoryPatientReceiptCodes { get; set; }

    public virtual DbSet<CategoryPatientReception> CategoryPatientReceptions { get; set; }

    public virtual DbSet<CategoryPatientSource> CategoryPatientSources { get; set; }

    public virtual DbSet<CategoryPaymentMethod> CategoryPaymentMethods { get; set; }

    public virtual DbSet<CategoryPaymentType> CategoryPaymentTypes { get; set; }

    public virtual DbSet<CategoryPermission> CategoryPermissions { get; set; }

    public virtual DbSet<CategoryPharmacologicalProperty> CategoryPharmacologicalProperties { get; set; }

    public virtual DbSet<CategoryPlaceOfSamplingAttribute> CategoryPlaceOfSamplingAttributes { get; set; }

    public virtual DbSet<CategoryPlaceOfSamplingSpecimen> CategoryPlaceOfSamplingSpecimens { get; set; }

    public virtual DbSet<CategoryPosition> CategoryPositions { get; set; }

    public virtual DbSet<CategoryPositionPrint> CategoryPositionPrints { get; set; }

    public virtual DbSet<CategoryPrescriptionMedicine> CategoryPrescriptionMedicines { get; set; }

    public virtual DbSet<CategoryPrescriptionOrder> CategoryPrescriptionOrders { get; set; }

    public virtual DbSet<CategoryPrescriptionService> CategoryPrescriptionServices { get; set; }

    public virtual DbSet<CategoryPresenter> CategoryPresenters { get; set; }

    public virtual DbSet<CategoryPrint> CategoryPrints { get; set; }

    public virtual DbSet<CategoryPrintName> CategoryPrintNames { get; set; }

    public virtual DbSet<CategoryPrintType> CategoryPrintTypes { get; set; }

    public virtual DbSet<CategoryProduct> CategoryProducts { get; set; }

    public virtual DbSet<CategoryProfessionalDiploma> CategoryProfessionalDiplomas { get; set; }

    public virtual DbSet<CategoryProgram> CategoryPrograms { get; set; }

    public virtual DbSet<CategoryQuestionScreeningForm> CategoryQuestionScreeningForms { get; set; }

    public virtual DbSet<CategoryQueue> CategoryQueues { get; set; }

    public virtual DbSet<CategoryQueueObjectType> CategoryQueueObjectTypes { get; set; }

    public virtual DbSet<CategoryRank> CategoryRanks { get; set; }

    public virtual DbSet<CategoryReasonForAdvance> CategoryReasonForAdvances { get; set; }

    public virtual DbSet<CategoryReasonServiceReturn> CategoryReasonServiceReturns { get; set; }

    public virtual DbSet<CategoryReceipt> CategoryReceipts { get; set; }

    public virtual DbSet<CategoryReceiptCode> CategoryReceiptCodes { get; set; }

    public virtual DbSet<CategoryReceiptCodeEstimate> CategoryReceiptCodeEstimates { get; set; }

    public virtual DbSet<CategoryReceiptCodeSupply> CategoryReceiptCodeSupplies { get; set; }

    public virtual DbSet<CategoryReceiptList> CategoryReceiptLists { get; set; }

    public virtual DbSet<CategoryRefund> CategoryRefunds { get; set; }

    public virtual DbSet<CategoryRehabilitationsService> CategoryRehabilitationsServices { get; set; }

    public virtual DbSet<CategoryRelationship> CategoryRelationships { get; set; }

    public virtual DbSet<CategoryReport> CategoryReports { get; set; }

    public virtual DbSet<CategoryReportDrugInteraction> CategoryReportDrugInteractions { get; set; }

    public virtual DbSet<CategoryRepresentative> CategoryRepresentatives { get; set; }

    public virtual DbSet<CategoryResultTemplateRehabilitation> CategoryResultTemplateRehabilitations { get; set; }

    public virtual DbSet<CategoryResultTemplateSurgery> CategoryResultTemplateSurgeries { get; set; }

    public virtual DbSet<CategoryResultTemplaterRehabilitation> CategoryResultTemplaterRehabilitations { get; set; }

    public virtual DbSet<CategoryRetailSurplu> CategoryRetailSurplus { get; set; }

    public virtual DbSet<CategoryRole> CategoryRoles { get; set; }

    public virtual DbSet<CategoryRoleSign> CategoryRoleSigns { get; set; }

    public virtual DbSet<CategoryRoom> CategoryRooms { get; set; }

    public virtual DbSet<CategoryRoomBed> CategoryRoomBeds { get; set; }

    public virtual DbSet<CategoryRoute> CategoryRoutes { get; set; }

    public virtual DbSet<CategoryScreenKiosk> CategoryScreenKiosks { get; set; }

    public virtual DbSet<CategoryScreenPrint> CategoryScreenPrints { get; set; }

    public virtual DbSet<CategoryScreeningExamination> CategoryScreeningExaminations { get; set; }

    public virtual DbSet<CategoryService> CategoryServices { get; set; }

    public virtual DbSet<CategoryServiceOfPackage> CategoryServiceOfPackages { get; set; }

    public virtual DbSet<CategorySetUpDesignatedWarehouse> CategorySetUpDesignatedWarehouses { get; set; }

    public virtual DbSet<CategorySetUpSign> CategorySetUpSigns { get; set; }

    public virtual DbSet<CategorySetting> CategorySettings { get; set; }

    public virtual DbSet<CategorySettingBedChoose> CategorySettingBedChooses { get; set; }

    public virtual DbSet<CategorySettingConditionDirectDepartment> CategorySettingConditionDirectDepartments { get; set; }

    public virtual DbSet<CategorySettingGeneral> CategorySettingGenerals { get; set; }

    public virtual DbSet<CategorySettingPoint> CategorySettingPoints { get; set; }

    public virtual DbSet<CategorySettingReceiptVote> CategorySettingReceiptVotes { get; set; }

    public virtual DbSet<CategorySettingScreen> CategorySettingScreens { get; set; }

    public virtual DbSet<CategorySettingSeparateMergeService> CategorySettingSeparateMergeServices { get; set; }

    public virtual DbSet<CategorySetupMedicalRecord> CategorySetupMedicalRecords { get; set; }

    public virtual DbSet<CategoryShift> CategoryShifts { get; set; }

    public virtual DbSet<CategorySignLevel> CategorySignLevels { get; set; }

    public virtual DbSet<CategorySpeakerCalling> CategorySpeakerCallings { get; set; }

    public virtual DbSet<CategorySpecialist> CategorySpecialists { get; set; }

    public virtual DbSet<CategorySpecimen> CategorySpecimens { get; set; }

    public virtual DbSet<CategorySubGroupFirstDisease> CategorySubGroupFirstDiseases { get; set; }

    public virtual DbSet<CategorySubGroupSecondDisease> CategorySubGroupSecondDiseases { get; set; }

    public virtual DbSet<CategorySubjectOfExemption> CategorySubjectOfExemptions { get; set; }

    public virtual DbSet<CategorySubjectOfInsurance> CategorySubjectOfInsurances { get; set; }

    public virtual DbSet<CategorySummary15Day> CategorySummary15Days { get; set; }

    public virtual DbSet<CategorySummary15DayDiagnose> CategorySummary15DayDiagnoses { get; set; }

    public virtual DbSet<CategorySupplieBySize> CategorySupplieBySizes { get; set; }

    public virtual DbSet<CategorySupply> CategorySupplies { get; set; }

    public virtual DbSet<CategorySurgicalProceduresService> CategorySurgicalProceduresServices { get; set; }

    public virtual DbSet<CategorySurvivalIndex> CategorySurvivalIndices { get; set; }

    public virtual DbSet<CategoryTabAccompanyingService> CategoryTabAccompanyingServices { get; set; }

    public virtual DbSet<CategoryTabChildIndex> CategoryTabChildIndices { get; set; }

    public virtual DbSet<CategoryTabCostGroup> CategoryTabCostGroups { get; set; }

    public virtual DbSet<CategoryTabHistoryChanged> CategoryTabHistoryChangeds { get; set; }

    public virtual DbSet<CategoryTabImplementationRoom> CategoryTabImplementationRooms { get; set; }

    public virtual DbSet<CategoryTabInsurancePaymentCondition> CategoryTabInsurancePaymentConditions { get; set; }

    public virtual DbSet<CategoryTabPriceOption> CategoryTabPriceOptions { get; set; }

    public virtual DbSet<CategoryTemplateCdha> CategoryTemplateCdhas { get; set; }

    public virtual DbSet<CategoryTemplateCdhalvl1> CategoryTemplateCdhalvl1s { get; set; }

    public virtual DbSet<CategoryTemplateCdhalvl2> CategoryTemplateCdhalvl2s { get; set; }

    public virtual DbSet<CategoryTemplateCdhalvl3> CategoryTemplateCdhalvl3s { get; set; }

    public virtual DbSet<CategoryTemplateOfDevelopment> CategoryTemplateOfDevelopments { get; set; }

    public virtual DbSet<CategoryTemplateQm> CategoryTemplateQms { get; set; }

    public virtual DbSet<CategoryTestingProcedure> CategoryTestingProcedures { get; set; }

    public virtual DbSet<CategoryTitleDegree> CategoryTitleDegrees { get; set; }

    public virtual DbSet<CategoryTrackingLabel> CategoryTrackingLabels { get; set; }

    public virtual DbSet<CategoryTypeOfMedicalRecord> CategoryTypeOfMedicalRecords { get; set; }

    public virtual DbSet<CategoryTypeScreeningForm> CategoryTypeScreeningForms { get; set; }

    public virtual DbSet<CategoryUnit> CategoryUnits { get; set; }

    public virtual DbSet<CategoryUserGuide> CategoryUserGuides { get; set; }

    public virtual DbSet<CategoryVaccine> CategoryVaccines { get; set; }

    public virtual DbSet<CategoryVotePrint> CategoryVotePrints { get; set; }

    public virtual DbSet<CategoryVoucher> CategoryVouchers { get; set; }

    public virtual DbSet<CategoryWard> CategoryWards { get; set; }

    public virtual DbSet<CategoryWarehouse> CategoryWarehouses { get; set; }

    public virtual DbSet<CategoryWarehouseList> CategoryWarehouseLists { get; set; }

    public virtual DbSet<CategoryWarehouseSource> CategoryWarehouseSources { get; set; }

    public virtual DbSet<CdhaAttribute> CdhaAttributes { get; set; }

    public virtual DbSet<CdhaTdcnList> CdhaTdcnLists { get; set; }

    public virtual DbSet<CdhatdcnOtherSourcePay> CdhatdcnOtherSourcePays { get; set; }

    public virtual DbSet<CdhatdcnServiceList> CdhatdcnServiceLists { get; set; }

    public virtual DbSet<CdhatdcnTabAccompanyingService> CdhatdcnTabAccompanyingServices { get; set; }

    public virtual DbSet<CdhatdcnTabCostGroup> CdhatdcnTabCostGroups { get; set; }

    public virtual DbSet<CdhatdcnTabHistoryChanged> CdhatdcnTabHistoryChangeds { get; set; }

    public virtual DbSet<CdhatdcnTabImplementationRoom> CdhatdcnTabImplementationRooms { get; set; }

    public virtual DbSet<CdhatdcnTabInsurancePaymentCondition> CdhatdcnTabInsurancePaymentConditions { get; set; }

    public virtual DbSet<CdhatdcnTabPriceOption> CdhatdcnTabPriceOptions { get; set; }

    public virtual DbSet<CdhatdcnlistChangeService> CdhatdcnlistChangeServices { get; set; }

    public virtual DbSet<CdhatdcnresultTemplateCdhatdcnservice> CdhatdcnresultTemplateCdhatdcnservices { get; set; }

    public virtual DbSet<ChemistryOtherSourcesPayAttribute> ChemistryOtherSourcesPayAttributes { get; set; }

    public virtual DbSet<ChemistryPurposeCodeAttribute> ChemistryPurposeCodeAttributes { get; set; }

    public virtual DbSet<ChemistyCostGroup> ChemistyCostGroups { get; set; }

    public virtual DbSet<ConferenceMinutesHistory> ConferenceMinutesHistories { get; set; }

    public virtual DbSet<CouncilDetailCouncil> CouncilDetailCouncils { get; set; }

    public virtual DbSet<CounterCounterType> CounterCounterTypes { get; set; }

    public virtual DbSet<CounterReceptionObject> CounterReceptionObjects { get; set; }

    public virtual DbSet<DepartmentBorrow> DepartmentBorrows { get; set; }

    public virtual DbSet<DepartmentBuilding> DepartmentBuildings { get; set; }

    public virtual DbSet<DepartmentBuildingMoney> DepartmentBuildingMoneys { get; set; }

    public virtual DbSet<DepartmentFacultyNature> DepartmentFacultyNatures { get; set; }

    public virtual DbSet<DesignateServiceDiscountHistory> DesignateServiceDiscountHistories { get; set; }

    public virtual DbSet<DesignateServicePrescription> DesignateServicePrescriptions { get; set; }

    public virtual DbSet<DesignateServicePrescriptionExamine> DesignateServicePrescriptionExamines { get; set; }

    public virtual DbSet<DesignateServicePrescriptionIpd> DesignateServicePrescriptionIpds { get; set; }

    public virtual DbSet<DesignateServicePrescriptionMedical> DesignateServicePrescriptionMedicals { get; set; }

    public virtual DbSet<DesignationKitAccount> DesignationKitAccounts { get; set; }

    public virtual DbSet<DesignationKitDesignatedFaculty> DesignationKitDesignatedFaculties { get; set; }

    public virtual DbSet<DesignationKitDesignationKitService> DesignationKitDesignationKitServices { get; set; }

    public virtual DbSet<DesignationKitDesignationKitServiceDetail> DesignationKitDesignationKitServiceDetails { get; set; }

    public virtual DbSet<DesignationKitServiceList> DesignationKitServiceLists { get; set; }

    public virtual DbSet<DesignationKitServiceType> DesignationKitServiceTypes { get; set; }

    public virtual DbSet<DesignationKitServiceWarehouse> DesignationKitServiceWarehouses { get; set; }

    public virtual DbSet<DirectDepartment> DirectDepartments { get; set; }

    public virtual DbSet<DirectHospitalize> DirectHospitalizes { get; set; }

    public virtual DbSet<DirectMedicalExamie> DirectMedicalExamies { get; set; }

    public virtual DbSet<DoctorDosageDrug> DoctorDosageDrugs { get; set; }

    public virtual DbSet<DocumentResultPdf> DocumentResultPdfs { get; set; }

    public virtual DbSet<DocumentTemplateResult> DocumentTemplateResults { get; set; }

    public virtual DbSet<DocumentTemplateResultCdha> DocumentTemplateResultCdhas { get; set; }

    public virtual DbSet<DocumentTemplateResultLi> DocumentTemplateResultLis { get; set; }

    public virtual DbSet<DocumentTemplateResultMedical> DocumentTemplateResultMedicals { get; set; }

    public virtual DbSet<DrugCostGroup> DrugCostGroups { get; set; }

    public virtual DbSet<DrugDepartment> DrugDepartments { get; set; }

    public virtual DbSet<DrugOtherSourcesPay> DrugOtherSourcesPays { get; set; }

    public virtual DbSet<DrugPurposeUsed> DrugPurposeUseds { get; set; }

    public virtual DbSet<DrugTabDosage> DrugTabDosages { get; set; }

    public virtual DbSet<DryingCostSupply> DryingCostSupplies { get; set; }

    public virtual DbSet<EmployeeDepartment> EmployeeDepartments { get; set; }

    public virtual DbSet<EmployeeDepartmentBuilding> EmployeeDepartmentBuildings { get; set; }

    public virtual DbSet<EmployeeDepartmentRoom> EmployeeDepartmentRooms { get; set; }

    public virtual DbSet<EmployeeSpecialist> EmployeeSpecialists { get; set; }

    public virtual DbSet<EventInvocationLog> EventInvocationLogs { get; set; }

    public virtual DbSet<EventLog> EventLogs { get; set; }

    public virtual DbSet<GroupServiceLevel1ServiceUnCompleteStatus> GroupServiceLevel1ServiceUnCompleteStatuses { get; set; }

    public virtual DbSet<GroupServiceLevel2ServiceUnCompleteStatus> GroupServiceLevel2ServiceUnCompleteStatuses { get; set; }

    public virtual DbSet<GroupServiceLevel3ServiceUnCompleteStatus> GroupServiceLevel3ServiceUnCompleteStatuses { get; set; }

    public virtual DbSet<HdbActionLog> HdbActionLogs { get; set; }

    public virtual DbSet<HdbCronEvent> HdbCronEvents { get; set; }

    public virtual DbSet<HdbCronEventInvocationLog> HdbCronEventInvocationLogs { get; set; }

    public virtual DbSet<HdbEventLogCleanup> HdbEventLogCleanups { get; set; }

    public virtual DbSet<HdbMetadatum> HdbMetadata { get; set; }

    public virtual DbSet<HdbScheduledEvent> HdbScheduledEvents { get; set; }

    public virtual DbSet<HdbScheduledEventInvocationLog> HdbScheduledEventInvocationLogs { get; set; }

    public virtual DbSet<HdbSchemaNotification> HdbSchemaNotifications { get; set; }

    public virtual DbSet<HdbSourceCatalogVersion> HdbSourceCatalogVersions { get; set; }

    public virtual DbSet<HdbVersion> HdbVersions { get; set; }

    public virtual DbSet<HistoryPartnerGroupService> HistoryPartnerGroupServices { get; set; }

    public virtual DbSet<HistoryPartnerTypeAtrribute> HistoryPartnerTypeAtrributes { get; set; }

    public virtual DbSet<HistoryPartnerTypeServiceAttribute> HistoryPartnerTypeServiceAttributes { get; set; }

    public virtual DbSet<HopitalizeDentomaxillofacial> HopitalizeDentomaxillofacials { get; set; }

    public virtual DbSet<HospitalDischargeInfomationCompanying> HospitalDischargeInfomationCompanyings { get; set; }

    public virtual DbSet<Hospitalize> Hospitalizes { get; set; }

    public virtual DbSet<HospitalizeEye> HospitalizeEyes { get; set; }

    public virtual DbSet<HospitalizeOtorhinolaryngology> HospitalizeOtorhinolaryngologies { get; set; }

    public virtual DbSet<InfomationDrugSupply> InfomationDrugSupplies { get; set; }

    public virtual DbSet<InputOrOutputTypeMethod> InputOrOutputTypeMethods { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<KioskKioskClinicDoctor> KioskKioskClinicDoctors { get; set; }

    public virtual DbSet<KioskScreenKiosk> KioskScreenKiosks { get; set; }

    public virtual DbSet<LaboratoryAttribute> LaboratoryAttributes { get; set; }

    public virtual DbSet<LaboratoryResultTemplateLaboratoryService> LaboratoryResultTemplateLaboratoryServices { get; set; }

    public virtual DbSet<LaboratoryResultTemplateTabChildIndex> LaboratoryResultTemplateTabChildIndices { get; set; }

    public virtual DbSet<LaboratoryServiceOtherSourcePay> LaboratoryServiceOtherSourcePays { get; set; }

    public virtual DbSet<LaboratoryServiceServiceList> LaboratoryServiceServiceLists { get; set; }

    public virtual DbSet<LaboratoryServiceTabAccompanyingService> LaboratoryServiceTabAccompanyingServices { get; set; }

    public virtual DbSet<LaboratoryServiceTabChildIndex> LaboratoryServiceTabChildIndices { get; set; }

    public virtual DbSet<LaboratoryServiceTabCostGroup> LaboratoryServiceTabCostGroups { get; set; }

    public virtual DbSet<LaboratoryServiceTabHistoryChanged> LaboratoryServiceTabHistoryChangeds { get; set; }

    public virtual DbSet<LaboratoryServiceTabImplementationRoom> LaboratoryServiceTabImplementationRooms { get; set; }

    public virtual DbSet<LaboratoryServiceTabInsurancePaymentConditon> LaboratoryServiceTabInsurancePaymentConditons { get; set; }

    public virtual DbSet<LaboratoryServiceTabPriceOption> LaboratoryServiceTabPriceOptions { get; set; }

    public virtual DbSet<MedicalExaminationServiceDepartmentAssign> MedicalExaminationServiceDepartmentAssigns { get; set; }

    public virtual DbSet<MedicalExaminationServiceOtherSourcePay> MedicalExaminationServiceOtherSourcePays { get; set; }

    public virtual DbSet<MedicalExaminationServiceServiceList> MedicalExaminationServiceServiceLists { get; set; }

    public virtual DbSet<MedicalExaminationServiceSpecialist> MedicalExaminationServiceSpecialists { get; set; }

    public virtual DbSet<MedicalExaminationServiceTabAccompanyingService> MedicalExaminationServiceTabAccompanyingServices { get; set; }

    public virtual DbSet<MedicalExaminationServiceTabCostGroup> MedicalExaminationServiceTabCostGroups { get; set; }

    public virtual DbSet<MedicalExaminationServiceTabHistoryChange> MedicalExaminationServiceTabHistoryChanges { get; set; }

    public virtual DbSet<MedicalExaminationServiceTabImplementationRoom> MedicalExaminationServiceTabImplementationRooms { get; set; }

    public virtual DbSet<MedicalExaminationServiceTabInsurancePaymentCondition> MedicalExaminationServiceTabInsurancePaymentConditions { get; set; }

    public virtual DbSet<MedicalExaminationServiceTabPriceOption> MedicalExaminationServiceTabPriceOptions { get; set; }

    public virtual DbSet<MedicalRecordRoomBed> MedicalRecordRoomBeds { get; set; }

    public virtual DbSet<ObjectTypePaymentMethod> ObjectTypePaymentMethods { get; set; }

    public virtual DbSet<ObjectTypePaymentType> ObjectTypePaymentTypes { get; set; }

    public virtual DbSet<OrderPackageServiceUsed> OrderPackageServiceUseds { get; set; }

    public virtual DbSet<OutsiteOfTreatmentServiceImplementationRoom> OutsiteOfTreatmentServiceImplementationRooms { get; set; }

    public virtual DbSet<OutsiteOfTreatmentServiceInsurancePaymentCondition> OutsiteOfTreatmentServiceInsurancePaymentConditions { get; set; }

    public virtual DbSet<OutsiteOfTreatmentServiceOtherSourcePay> OutsiteOfTreatmentServiceOtherSourcePays { get; set; }

    public virtual DbSet<OutsiteOfTreatmentServiceServiceList> OutsiteOfTreatmentServiceServiceLists { get; set; }

    public virtual DbSet<OutsiteOfTreatmentServiceTabCostGroup> OutsiteOfTreatmentServiceTabCostGroups { get; set; }

    public virtual DbSet<OutsiteOfTreatmentServiceTabOptionPrice> OutsiteOfTreatmentServiceTabOptionPrices { get; set; }

    public virtual DbSet<PackageServiceConcept> PackageServiceConcepts { get; set; }

    public virtual DbSet<PackageServiceDepartment> PackageServiceDepartments { get; set; }

    public virtual DbSet<PackageServiceServiceOfPackage> PackageServiceServiceOfPackages { get; set; }

    public virtual DbSet<PackageServiceUsedPayment> PackageServiceUsedPayments { get; set; }

    public virtual DbSet<PageTreamentDiagnoseCompanying> PageTreamentDiagnoseCompanyings { get; set; }

    public virtual DbSet<PageTreamentPatientDesignateService> PageTreamentPatientDesignateServices { get; set; }

    public virtual DbSet<PageTreatmentMedicalRecord> PageTreatmentMedicalRecords { get; set; }

    public virtual DbSet<PageTreatmentPatientDesignateServiceChemistry> PageTreatmentPatientDesignateServiceChemistries { get; set; }

    public virtual DbSet<PageTreatmentPatientDesignateServiceDinner> PageTreatmentPatientDesignateServiceDinners { get; set; }

    public virtual DbSet<PageTreatmentPatientDesignateServiceDrug> PageTreatmentPatientDesignateServiceDrugs { get; set; }

    public virtual DbSet<PageTreatmentPatientDesignateServiceSupply> PageTreatmentPatientDesignateServiceSupplies { get; set; }

    public virtual DbSet<PartnerChildPartner> PartnerChildPartners { get; set; }

    public virtual DbSet<PartnerGroupService> PartnerGroupServices { get; set; }

    public virtual DbSet<PartnerHistoyPartner> PartnerHistoyPartners { get; set; }

    public virtual DbSet<PartnerTypeAtrribute> PartnerTypeAtrributes { get; set; }

    public virtual DbSet<PartnerTypeServiceAttribute> PartnerTypeServiceAttributes { get; set; }

    public virtual DbSet<PatientAdvanceReceipt> PatientAdvanceReceipts { get; set; }

    public virtual DbSet<PatientAppointment> PatientAppointments { get; set; }

    public virtual DbSet<PatientAppointmentService> PatientAppointmentServices { get; set; }

    public virtual DbSet<PatientDesignateServiceBasicInformationPatient> PatientDesignateServiceBasicInformationPatients { get; set; }

    public virtual DbSet<PatientDesignateServiceCdha> PatientDesignateServiceCdhas { get; set; }

    public virtual DbSet<PatientDesignateServiceChemistry> PatientDesignateServiceChemistries { get; set; }

    public virtual DbSet<PatientDesignateServiceDetailSurgicalProceduce> PatientDesignateServiceDetailSurgicalProceduces { get; set; }

    public virtual DbSet<PatientDesignateServiceDinner> PatientDesignateServiceDinners { get; set; }

    public virtual DbSet<PatientDesignateServiceDiseaseExplanationMicrobiology> PatientDesignateServiceDiseaseExplanationMicrobiologies { get; set; }

    public virtual DbSet<PatientDesignateServiceDrug> PatientDesignateServiceDrugs { get; set; }

    public virtual DbSet<PatientDesignateServiceLaboratory> PatientDesignateServiceLaboratories { get; set; }

    public virtual DbSet<PatientDesignateServiceMoney> PatientDesignateServiceMoneys { get; set; }

    public virtual DbSet<PatientDesignateServiceRehabilitation> PatientDesignateServiceRehabilitations { get; set; }

    public virtual DbSet<PatientDesignateServiceSupply> PatientDesignateServiceSupplies { get; set; }

    public virtual DbSet<PatientDesignateServiceSurgicalProceduce> PatientDesignateServiceSurgicalProceduces { get; set; }

    public virtual DbSet<PatientDesignateServiceVaccine> PatientDesignateServiceVaccines { get; set; }

    public virtual DbSet<PatientDiagnose> PatientDiagnoses { get; set; }

    public virtual DbSet<PatientDiagnoseCompanying> PatientDiagnoseCompanyings { get; set; }

    public virtual DbSet<PatientDiagonosePreliminary> PatientDiagonosePreliminaries { get; set; }

    public virtual DbSet<PatientEmergency> PatientEmergencies { get; set; }

    public virtual DbSet<PatientHistory> PatientHistories { get; set; }

    public virtual DbSet<PatientInsurance> PatientInsurances { get; set; }

    public virtual DbSet<PatientPackageService> PatientPackageServices { get; set; }

    public virtual DbSet<PatientRelation> PatientRelations { get; set; }

    public virtual DbSet<PatientSearch> PatientSearches { get; set; }

    public virtual DbSet<PermissionAttribute> PermissionAttributes { get; set; }

    public virtual DbSet<PermissionGroupPermission> PermissionGroupPermissions { get; set; }

    public virtual DbSet<PlaceOfSamplingServiceGroupLvl2> PlaceOfSamplingServiceGroupLvl2s { get; set; }

    public virtual DbSet<PrescriptionMedicineDosage> PrescriptionMedicineDosages { get; set; }

    public virtual DbSet<PresenterPatientSource> PresenterPatientSources { get; set; }

    public virtual DbSet<ProductSuppliesProductEstimate> ProductSuppliesProductEstimates { get; set; }

    public virtual DbSet<ProgramGroupService> ProgramGroupServices { get; set; }

    public virtual DbSet<ProgramService> ProgramServices { get; set; }

    public virtual DbSet<QmstypeScreenKiosk> QmstypeScreenKiosks { get; set; }

    public virtual DbSet<ReceiptCodeDesignateService> ReceiptCodeDesignateServices { get; set; }

    public virtual DbSet<ReceiptCodeDesignateServiceDiscount> ReceiptCodeDesignateServiceDiscounts { get; set; }

    public virtual DbSet<ReceiptCodeDrug> ReceiptCodeDrugs { get; set; }

    public virtual DbSet<ReceiptCodeDrugClassification> ReceiptCodeDrugClassifications { get; set; }

    public virtual DbSet<ReceiptCodeEstimateProduct> ReceiptCodeEstimateProducts { get; set; }

    public virtual DbSet<ReceiptCodeMoney> ReceiptCodeMoneys { get; set; }

    public virtual DbSet<ReceiptCodeRoom> ReceiptCodeRooms { get; set; }

    public virtual DbSet<ReceiptCodeSuppliesProduct> ReceiptCodeSuppliesProducts { get; set; }

    public virtual DbSet<ReceiptCodeSuppliesProductLot> ReceiptCodeSuppliesProductLots { get; set; }

    public virtual DbSet<ReceiptListDrugClassification> ReceiptListDrugClassifications { get; set; }

    public virtual DbSet<RegisterAppoiment> RegisterAppoiments { get; set; }

    public virtual DbSet<RehabilitationAccountImplement> RehabilitationAccountImplements { get; set; }

    public virtual DbSet<RehabilitationOtherSourcePay> RehabilitationOtherSourcePays { get; set; }

    public virtual DbSet<RehabilitationServiceServiceList> RehabilitationServiceServiceLists { get; set; }

    public virtual DbSet<RehabilitationServiceTabCostGroup> RehabilitationServiceTabCostGroups { get; set; }

    public virtual DbSet<RehabilitationServiceTabImplementationRoom> RehabilitationServiceTabImplementationRooms { get; set; }

    public virtual DbSet<RehabilitationServiceTabInsurancePaymentConditon> RehabilitationServiceTabInsurancePaymentConditons { get; set; }

    public virtual DbSet<RehabilitationsServiceTabPriceOption> RehabilitationsServiceTabPriceOptions { get; set; }

    public virtual DbSet<RehabilitationsServicesTabHistoryChanged> RehabilitationsServicesTabHistoryChangeds { get; set; }

    public virtual DbSet<ReportBallotType> ReportBallotTypes { get; set; }

    public virtual DbSet<ReportDrugInteractionLaboratoryService> ReportDrugInteractionLaboratoryServices { get; set; }

    public virtual DbSet<ReportDrugInteractionsAtc1code> ReportDrugInteractionsAtc1codes { get; set; }

    public virtual DbSet<ReportDrugInteractionsAtc2code> ReportDrugInteractionsAtc2codes { get; set; }

    public virtual DbSet<ReportDrugInteractionsDiseaseName> ReportDrugInteractionsDiseaseNames { get; set; }

    public virtual DbSet<ReportDrugInteractionsDrug1> ReportDrugInteractionsDrug1s { get; set; }

    public virtual DbSet<ReportDrugInteractionsDrug2> ReportDrugInteractionsDrug2s { get; set; }

    public virtual DbSet<ReportTypeOfMedicalRecord> ReportTypeOfMedicalRecords { get; set; }

    public virtual DbSet<ResultAppoimentBasicInformationPatient> ResultAppoimentBasicInformationPatients { get; set; }

    public virtual DbSet<ResultHomeBasicInformationPatient> ResultHomeBasicInformationPatients { get; set; }

    public virtual DbSet<RolePermisionGroupPermission> RolePermisionGroupPermissions { get; set; }

    public virtual DbSet<RoomTypeRooom> RoomTypeRoooms { get; set; }

    public virtual DbSet<ServiceConcept> ServiceConcepts { get; set; }

    public virtual DbSet<SetUpBedSelectionOtherSourcePay> SetUpBedSelectionOtherSourcePays { get; set; }

    public virtual DbSet<SettingBedChooseClassifySurgery> SettingBedChooseClassifySurgeries { get; set; }

    public virtual DbSet<SettingGeneralValue> SettingGeneralValues { get; set; }

    public virtual DbSet<SettingQueueQueueObjectType> SettingQueueQueueObjectTypes { get; set; }

    public virtual DbSet<SettingScreenVote> SettingScreenVotes { get; set; }

    public virtual DbSet<SettingSeparateMergeServiceGeneralService> SettingSeparateMergeServiceGeneralServices { get; set; }

    public virtual DbSet<SettingVaccine> SettingVaccines { get; set; }

    public virtual DbSet<SetupMedicalRecordSummary15Day> SetupMedicalRecordSummary15Days { get; set; }

    public virtual DbSet<SuppliesCostGroup> SuppliesCostGroups { get; set; }

    public virtual DbSet<SuppliesKitSupply> SuppliesKitSupplies { get; set; }

    public virtual DbSet<SuppliesOtherPaymentSource> SuppliesOtherPaymentSources { get; set; }

    public virtual DbSet<SuppliesPurposeUse> SuppliesPurposeUses { get; set; }

    public virtual DbSet<SuppliesSupplieBySize> SuppliesSupplieBySizes { get; set; }

    public virtual DbSet<SurgeryPackageGeneralService> SurgeryPackageGeneralServices { get; set; }

    public virtual DbSet<SurgicalProceducesAccountImplement> SurgicalProceducesAccountImplements { get; set; }

    public virtual DbSet<SurgicalProcedureAttribute> SurgicalProcedureAttributes { get; set; }

    public virtual DbSet<SurgicalProceduresServiceOtherSourcePay> SurgicalProceduresServiceOtherSourcePays { get; set; }

    public virtual DbSet<SurgicalProceduresServiceServiceList> SurgicalProceduresServiceServiceLists { get; set; }

    public virtual DbSet<SurgicalProceduresServiceTabAccompanyingService> SurgicalProceduresServiceTabAccompanyingServices { get; set; }

    public virtual DbSet<SurgicalProceduresServiceTabCostGroup> SurgicalProceduresServiceTabCostGroups { get; set; }

    public virtual DbSet<SurgicalProceduresServiceTabImplementationRoom> SurgicalProceduresServiceTabImplementationRooms { get; set; }

    public virtual DbSet<SurgicalProceduresServiceTabInsurancePaymentConditon> SurgicalProceduresServiceTabInsurancePaymentConditons { get; set; }

    public virtual DbSet<SurgicalProceduresServiceTabPriceOption> SurgicalProceduresServiceTabPriceOptions { get; set; }

    public virtual DbSet<SurgicalProceduresServicesTabHistoryChanged> SurgicalProceduresServicesTabHistoryChangeds { get; set; }

    public virtual DbSet<SurvivalIndexDepartment> SurvivalIndexDepartments { get; set; }

    public virtual DbSet<TabAccompanyingServicesObjectType> TabAccompanyingServicesObjectTypes { get; set; }

    public virtual DbSet<TabImplementationRoomsRoom> TabImplementationRoomsRooms { get; set; }

    public virtual DbSet<TabInsurancePaymentConditionAttribute> TabInsurancePaymentConditionAttributes { get; set; }

    public virtual DbSet<TabPriceOptionAttribute> TabPriceOptionAttributes { get; set; }

    public virtual DbSet<TemplateOfDevelopmentsAccount> TemplateOfDevelopmentsAccounts { get; set; }

    public virtual DbSet<TemplateOfDevelopmentsDepartment> TemplateOfDevelopmentsDepartments { get; set; }

    public virtual DbSet<TemplateOfDevelopmentsRoom> TemplateOfDevelopmentsRooms { get; set; }

    public virtual DbSet<TestingProcedureLaboratory> TestingProcedureLaboratories { get; set; }

    public virtual DbSet<TestingProcedureMachine> TestingProcedureMachines { get; set; }

    public virtual DbSet<Viewcheckcontrain> Viewcheckcontrains { get; set; }

    public virtual DbSet<VitalSignsPid> VitalSignsPids { get; set; }

    public virtual DbSet<VitalSignsPidSurvivalIndex> VitalSignsPidSurvivalIndices { get; set; }

    public virtual DbSet<WarehouseAccount> WarehouseAccounts { get; set; }

    public virtual DbSet<WarehouseMechanismBrowerPay> WarehouseMechanismBrowerPays { get; set; }

    public virtual DbSet<WarehouseMechanismEstimationCompensation> WarehouseMechanismEstimationCompensations { get; set; }

    public virtual DbSet<WarehouseReserveBook> WarehouseReserveBooks { get; set; }

    public virtual DbSet<WarehouseWareHouseType> WarehouseWareHouseTypes { get; set; }

    public virtual DbSet<WarehouseWarehousePropertite> WarehouseWarehousePropertites { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Host=103.186.146.89;Port=5433;Database=postgres;Username=postgres;Password=postgrespassword");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasPostgresExtension("pgcrypto")
            .HasPostgresExtension("uuid-ossp");

        modelBuilder.Entity<AccountRole>(entity =>
        {
            entity.HasKey(e => e.AccountRoleId).HasName("Account_Role_pkey");

            entity.ToTable("Account_Role", tb => tb.HasComment("Tài khoản - Vai trò"));

            entity.Property(e => e.AccountRoleId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("account_role_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountRoles)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Account_Role_account_id_fkey");

            entity.HasOne(d => d.Role).WithMany(p => p.AccountRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Account_Role_role_id_fkey");
        });

        modelBuilder.Entity<AppointmentMedicalExamination>(entity =>
        {
            entity.HasKey(e => e.AppointmentMedicalExaminationId).HasName("Appointment_MedicalExamination_pkey");

            entity.ToTable("Appointment_MedicalExamination", tb => tb.HasComment("Lịch hẹn - dịch vụ khám"));

            entity.Property(e => e.AppointmentMedicalExaminationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("appointment_medical_examination_id");
            entity.Property(e => e.AppointmentId).HasColumnName("appointment_id");
            entity.Property(e => e.MedicalExaminationId).HasColumnName("medical_examination_id");

            entity.HasOne(d => d.Appointment).WithMany(p => p.AppointmentMedicalExaminations)
                .HasForeignKey(d => d.AppointmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Appointment_MedicalExamination_appointment_id_fkey");

            entity.HasOne(d => d.MedicalExamination).WithMany(p => p.AppointmentMedicalExaminations)
                .HasForeignKey(d => d.MedicalExaminationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Appointment_MedicalExamination_medical_examination_id_fkey");
        });

        modelBuilder.Entity<BasicInformationPatientIpd>(entity =>
        {
            entity.HasKey(e => e.BasicInformationPatientPid).HasName("BasicInformationPatient_IPD_pkey");

            entity.ToTable("BasicInformationPatient_IPD", tb => tb.HasComment("Bệnh nhân nội trú"));

            entity.Property(e => e.BasicInformationPatientPid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("basic_information_patient_pid");
            entity.Property(e => e.AccountTreatmentId)
                .HasComment("bác sĩ điều trị")
                .HasColumnName("account_treatment_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.BloodType)
                .HasComment("nhóm máu")
                .HasColumnName("blood_type");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.DiagnoseNameText).HasColumnName("diagnose_name_text");
            entity.Property(e => e.DiagnosticId)
                .HasComment("chẩn đoán vào viện")
                .HasColumnName("diagnostic_id");
            entity.Property(e => e.EmployeeId)
                .HasComment("bác sĩ chỉ định")
                .HasColumnName("employee_id");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.Reason)
                .HasComment("lý do vào nội trú")
                .HasColumnName("reason");
            entity.Property(e => e.Weight)
                .HasComment("cân nặng")
                .HasColumnName("weight");

            entity.HasOne(d => d.AccountTreatment).WithMany(p => p.BasicInformationPatientIpds)
                .HasForeignKey(d => d.AccountTreatmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BasicInformationPatient_IPD_account_treatment_id_fkey");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.BasicInformationPatientIpds)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BasicInformationPatient_IPD_basic_information_patient_id_fke");

            entity.HasOne(d => d.BloodTypeNavigation).WithMany(p => p.BasicInformationPatientIpds)
                .HasForeignKey(d => d.BloodType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BasicInformationPatient_IPD_blood_type_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.BasicInformationPatientIpds)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BasicInformationPatient_IPD_department_id_fkey");

            entity.HasOne(d => d.Diagnostic).WithMany(p => p.BasicInformationPatientIpds)
                .HasForeignKey(d => d.DiagnosticId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BasicInformationPatient_IPD_diagnostic_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.BasicInformationPatientIpds)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BasicInformationPatient_IPD_employee_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.BasicInformationPatientIpds)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BasicInformationPatient_IPD_patient_id_fkey");
        });

        modelBuilder.Entity<BedServiceOtherSourcesPay>(entity =>
        {
            entity.HasKey(e => e.BedSeriviceOtherSourcePayId).HasName("BedService_OtherSourcesPay_pkey");

            entity.ToTable("BedService_OtherSourcesPay", tb => tb.HasComment("Dịch vụ giường - Nguồn chi trả khác"));

            entity.Property(e => e.BedSeriviceOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_serivice_other_source_pay_id");
            entity.Property(e => e.BedServiceId).HasColumnName("bed_service_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");

            entity.HasOne(d => d.BedService).WithMany(p => p.BedServiceOtherSourcesPays)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_OtherSourcesPay_bed_serivice_id_fkey");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.BedServiceOtherSourcesPays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_OtherSourcesPay_other_source_pay_id_fkey");
        });

        modelBuilder.Entity<BedServiceServiceList>(entity =>
        {
            entity.HasKey(e => e.BedServiceServiceListId).HasName("BedService_ServiceList_pkey");

            entity.ToTable("BedService_ServiceList", tb => tb.HasComment("Dịch vụ giường - trường hợp kê dịch vụ"));

            entity.Property(e => e.BedServiceServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_service_service_list_id");
            entity.Property(e => e.BedServiceId).HasColumnName("bed_service_id");
            entity.Property(e => e.ServiceListId).HasColumnName("service_list_id");

            entity.HasOne(d => d.BedService).WithMany(p => p.BedServiceServiceLists)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_ServiceList_bed_service_id_fkey");

            entity.HasOne(d => d.ServiceList).WithMany(p => p.BedServiceServiceLists)
                .HasForeignKey(d => d.ServiceListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_ServiceList_service_list_id_fkey");
        });

        modelBuilder.Entity<BedServiceSetUpBedSelection>(entity =>
        {
            entity.HasKey(e => e.BedServiceSetUpBedSelectionId).HasName("BedService_SetUpBedSelection_pkey");

            entity.ToTable("BedService_SetUpBedSelection", tb => tb.HasComment("Dịch vụ giường - Thiết lập chọn giường"));

            entity.Property(e => e.BedServiceSetUpBedSelectionId)
                .ValueGeneratedNever()
                .HasColumnName("bed_service_set_up_bed_selection_id");
            entity.Property(e => e.BedServiceId).HasColumnName("bed_service_id");
            entity.Property(e => e.SetUpBedSelectionId).HasColumnName("set_up_bed_selection_id");

            entity.HasOne(d => d.BedService).WithMany(p => p.BedServiceSetUpBedSelections)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_SetUpBedSelection_bed_service_id_fkey");
        });

        modelBuilder.Entity<BedServiceTabAccompanyingService>(entity =>
        {
            entity.HasKey(e => e.BedServiceTabAccompanyingServiceId).HasName("BedService_TabAccompanyingServices_pkey");

            entity.ToTable("BedService_TabAccompanyingServices", tb => tb.HasComment("Dịch vụ giường - Dịch vụ kèm theo"));

            entity.Property(e => e.BedServiceTabAccompanyingServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_service_tab_accompanying_service_id");
            entity.Property(e => e.BedServiceId).HasColumnName("bed_service_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.TabAccompanyingServiceId).HasColumnName("tab_accompanying_service_id");

            entity.HasOne(d => d.BedService).WithMany(p => p.BedServiceTabAccompanyingServices)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabAccompanyingServices_bed_service_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.BedServiceTabAccompanyingServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabAccompanyingServices_product_id_fkey");

            entity.HasOne(d => d.TabAccompanyingService).WithMany(p => p.BedServiceTabAccompanyingServices)
                .HasForeignKey(d => d.TabAccompanyingServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabAccompanyingServ_tab_accompanying_service_id_fkey");
        });

        modelBuilder.Entity<BedServiceTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.BedServiceTabCostGroupId).HasName("BedService_TabCostGroup_pkey");

            entity.ToTable("BedService_TabCostGroup", tb => tb.HasComment("Dịch vụ giường - Nhóm chi phí"));

            entity.Property(e => e.BedServiceTabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_service_tab_cost_group_id");
            entity.Property(e => e.BedServiceId).HasColumnName("bed_service_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.BedService).WithMany(p => p.BedServiceTabCostGroups)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabCostGroup_bed_service_id_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.BedServiceTabCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabCostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<BedServiceTabImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.BedServiceTabImplementRoomId).HasName("BedService_TabImplementationRooms_pkey");

            entity.ToTable("BedService_TabImplementationRooms", tb => tb.HasComment("Dịch vụ giường - Phòng thực hiện"));

            entity.Property(e => e.BedServiceTabImplementRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_service_tab_implement_room_id");
            entity.Property(e => e.BedServiceId).HasColumnName("bed_service_id");
            entity.Property(e => e.TabImplementRoomId).HasColumnName("tab_implement_room_id");

            entity.HasOne(d => d.BedService).WithMany(p => p.BedServiceTabImplementationRooms)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabImplementationRooms_bed_service_id_fkey");

            entity.HasOne(d => d.TabImplementRoom).WithMany(p => p.BedServiceTabImplementationRooms)
                .HasForeignKey(d => d.TabImplementRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabImplementationRooms_tab_implement_room_id_fkey");
        });

        modelBuilder.Entity<BedServiceTabPriceOption>(entity =>
        {
            entity.HasKey(e => e.BedServiceTabPriceOptionId).HasName("BedService_TabPriceOption_pkey");

            entity.ToTable("BedService_TabPriceOption", tb => tb.HasComment("Dịch vụ giường - Tùy chọn giá"));

            entity.Property(e => e.BedServiceTabPriceOptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_service_tab_price_option_id");
            entity.Property(e => e.BedServiceId).HasColumnName("bed_service_id");
            entity.Property(e => e.TabPriceOptionId).HasColumnName("tab_price_option_id");

            entity.HasOne(d => d.BedService).WithMany(p => p.BedServiceTabPriceOptions)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabPriceOption_bed_service_id_fkey");

            entity.HasOne(d => d.TabPriceOption).WithMany(p => p.BedServiceTabPriceOptions)
                .HasForeignKey(d => d.TabPriceOptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BedService_TabPriceOption_tab_price_option_id_fkey");
        });

        modelBuilder.Entity<BidDetailBaseDeclaration>(entity =>
        {
            entity.HasKey(e => e.BidDetailBaseDeclarationId).HasName("BidDetail_BaseDeclaration_pkey");

            entity.ToTable("BidDetail_BaseDeclaration", tb => tb.HasComment("Chi tiết thấu - Khai báo cơ số"));

            entity.Property(e => e.BidDetailBaseDeclarationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bid_detail_base_declaration_id");
            entity.Property(e => e.BidDetailId).HasColumnName("bid_detail_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DecisionDate)
                .HasComment("ngày công văn/quyết định")
                .HasColumnName("decision_date");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Qty)
                .HasComment("số lượng điều chỉnh")
                .HasColumnName("qty");
            entity.Property(e => e.Reason)
                .HasComment("lý do : 1 điều chỉnh 2 vượt 20%")
                .HasColumnName("reason");
            entity.Property(e => e.Status)
                .HasComment("tình trạng 1: giảm 2 tăng")
                .HasColumnName("status");
            entity.Property(e => e.UnitName).HasColumnName("unit_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BidDetail).WithMany(p => p.BidDetailBaseDeclarations)
                .HasForeignKey(d => d.BidDetailId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BidDetail_BaseDeclaration_bid_detail_id_fkey");
        });

        modelBuilder.Entity<BidDetailDiscountDeclaration>(entity =>
        {
            entity.HasKey(e => e.BidDetailDiscountDeclarationId).HasName("BidDetail_DiscountDeclaration_pkey");

            entity.ToTable("BidDetail_DiscountDeclaration", tb => tb.HasComment("chi tiết thầu - khai báo giảm giá"));

            entity.Property(e => e.BidDetailDiscountDeclarationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bid_detail_discount_declaration_id");
            entity.Property(e => e.BidDetailId).HasColumnName("bid_detail_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.FromDate)
                .HasComment("từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.PriceInsurance)
                .HasColumnType("money")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNoneInsurance)
                .HasColumnType("money")
                .HasColumnName("price_none_insurance");
            entity.Property(e => e.PriceVat)
                .HasColumnType("money")
                .HasColumnName("price_vat");
            entity.Property(e => e.Reason)
                .HasComment("lý do")
                .HasColumnName("reason");
            entity.Property(e => e.Surcharge)
                .HasColumnType("money")
                .HasColumnName("surcharge");
            entity.Property(e => e.ToDate)
                .HasComment("đến ngày")
                .HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BidDetail).WithMany(p => p.BidDetailDiscountDeclarations)
                .HasForeignKey(d => d.BidDetailId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BidDetail_DiscountDeclaration_bid_detail_id_fkey");
        });

        modelBuilder.Entity<BidDetailsProduct>(entity =>
        {
            entity.HasKey(e => e.BidDetailProductId).HasName("BidDetails_Product_pkey");

            entity.ToTable("BidDetails_Product", tb => tb.HasComment("Chi tiết thầu - Hàng hóa"));

            entity.Property(e => e.BidDetailProductId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bid_detail_product_id");
            entity.Property(e => e.BidDetailsId).HasColumnName("bid_details_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");

            entity.HasOne(d => d.BidDetails).WithMany(p => p.BidDetailsProducts)
                .HasForeignKey(d => d.BidDetailsId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BidDetails_Product_bid_details_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.BidDetailsProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BidDetails_Product_product_id_fkey");
        });

        modelBuilder.Entity<BidServiceServiceType>(entity =>
        {
            entity.HasKey(e => e.BidServiceServiceTypeId).HasName("BidService_ServiceType_pkey");

            entity.ToTable("BidService_ServiceType", tb => tb.HasComment("Danh sách thầu - loại dịch vụ"));

            entity.Property(e => e.BidServiceServiceTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bid_service_service_type_id");
            entity.Property(e => e.BidServiceId).HasColumnName("bid_service_id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

            entity.HasOne(d => d.BidService).WithMany(p => p.BidServiceServiceTypes)
                .HasForeignKey(d => d.BidServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BidService_ServiceType_bid_service_id_fkey");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.BidServiceServiceTypes)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BidService_ServiceType_service_type_id_fkey");
        });

        modelBuilder.Entity<BloodProductsCostGroup>(entity =>
        {
            entity.HasKey(e => e.BloodProductCostGroupId).HasName("BloodProducts_CostGroup_pkey");

            entity.ToTable("BloodProducts_CostGroup", tb => tb.HasComment("Danh mục Chế phẩm máu - Nhóm chi phí"));

            entity.Property(e => e.BloodProductCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("blood_product_cost_group_id");
            entity.Property(e => e.BloodProductId).HasColumnName("blood_product_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.BloodProduct).WithMany(p => p.BloodProductsCostGroups)
                .HasForeignKey(d => d.BloodProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BloodProducts_CostGroup_blood_product_id_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.BloodProductsCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BloodProducts_CostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<BloodProductsOtherSourcesPay>(entity =>
        {
            entity.HasKey(e => e.BloodProductsOtherSourcePayId).HasName("BloodProducts_OtherSourcesPay_pkey");

            entity.ToTable("BloodProducts_OtherSourcesPay", tb => tb.HasComment("Chế phẩm máu - Nguồn chi trả khác"));

            entity.Property(e => e.BloodProductsOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("blood_products_other_source_pay_id");
            entity.Property(e => e.BloodProductId).HasColumnName("blood_product_id");
            entity.Property(e => e.OtherSourcePayAttributeId).HasColumnName("other_source_pay_attribute_id");

            entity.HasOne(d => d.BloodProduct).WithMany(p => p.BloodProductsOtherSourcesPays)
                .HasForeignKey(d => d.BloodProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BloodProducts_OtherSourcesPay_blood_product_id_fkey");

            entity.HasOne(d => d.OtherSourcePayAttribute).WithMany(p => p.BloodProductsOtherSourcesPays)
                .HasForeignKey(d => d.OtherSourcePayAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BloodProducts_OtherSourcesPay_other_source_pay_attribute_i_fkey");
        });

        modelBuilder.Entity<BloodProductsTabAccompanyingService>(entity =>
        {
            entity.HasKey(e => e.BloodProductAccompanyingServiceId).HasName("BloodProducts_AccompanyingService_pkey");

            entity.ToTable("BloodProducts_TabAccompanyingService", tb => tb.HasComment("Chế phẩm máu - Dịch vụ kèm theo"));

            entity.Property(e => e.BloodProductAccompanyingServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("blood_product_accompanying_service_id");
            entity.Property(e => e.BloodProductId).HasColumnName("blood_product_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.TabAccompanyingServiceId).HasColumnName("tab_accompanying_service_id");

            entity.HasOne(d => d.BloodProduct).WithMany(p => p.BloodProductsTabAccompanyingServices)
                .HasForeignKey(d => d.BloodProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BloodProducts_AccompanyingService_blood_product_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.BloodProductsTabAccompanyingServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BloodProducts_AccompanyingService_product_id_fkey");

            entity.HasOne(d => d.TabAccompanyingService).WithMany(p => p.BloodProductsTabAccompanyingServices)
                .HasForeignKey(d => d.TabAccompanyingServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("BloodProducts_AccompanyingServ_tab_accompanying_service_id_fkey");
        });

        modelBuilder.Entity<Category10daySurgeryPackage>(entity =>
        {
            entity.HasKey(e => e.SurgeryPackageId).HasName("Category10daySurgeryPackage_pkey");

            entity.ToTable("Category10daySurgeryPackage", tb => tb.HasComment("Danh mục gói mổ 10 ngày"));

            entity.Property(e => e.SurgeryPackageId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgery_package_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.RoomId)
                .HasComment("phòng thực hiện")
                .HasColumnName("room_id");
            entity.Property(e => e.SurgeryPackageCode)
                .HasComment("mã gói")
                .HasColumnType("character varying")
                .HasColumnName("surgery_package_code");
            entity.Property(e => e.SurgeryPackageName)
                .HasComment("tên gói")
                .HasColumnType("character varying")
                .HasColumnName("surgery_package_name");
            entity.Property(e => e.SurgeryPackagePriceNonInsurance)
                .HasComment("đơn giá không bảo hiểm")
                .HasColumnType("money")
                .HasColumnName("surgery_package_price_non_insurance");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.Category10daySurgeryPackages)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Category10daySurgeryPackage_group_service_lvl1_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.Category10daySurgeryPackages)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Category10daySurgeryPackage_room_id_fkey");
        });

        modelBuilder.Entity<CategoryAccount>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("CategoryAccount_pkey");

            entity.ToTable("CategoryAccount", tb => tb.HasComment("Danh mục tài khoản"));

            entity.Property(e => e.AccountId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("account_id");
            entity.Property(e => e.AccountCode)
                .HasComment("mã nhân viên")
                .HasColumnType("character varying")
                .HasColumnName("account_code");
            entity.Property(e => e.AccountName)
                .HasComment("Tên đăng nhập")
                .HasColumnType("character varying")
                .HasColumnName("account_name");
            entity.Property(e => e.Avatar)
                .HasComment("ảnh đại diện")
                .HasColumnName("avatar");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsBlock)
                .HasComment("khóa")
                .HasColumnName("is_block");
            entity.Property(e => e.LoginLast)
                .HasDefaultValueSql("now()")
                .HasComment("đăng nhập lần cuối")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("login_last");
            entity.Property(e => e.LoginTime)
                .HasDefaultValueSql("0")
                .HasComment("số lần đăng nhập")
                .HasColumnName("login_time");
            entity.Property(e => e.LogoutTime)
                .HasDefaultValueSql("0")
                .HasComment("thời gian đăng xuất")
                .HasColumnName("logout_time");
            entity.Property(e => e.Password)
                .HasComment("mật khẩu")
                .HasColumnType("character varying")
                .HasColumnName("password");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.WorkAddress)
                .HasComment("địa chỉ công tác")
                .HasColumnType("character varying")
                .HasColumnName("work_address");
            entity.Property(e => e.WorkName)
                .HasComment("tên đơn vị công tác")
                .HasColumnType("character varying")
                .HasColumnName("work_name");

            entity.HasOne(d => d.Employee).WithMany(p => p.CategoryAccounts)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAccount_employee_id_fkey");
        });

        modelBuilder.Entity<CategoryActiveElement>(entity =>
        {
            entity.HasKey(e => e.ActiveElementId).HasName("CategoryActiveElements_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục hoạt chất"));

            entity.Property(e => e.ActiveElementId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("active_element_id");
            entity.Property(e => e.ActiveElementCode)
                .HasComment("mã hoạt chất")
                .HasColumnType("character varying")
                .HasColumnName("active_element_code");
            entity.Property(e => e.ActiveElementCodeTt40)
                .HasColumnType("character varying")
                .HasColumnName("active_element_code_tt40");
            entity.Property(e => e.ActiveElementName)
                .HasComment("tên hoạt chất")
                .HasColumnName("active_element_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PharmacologicalId)
                .HasComment("id dược lý")
                .HasColumnName("pharmacological_id");
            entity.Property(e => e.ServiceTypeAttributeId)
                .HasComment("id loại dịch vụ")
                .HasColumnName("service_type_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.Pharmacological).WithMany(p => p.CategoryActiveElements)
                .HasForeignKey(d => d.PharmacologicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryActiveElements_pharmacological_id_fkey");

            entity.HasOne(d => d.ServiceTypeAttribute).WithMany(p => p.CategoryActiveElements)
                .HasForeignKey(d => d.ServiceTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryActiveElements_service_type_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryAdvice>(entity =>
        {
            entity.HasKey(e => e.AdviceId).HasName("CategoryAdvice_pkey");

            entity.ToTable("CategoryAdvice", tb => tb.HasComment("Danh mục lời dặn"));

            entity.HasIndex(e => e.AdviceCode, "CategoryAdvice_advice_code_key").IsUnique();

            entity.HasIndex(e => e.AdviceName, "CategoryAdvice_advice_name_key").IsUnique();

            entity.Property(e => e.AdviceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("advice_id");
            entity.Property(e => e.AdviceCode)
                .HasComment("mã lời dặn")
                .HasColumnType("character varying")
                .HasColumnName("advice_code");
            entity.Property(e => e.AdviceName)
                .HasComment("tên lời dặn")
                .HasColumnType("character varying")
                .HasColumnName("advice_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsMedicine)
                .HasComment("dành cho thuốc")
                .HasColumnName("is_medicine");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryAffiliatedWarehouse>(entity =>
        {
            entity.HasKey(e => e.AfiliatedWarehouseId).HasName("CategoryAffiliatedWarehouse_pkey");

            entity.ToTable("CategoryAffiliatedWarehouse", tb => tb.HasComment("Kho Trực Thuộc"));

            entity.Property(e => e.AfiliatedWarehouseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("afiliated_warehouse_id");
            entity.Property(e => e.AfiliatedId).HasColumnName("afiliated_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.Afiliated).WithMany(p => p.CategoryAffiliatedWarehouseAfiliateds)
                .HasForeignKey(d => d.AfiliatedId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAffiliatedWarehouse_afiliated_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.CategoryAffiliatedWarehouseWarehouses)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAffiliatedWarehouse_warehouse_id_fkey");
        });

        modelBuilder.Entity<CategoryAgenciesUnit>(entity =>
        {
            entity.HasKey(e => e.AgenciesUnitId).HasName("CategoryAgenciesUnits_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục cơ quan đơn vị"));

            entity.Property(e => e.AgenciesUnitId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("agencies_unit_id");
            entity.Property(e => e.AgenciesUnitCode)
                .HasComment("mã cơ quan đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("agencies_unit_code");
            entity.Property(e => e.AgenciesUnitName)
                .HasComment("tên cơ quan đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("agencies_unit_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryAntigen>(entity =>
        {
            entity.HasKey(e => e.AntigenId).HasName("CategoryAntigen_pkey");

            entity.ToTable("CategoryAntigen", tb => tb.HasComment("Danh mục kháng nguyên"));

            entity.Property(e => e.AntigenId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("antigen_id");
            entity.Property(e => e.AntigenCode)
                .HasComment("mã kháng nguyên")
                .HasColumnType("character varying")
                .HasColumnName("antigen_code");
            entity.Property(e => e.AntigenName)
                .HasComment("tên kháng nguyên")
                .HasColumnType("character varying")
                .HasColumnName("antigen_name");
            entity.Property(e => e.ChangeBy).HasColumnName("change_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryAppoiment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("CategoryAppoiment_pkey");

            entity.ToTable("CategoryAppoiment", tb => tb.HasComment("Lịch hẹn"));

            entity.Property(e => e.AppointmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("appointment_id");
            entity.Property(e => e.AppointmentDate).HasColumnName("appointment_date");
            entity.Property(e => e.AppointmentType).HasColumnName("appointment_type");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.AppointmentTypeNavigation).WithMany(p => p.CategoryAppoiments)
                .HasForeignKey(d => d.AppointmentType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAppoiment_appointment_type_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryAppoiments)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAppoiment_patient_id_fkey");
        });

        modelBuilder.Entity<CategoryAppointmentOther>(entity =>
        {
            entity.HasKey(e => e.AppointmentOtherId).HasName("CategoryAppointmentOTher_pkey");

            entity.ToTable("CategoryAppointmentOTher", tb => tb.HasComment("Danh sách khách đặt lịch"));

            entity.Property(e => e.AppointmentOtherId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("appointment_other_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DateAppointment)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_appointment");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.FullName)
                .HasColumnType("character varying")
                .HasColumnName("full_name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.Phone)
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryAppointmentOthers)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAppointmentOTher_patient_id_fkey");
        });

        modelBuilder.Entity<CategoryArea>(entity =>
        {
            entity.HasKey(e => e.AreaId).HasName("CategoryArea_pkey");

            entity.ToTable("CategoryArea", tb => tb.HasComment("Danh mục khu vực"));

            entity.Property(e => e.AreaId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("area_id");
            entity.Property(e => e.AreaCode)
                .HasComment("mã khu vực")
                .HasColumnType("character varying")
                .HasColumnName("area_code");
            entity.Property(e => e.AreaName)
                .HasComment("tên khu vực")
                .HasColumnType("character varying")
                .HasColumnName("area_name");
            entity.Property(e => e.AreaTypeAttributeId)
                .HasComment("id loại khu vực")
                .HasColumnName("area_type_attribute_id");
            entity.Property(e => e.BuildingId)
                .HasComment("id tòa nhà")
                .HasColumnName("building_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ObjectAttributeId)
                .HasComment("id đối tượng")
                .HasColumnName("object_attribute_id");
            entity.Property(e => e.ObjectTypeAttributeId)
                .HasComment("id loại đối tượng")
                .HasColumnName("object_type_attribute_id");
            entity.Property(e => e.QuickSelectIndex).HasColumnName("quick_select_index");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.AreaTypeAttribute).WithMany(p => p.CategoryAreaAreaTypeAttributes)
                .HasForeignKey(d => d.AreaTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryArea_area_type_id_fkey");

            entity.HasOne(d => d.Building).WithMany(p => p.CategoryAreas)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryArea_building_id_fkey");

            entity.HasOne(d => d.ObjectAttribute).WithMany(p => p.CategoryAreaObjectAttributes)
                .HasForeignKey(d => d.ObjectAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryArea_object_id_fkey");

            entity.HasOne(d => d.ObjectTypeAttribute).WithMany(p => p.CategoryAreaObjectTypeAttributes)
                .HasForeignKey(d => d.ObjectTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryArea_object_type_id_fkey");
        });

        modelBuilder.Entity<CategoryAttribute>(entity =>
        {
            entity.HasKey(e => e.AttributeId).HasName("CategoryAttribute_pkey");

            entity.ToTable("CategoryAttribute", tb => tb.HasComment("Danh mục thuộc tính"));

            entity.HasIndex(e => e.AttributeCode, "CategoryAttribute_attribute_code_key").IsUnique();

            entity.Property(e => e.AttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("attribute_id");
            entity.Property(e => e.AttributeCode)
                .HasColumnType("character varying")
                .HasColumnName("attribute_code");
            entity.Property(e => e.AttributeName).HasColumnName("attribute_name");
            entity.Property(e => e.AttributeTypeId).HasColumnName("attribute_type_id");
            entity.Property(e => e.FormCode).HasColumnName("form_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.TkNo).HasColumnName("tk_no");

            entity.HasOne(d => d.AttributeType).WithMany(p => p.CategoryAttributes)
                .HasForeignKey(d => d.AttributeTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAttribute_attribute_type_id_fkey");
        });

        modelBuilder.Entity<CategoryAttributeType>(entity =>
        {
            entity.HasKey(e => e.AttributeTypeId).HasName("CategoryAttributeType_pkey");

            entity.ToTable("CategoryAttributeType", tb => tb.HasComment("Danh mục loại thuộc tính"));

            entity.HasIndex(e => e.AttributeCode, "CategoryAttributeType_attribute_code_key").IsUnique();

            entity.Property(e => e.AttributeTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("attribute_type_id");
            entity.Property(e => e.AttributeCode).HasColumnName("attribute_code");
            entity.Property(e => e.AttributeTypeName)
                .HasColumnType("character varying")
                .HasColumnName("attribute_type_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryBallotType>(entity =>
        {
            entity.HasKey(e => e.BallotTypeId).HasName("CategoryBallotType_pkey");

            entity.ToTable("CategoryBallotType", tb => tb.HasComment("Danh mục loại phiếu"));

            entity.Property(e => e.BallotTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("ballot_type_id");
            entity.Property(e => e.BallotTypeCode)
                .HasComment("mã loại phiếu")
                .HasColumnType("character varying")
                .HasColumnName("ballot_type_code");
            entity.Property(e => e.BallotTypeName)
                .HasComment("tên loại phiếu")
                .HasColumnType("character varying")
                .HasColumnName("ballot_type_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryBasicInformationPatient>(entity =>
        {
            entity.HasKey(e => e.BasicInformationPatientId).HasName("CategoryBasicInformationPatient_pkey");

            entity.ToTable("CategoryBasicInformationPatient", tb => tb.HasComment("Thông tin cơ bản bệnh nhân"));

            entity.Property(e => e.BasicInformationPatientId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("basic_information_patient_id");
            entity.Property(e => e.AccountId)
                .HasComment("tài khoản kết thúc khám")
                .HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("ngày tạo")
                .HasColumnName("created_at");
            entity.Property(e => e.IsStatus)
                .HasComment("1 : đang khám, 2 đang thực hiện dịch vụ")
                .HasColumnName("is_status");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientDiagnoseId).HasColumnName("patient_diagnose_id");
            entity.Property(e => e.PatientHistoryId).HasColumnName("patient_history_id");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.PatientSearchId).HasColumnName("patient_search_id");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.Result)
                .HasComment("kết quả")
                .HasColumnName("result");
            entity.Property(e => e.ResultSpecialist)
                .HasComment("kết quả chuyên khoa")
                .HasColumnName("result_specialist");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.TreatmentDirect)
                .HasComment("hướng điều trị")
                .HasColumnName("treatment_direct");
            entity.Property(e => e.UpdatedAt)
                .HasComment("Ngày kết thúc khám")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryBasicInformationPatients)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBasicInformationPatient_account_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.CategoryBasicInformationPatients)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBasicInformationPatient_patient_designate_service_id");

            entity.HasOne(d => d.PatientDiagnose).WithMany(p => p.CategoryBasicInformationPatients)
                .HasForeignKey(d => d.PatientDiagnoseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBasicInformationPatient_patient_diagnose_id_fkey");

            entity.HasOne(d => d.PatientHistory).WithMany(p => p.CategoryBasicInformationPatients)
                .HasForeignKey(d => d.PatientHistoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBasicInformationPatient_patient_history_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryBasicInformationPatients)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBasicInformationPatient_patient_id_fkey");

            entity.HasOne(d => d.PatientSearch).WithMany(p => p.CategoryBasicInformationPatients)
                .HasForeignKey(d => d.PatientSearchId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBasicInformationPatient_patient_search_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryBasicInformationPatients)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBasicInformationPatient_room_id_fkey");
        });

        modelBuilder.Entity<CategoryBedNumber>(entity =>
        {
            entity.HasKey(e => e.BedNumberId).HasName("CategoryBedNumber_pkey");

            entity.ToTable("CategoryBedNumber", tb => tb.HasComment("Danh mục số hiệu giường"));

            entity.Property(e => e.BedNumberId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_number_id");
            entity.Property(e => e.BedNumberCode)
                .HasComment("số hiệu giường")
                .HasColumnType("character varying")
                .HasColumnName("bed_number_code");
            entity.Property(e => e.BedTypeId)
                .HasComment("loại giường")
                .HasColumnName("bed_type_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.InsuranceBed)
                .HasComment("mã giường gửi bhyt")
                .HasColumnType("character varying")
                .HasColumnName("insurance_bed");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsIntensiveCare)
                .HasComment("hồi sức tích cực")
                .HasColumnName("is_intensive_care");
            entity.Property(e => e.RoomId)
                .HasComment("phòng")
                .HasColumnName("room_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BedType).WithMany(p => p.CategoryBedNumbers)
                .HasForeignKey(d => d.BedTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedNumber_bed_type_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryBedNumbers)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedNumber_department_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryBedNumbers)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedNumber_room_id_fkey");
        });

        modelBuilder.Entity<CategoryBedService>(entity =>
        {
            entity.HasKey(e => e.BedServiceId).HasName("CategoryBedService_pkey");

            entity.ToTable("CategoryBedService", tb => tb.HasComment("Dịch vụ giường"));

            entity.Property(e => e.BedServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_service_id");
            entity.Property(e => e.BedClassificationAttributeId).HasColumnName("bed_classification_attribute_id");
            entity.Property(e => e.BedServiceCode)
                .HasColumnType("character varying")
                .HasColumnName("bed_service_code");
            entity.Property(e => e.BedServiceName)
                .HasColumnType("character varying")
                .HasColumnName("bed_service_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClsImplementUnitMedicalId).HasColumnName("cls_implement_unit_medical_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DecisionCode)
                .HasColumnType("character varying")
                .HasColumnName("decision_code");
            entity.Property(e => e.DecisionDate).HasColumnName("decision_date");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.GroupServiceLvl1Id).HasColumnName("group_service_lvl1_id");
            entity.Property(e => e.GroupServiceLvl2Id).HasColumnName("group_service_lvl2_id");
            entity.Property(e => e.GroupServiceLvl3Id).HasColumnName("group_service_lvl3_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsIntensiveCare).HasColumnName("is_intensive_care");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.IsRetrictDepartment).HasColumnName("is_retrict_department");
            entity.Property(e => e.IsShowKiosk).HasColumnName("is_show_kiosk");
            entity.Property(e => e.PriceInsurance).HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance).HasColumnName("price_non_insurance");
            entity.Property(e => e.Surcharge)
                .HasColumnType("money")
                .HasColumnName("surcharge");
            entity.Property(e => e.TechServiceTranferUnitMedicalId).HasColumnName("tech_service_tranfer_unit_medical_id");
            entity.Property(e => e.UnitId).HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BedClassificationAttribute).WithMany(p => p.CategoryBedServices)
                .HasForeignKey(d => d.BedClassificationAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_bed_classification_attribute_id_fkey");

            entity.HasOne(d => d.ClsImplementUnitMedical).WithMany(p => p.CategoryBedServiceClsImplementUnitMedicals)
                .HasForeignKey(d => d.ClsImplementUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_cls_implement_unit_medical_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryBedServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_concept_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1).WithMany(p => p.CategoryBedServices)
                .HasForeignKey(d => d.GroupServiceLvl1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2).WithMany(p => p.CategoryBedServices)
                .HasForeignKey(d => d.GroupServiceLvl2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3).WithMany(p => p.CategoryBedServices)
                .HasForeignKey(d => d.GroupServiceLvl3Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_group_service_lvl3_fkey");

            entity.HasOne(d => d.TechServiceTranferUnitMedical).WithMany(p => p.CategoryBedServiceTechServiceTranferUnitMedicals)
                .HasForeignKey(d => d.TechServiceTranferUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_tech_service_tranfer_unit_medical_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryBedServices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBedService_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryBedType>(entity =>
        {
            entity.HasKey(e => e.BedTypeId).HasName("CategoryBedType_pkey");

            entity.ToTable("CategoryBedType", tb => tb.HasComment("Danh mục loại giường"));

            entity.Property(e => e.BedTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bed_type_id");
            entity.Property(e => e.BedTypeCode)
                .HasComment("mã loại giường")
                .HasColumnType("character varying")
                .HasColumnName("bed_type_code");
            entity.Property(e => e.BedTypeName)
                .HasComment("tên loại giường")
                .HasColumnType("character varying")
                .HasColumnName("bed_type_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InsurancePaymentRatio)
                .HasComment("tỉ lệ thanh toán bảo hiểm")
                .HasColumnName("insurance_payment_ratio");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ServicePaymentRatio)
                .HasComment("tỉ lệ thanh toán dịch vụ")
                .HasColumnName("service_payment_ratio");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryBidDetail>(entity =>
        {
            entity.HasKey(e => e.BidDetailsId).HasName("CategoryBidDetails_pkey");

            entity.ToTable(tb => tb.HasComment("Chi tiết thầu"));

            entity.Property(e => e.BidDetailsId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bid_details_id");
            entity.Property(e => e.AtcCode)
                .HasComment("Mã ATC")
                .HasColumnType("character varying")
                .HasColumnName("atc_code");
            entity.Property(e => e.BidBuyQty)
                .HasComment("số lượng được phép mua")
                .HasColumnName("bid_buy_qty");
            entity.Property(e => e.BidProductCode)
                .HasComment("mã hàng hóa đấu thầu")
                .HasColumnType("character varying")
                .HasColumnName("bid_product_code");
            entity.Property(e => e.BidQty)
                .HasComment("số lượng thầu")
                .HasColumnName("bid_qty");
            entity.Property(e => e.BidServiceId)
                .HasComment("quyết định thầu")
                .HasColumnName("bid_service_id");
            entity.Property(e => e.BidThreshold)
                .HasComment("ngưỡng thầu")
                .HasColumnType("character varying")
                .HasColumnName("bid_threshold");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.Code)
                .HasComment("mã hiệu")
                .HasColumnType("character varying")
                .HasColumnName("code");
            entity.Property(e => e.ContactNumber)
                .HasComment("số hợp đồng")
                .HasColumnType("character varying")
                .HasColumnName("contact_number");
            entity.Property(e => e.CostGroupId)
                .HasComment("nhóm chi phí")
                .HasColumnName("cost_group_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DosageForms)
                .HasComment("Phương pháp chế biến Dạng bào chế")
                .HasColumnName("dosage_forms");
            entity.Property(e => e.InsurancePayRate)
                .HasComment("tỷ lệ thanh toán bh")
                .HasColumnName("insurance_pay_rate");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.MappingCode)
                .HasComment("mã ánh xạ")
                .HasColumnType("character varying")
                .HasColumnName("mapping_code");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Origin)
                .HasComment("xuất xứ")
                .HasColumnName("origin");
            entity.Property(e => e.PriceInsurance)
                .HasComment("Đơn giá bh")
                .HasColumnType("money")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNotInsurance)
                .HasComment("đơn giá không bh")
                .HasColumnType("money")
                .HasColumnName("price_not_insurance");
            entity.Property(e => e.PriceVat)
                .HasColumnType("money")
                .HasColumnName("price_vat");
            entity.Property(e => e.ProcessingMethod)
                .HasComment("Phương pháp chế biến")
                .HasColumnName("processing_method");
            entity.Property(e => e.ProducterId)
                .HasComment("Nhà sản xuất")
                .HasColumnName("producter_id");
            entity.Property(e => e.QtyImport)
                .HasComment("số lượng hàng hóa đã nhập")
                .HasColumnName("qty_import");
            entity.Property(e => e.QtyRemain)
                .HasComment("Số lượng hàng hóa còn lại")
                .HasColumnName("qty_remain");
            entity.Property(e => e.QtyReturnSupplierId)
                .HasComment("Số lượng hàng đã trả lại NCC")
                .HasColumnName("qty_return_supplier_id");
            entity.Property(e => e.Specifications)
                .HasComment("quy cách")
                .HasColumnType("character varying")
                .HasColumnName("specifications");
            entity.Property(e => e.SupplieGroupId)
                .HasComment("nhóm vật tư")
                .HasColumnName("supplie_group_id");
            entity.Property(e => e.SupplierId)
                .HasComment("nhà cung cấp")
                .HasColumnName("supplier_id");
            entity.Property(e => e.UnitId).HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WobBidProductName)
                .HasComment("Tên hàng hóa trúng thầu")
                .HasColumnType("character varying")
                .HasColumnName("wob_bid_product_name");
            entity.Property(e => e.WonBidProductCode)
                .HasComment("mã hàng hóa trúng thầu")
                .HasColumnType("character varying")
                .HasColumnName("won_bid_product_code");

            entity.HasOne(d => d.BidService).WithMany(p => p.CategoryBidDetails)
                .HasForeignKey(d => d.BidServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidDetails_bid_service_id_fkey");

            entity.HasOne(d => d.CostGroup).WithMany(p => p.CategoryBidDetails)
                .HasForeignKey(d => d.CostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidDetails_group_cost_id_fkey");

            entity.HasOne(d => d.OriginNavigation).WithMany(p => p.CategoryBidDetails)
                .HasForeignKey(d => d.Origin)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidDetails_origin_fkey");

            entity.HasOne(d => d.ProcessingMethodNavigation).WithMany(p => p.CategoryBidDetails)
                .HasForeignKey(d => d.ProcessingMethod)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidDetails_processing_method_fkey");

            entity.HasOne(d => d.Producter).WithMany(p => p.CategoryBidDetailProducters)
                .HasForeignKey(d => d.ProducterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidDetails_producer_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.CategoryBidDetailSuppliers)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidDetails_supplier_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryBidDetails)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidDetails_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryBidService>(entity =>
        {
            entity.HasKey(e => e.BidServiceId).HasName("CategoryBidService_pkey");

            entity.ToTable("CategoryBidService", tb => tb.HasComment("Danh sách thầu"));

            entity.Property(e => e.BidServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bid_service_id");
            entity.Property(e => e.ActiveDate)
                .HasComment("hiệu lực thầu")
                .HasColumnName("active_date");
            entity.Property(e => e.BidName)
                .HasComment("tên gói thầu")
                .HasColumnType("character varying")
                .HasColumnName("bid_name");
            entity.Property(e => e.BidType)
                .HasComment("loại thầu")
                .HasColumnName("bid_type");
            entity.Property(e => e.BidYear)
                .HasComment("năm")
                .HasColumnName("bid_year");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ContactDated)
                .HasComment("ngày hợp đồng")
                .HasColumnName("contact_dated");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DecisionBid)
                .HasComment("quyết định thầu")
                .HasColumnType("character varying")
                .HasColumnName("decision_bid");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.PublicDate)
                .HasComment("ngày công bố")
                .HasColumnName("public_date");
            entity.Property(e => e.StatusBid)
                .HasComment("trạng thái")
                .HasColumnName("status_bid");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseSourceId)
                .HasComment("nguồn kho")
                .HasColumnName("warehouse_source_id");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryBidServices)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidService_department_id_fkey");

            entity.HasOne(d => d.WarehouseSource).WithMany(p => p.CategoryBidServices)
                .HasForeignKey(d => d.WarehouseSourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBidService_warehouse_source_id_fkey");
        });

        modelBuilder.Entity<CategoryBiopsyLocation>(entity =>
        {
            entity.HasKey(e => e.BiopsyLocaltionId).HasName("CategoryBiopsyLocation_pkey");

            entity.ToTable("CategoryBiopsyLocation", tb => tb.HasComment("Danh mục vị trí sinh thiết"));

            entity.Property(e => e.BiopsyLocaltionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("biopsy_localtion_id");
            entity.Property(e => e.BiopsyLocaltionCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("biopsy_localtion_code");
            entity.Property(e => e.BiopsyLocaltionName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("biopsy_localtion_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryBiosignal>(entity =>
        {
            entity.HasKey(e => e.BiosignalId).HasName("CategoryBiosignal_pkey");

            entity.ToTable("CategoryBiosignal", tb => tb.HasComment("Danh mục sinh hiệu"));

            entity.Property(e => e.BiosignalId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("biosignal_id");
            entity.Property(e => e.BloodPressure).HasColumnName("blood_pressure");
            entity.Property(e => e.BloodPressure2).HasColumnName("blood_pressure2");
            entity.Property(e => e.BloodType).HasColumnName("blood_type");
            entity.Property(e => e.Bmi).HasColumnName("BMI");
            entity.Property(e => e.BodyTemperature).HasColumnName("body_temperature");
            entity.Property(e => e.Breathing).HasColumnName("breathing");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.Circuit).HasColumnName("circuit");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.Physical)
                .HasColumnType("character varying")
                .HasColumnName("physical");
            entity.Property(e => e.Spo2).HasColumnName("spo2");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.Weight).HasColumnName("weight");

            entity.HasOne(d => d.BloodTypeNavigation).WithMany(p => p.CategoryBiosignals)
                .HasForeignKey(d => d.BloodType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBiosignal_blood_type_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryBiosignals)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBiosignal_patient_id_fkey");
        });

        modelBuilder.Entity<CategoryBloodProduct>(entity =>
        {
            entity.HasKey(e => e.BloodProductId).HasName("CategoryBloodProducts_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục chế phẩm máu"));

            entity.Property(e => e.BloodProductId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("blood_product_id");
            entity.Property(e => e.Abbreviations)
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.BloodTypeAttributeId).HasColumnName("blood_type_attribute_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.GroupServiceLvl1).HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2).HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3).HasColumnName("group_service_lvl3");
            entity.Property(e => e.InsurancePaymentRatio).HasColumnName("insurance_payment_ratio");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsEGfr).HasColumnName("is_eGFR");
            entity.Property(e => e.IsEcrcl).HasColumnName("is_ecrcl");
            entity.Property(e => e.IsExtenalPayment).HasColumnName("is_extenal_payment");
            entity.Property(e => e.IsKiosk).HasColumnName("is_kiosk");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.IsRequimentService).HasColumnName("is_requiment_service");
            entity.Property(e => e.IsTransportationCosts).HasColumnName("is_transportation_costs");
            entity.Property(e => e.IsUseCovid).HasColumnName("is_use_covid");
            entity.Property(e => e.NumberDayUsed).HasColumnName("number_day_used");
            entity.Property(e => e.NumberDayWarningExpired).HasColumnName("number_day_warning_expired");
            entity.Property(e => e.NumberDayWarningInsurance).HasColumnName("number_day_warning_insurance");
            entity.Property(e => e.PriceInsurance)
                .HasColumnType("money")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasColumnType("money")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.RoutesId).HasColumnName("routes_id");
            entity.Property(e => e.ServiceCode)
                .HasColumnType("character varying")
                .HasColumnName("service_code");
            entity.Property(e => e.ServiceName)
                .HasColumnType("character varying")
                .HasColumnName("service_name");
            entity.Property(e => e.ServicePaymentRatio).HasColumnName("service_payment_ratio");
            entity.Property(e => e.Surcharge)
                .HasColumnType("money")
                .HasColumnName("surcharge");
            entity.Property(e => e.UnitId).HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.Volume).HasColumnName("volume");

            entity.HasOne(d => d.BloodTypeAttribute).WithMany(p => p.CategoryBloodProducts)
                .HasForeignKey(d => d.BloodTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBloodProducts_blood_type_attribute_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryBloodProducts)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBloodProducts_concept_id_fkey2");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryBloodProducts)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBloodProducts_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryBloodProducts)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBloodProducts_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategoryBloodProducts)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBloodProducts_group_service_lvl3_fkey");

            entity.HasOne(d => d.Routes).WithMany(p => p.CategoryBloodProducts)
                .HasForeignKey(d => d.RoutesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBloodProducts_routes_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryBloodProducts)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBloodProducts_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryBmi>(entity =>
        {
            entity.HasKey(e => e.BmiId).HasName("CategoryBMI_pkey");

            entity.ToTable("CategoryBMI", tb => tb.HasComment("Danh mục đánh giá BMI"));

            entity.Property(e => e.BmiId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("bmi_id");
            entity.Property(e => e.BmiCode)
                .HasComment("mã đánh giá")
                .HasColumnType("character varying")
                .HasColumnName("bmi_code");
            entity.Property(e => e.BmiDesc)
                .HasComment("mô tả")
                .HasColumnName("bmi_desc");
            entity.Property(e => e.BmiMax)
                .HasComment("giá trị lớn nhất")
                .HasColumnName("bmi_max");
            entity.Property(e => e.BmiMin)
                .HasComment("giá trị nhỏ nhất")
                .HasColumnName("bmi_min");
            entity.Property(e => e.BmiName)
                .HasComment("tên đánh giá")
                .HasColumnType("character varying")
                .HasColumnName("bmi_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryBranch>(entity =>
        {
            entity.HasKey(e => e.BranchId).HasName("CategoryBranch_pkey");

            entity.ToTable("CategoryBranch", tb => tb.HasComment("Danh mục chi nhánh"));

            entity.Property(e => e.BranchId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("branch_id");
            entity.Property(e => e.BranchCode)
                .HasComment("mã chi nhánh")
                .HasColumnType("character varying")
                .HasColumnName("branch_code");
            entity.Property(e => e.BranchName)
                .HasComment("tên chi nhánh")
                .HasColumnType("character varying")
                .HasColumnName("branch_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsMain)
                .HasComment("đơn vị chủ quản")
                .HasColumnName("is_main");
            entity.Property(e => e.IsPatientPrivateCode)
                .HasComment("Sinh dải mã người bệnh riêng")
                .HasColumnName("is_patient_private_code");
            entity.Property(e => e.MedicalUnitId)
                .HasComment("id đơn vị y tế")
                .HasColumnName("medical_unit_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.MedicalUnit).WithMany(p => p.CategoryBranches)
                .HasForeignKey(d => d.MedicalUnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryBranch_medical_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryBuilding>(entity =>
        {
            entity.HasKey(e => e.BuildingId).HasName("CategoryBuilding_pkey");

            entity.ToTable("CategoryBuilding", tb => tb.HasComment("Danh sách tòa nhà"));

            entity.Property(e => e.BuildingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("building_id");
            entity.Property(e => e.BuildingCode)
                .HasComment("mã tòa nhà")
                .HasColumnType("character varying")
                .HasColumnName("building_code");
            entity.Property(e => e.BuildingDesc)
                .HasComment("mô tả")
                .HasColumnType("character varying")
                .HasColumnName("building_desc");
            entity.Property(e => e.BuildingName)
                .HasComment("tên tòa nhà")
                .HasColumnType("character varying")
                .HasColumnName("building_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryCardClass>(entity =>
        {
            entity.HasKey(e => e.CardClassId).HasName("CategoryCardClass_pkey");

            entity.ToTable("CategoryCardClass", tb => tb.HasComment("Danh mục hạng thẻ"));

            entity.Property(e => e.CardClassId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("card_class_id");
            entity.Property(e => e.CardClassCode)
                .HasComment("mã hạng thẻ")
                .HasColumnType("character varying")
                .HasColumnName("card_class_code");
            entity.Property(e => e.CardClassName)
                .HasComment("tên hạng thẻ")
                .HasColumnType("character varying")
                .HasColumnName("card_class_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Icon)
                .HasComment("hình ảnh thẻ")
                .HasColumnName("icon");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PointMin)
                .HasComment("số điểm tối thiểu")
                .HasColumnName("point_min");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryCareMode>(entity =>
        {
            entity.HasKey(e => e.CareModeId).HasName("CategoryCareMode_pkey");

            entity.ToTable("CategoryCareMode", tb => tb.HasComment("Chế độ chăm sóc"));

            entity.Property(e => e.CareModeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("care_mode_id");
            entity.Property(e => e.CareModeCode)
                .HasColumnType("character varying")
                .HasColumnName("care_mode_code");
            entity.Property(e => e.CareModeName)
                .HasColumnType("character varying")
                .HasColumnName("care_mode_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryCauseOfHospital>(entity =>
        {
            entity.HasKey(e => e.CauseOfHospitalId).HasName("CategoryCauseOfHospital_pkey");

            entity.ToTable("CategoryCauseOfHospital", tb => tb.HasComment("Danh mục Tai nạn thương tích"));

            entity.Property(e => e.CauseOfHospitalId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cause_of_hospital_id");
            entity.Property(e => e.CauseOfHospitalCode)
                .HasComment("mã nguyên nhân nhập viện")
                .HasColumnType("character varying")
                .HasColumnName("cause_of_hospital_code");
            entity.Property(e => e.CauseOfHospitalName)
                .HasComment("tên nguyên nhân nhập viện")
                .HasColumnType("character varying")
                .HasColumnName("cause_of_hospital_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InsurancePushCode)
                .HasComment("mã đẩy bhyt")
                .HasColumnType("character varying")
                .HasColumnName("insurance_push_code");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryCdhatdcn>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnId).HasName("CategoryCDHATDCN_pkey");

            entity.ToTable("CategoryCDHATDCN", tb => tb.HasComment("Chuẩn đoán hình ảnh  - thăm dò chức năng"));

            entity.Property(e => e.CdhaTdcnId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("từ viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.CdhaTdcnCode)
                .HasComment("mã cdha tdcn")
                .HasColumnType("character varying")
                .HasColumnName("cdha_tdcn_code");
            entity.Property(e => e.CdhaTdcnName)
                .HasComment("tên cdha tdcn")
                .HasColumnType("character varying")
                .HasColumnName("cdha_tdcn_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClassificationSurgeryAttributeId)
                .HasComment("Phân loại PTTT")
                .HasColumnName("classification_surgery_attribute_id");
            entity.Property(e => e.ClsImplementUnitMedicalId)
                .HasComment("CSKCB thực hiện CLS")
                .HasColumnName("cls_implement_unit_medical_id");
            entity.Property(e => e.CodePrint)
                .HasColumnType("character varying")
                .HasColumnName("code_print");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DecisionCode)
                .HasComment("Mã số quyết định")
                .HasColumnType("character varying")
                .HasColumnName("decision_code");
            entity.Property(e => e.DecisionDate)
                .HasComment("Ngày quyết định")
                .HasColumnName("decision_date");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DisplayOrder)
                .HasComment("Thứ tự hiển thị")
                .HasColumnName("display_order");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.ExpiredWarningDay)
                .HasComment("Số ngày cảnh báo HSD")
                .HasColumnName("expired_warning_day");
            entity.Property(e => e.FormId)
                .HasComment("loại biểu mẫu")
                .HasColumnName("form_id");
            entity.Property(e => e.Gender)
                .HasComment("Giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.GroupServiceLvl1Id)
                .HasComment("Nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1_id");
            entity.Property(e => e.GroupServiceLvl2Id)
                .HasComment("Nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2_id");
            entity.Property(e => e.GroupServiceLvl3Id)
                .HasComment("Nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3_id");
            entity.Property(e => e.HealthInsurancePriceCode)
                .HasColumnType("character varying")
                .HasColumnName("health_insurance_price_code");
            entity.Property(e => e.InsuranceWarningNumber)
                .HasComment("Số ngày cảnh báo kê dịch vụ BHYT")
                .HasColumnName("insurance_warning_number");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsBookOnline)
                .HasComment("Đặt khám online")
                .HasColumnName("is_book_online");
            entity.Property(e => e.IsCls)
                .HasComment("Tiếp đón CLS")
                .HasColumnName("is_cls");
            entity.Property(e => e.IsEditService)
                .HasComment("Cho sửa đổi DV")
                .HasColumnName("is_edit_service");
            entity.Property(e => e.IsExternalPayment)
                .HasComment("Thu ngoài")
                .HasColumnName("is_external_payment");
            entity.Property(e => e.IsInsurance).HasColumnName("is_insurance");
            entity.Property(e => e.IsLaterPayment)
                .HasComment("Thanh toán sau")
                .HasColumnName("is_later_payment");
            entity.Property(e => e.IsMedicalRecord)
                .HasComment("Lên TTBA")
                .HasColumnName("is_medical_record");
            entity.Property(e => e.IsNoCharge)
                .HasComment("Không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsNotImplementQtyMultil)
                .HasComment("Không được thực hiện SL nhiều cùng lúc")
                .HasColumnName("is_not_implement_qty_multil");
            entity.Property(e => e.IsRequestConsultation).HasColumnName("is_request_consultation");
            entity.Property(e => e.IsRequestService)
                .HasComment("DV theo yêu cầu")
                .HasColumnName("is_request_service");
            entity.Property(e => e.IsRetrictDepartment)
                .HasComment("Hạn chế khoa chỉ định")
                .HasColumnName("is_retrict_department");
            entity.Property(e => e.IsShowKiosk)
                .HasComment("Hiển thị lên KIOSK")
                .HasColumnName("is_show_kiosk");
            entity.Property(e => e.IsSkipResult)
                .HasComment("DV có kết quả lâu")
                .HasColumnName("is_skip_result");
            entity.Property(e => e.IsSplitQuantityList)
                .HasComment("Tách số lượng khi kê")
                .HasColumnName("is_split_quantity_list");
            entity.Property(e => e.IsSplitVoteDupplicate)
                .HasComment("Tách phiếu chỉ định khi trùng DV")
                .HasColumnName("is_split_vote_dupplicate");
            entity.Property(e => e.IsTt35)
                .HasComment("Áp dụng TT35")
                .HasColumnName("is_tt35");
            entity.Property(e => e.IsUseCovid)
                .HasComment("Dùng cho Covid")
                .HasColumnName("is_use_covid");
            entity.Property(e => e.LisSendCode)
                .HasComment("Mã gửi LIS/PACS")
                .HasColumnType("character varying")
                .HasColumnName("lis_send_code");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberTt37).HasColumnName("number_tt37");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasDefaultValueSql("'100'::double precision")
                .HasComment("tỷ lệ thanh toán bảo hiểm")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PriceInsurance)
                .HasComment("giá bảo hiểm")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasComment("giá không BH")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.ReportId)
                .HasComment("Tên báo cáo")
                .HasColumnName("report_id");
            entity.Property(e => e.ServicePaymentRatio)
                .HasDefaultValueSql("100")
                .HasComment("tỷ lệ thanh toán dịch vụ")
                .HasColumnName("service_payment_ratio");
            entity.Property(e => e.SpecialistId)
                .HasComment("Chuyên khoa")
                .HasColumnName("specialist_id");
            entity.Property(e => e.Surcharge)
                .HasComment("phụ thu")
                .HasColumnName("surcharge");
            entity.Property(e => e.TechServiceTranferUnitMedicalId)
                .HasComment("CSKCB chuyển giao DVKT")
                .HasColumnName("tech_service_tranfer_unit_medical_id");
            entity.Property(e => e.UnitCalId)
                .HasComment("ĐVT")
                .HasColumnName("unit_cal_id");
            entity.Property(e => e.UnitConnectAttributeId)
                .HasComment("Đơn vị kết nối")
                .HasColumnName("unit_connect_attribute_id");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ClassificationSurgeryAttribute).WithMany(p => p.CategoryCdhatdcnClassificationSurgeryAttributes)
                .HasForeignKey(d => d.ClassificationSurgeryAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_classification_surgery_attribute_id_fkey");

            entity.HasOne(d => d.ClsImplementUnitMedical).WithMany(p => p.CategoryCdhatdcnClsImplementUnitMedicals)
                .HasForeignKey(d => d.ClsImplementUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_cls_implement_unit_medical_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryCdhatdcns)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_concept_id_fkey");

            entity.HasOne(d => d.Form).WithMany(p => p.CategoryCdhatdcnForms)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_form_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1).WithMany(p => p.CategoryCdhatdcns)
                .HasForeignKey(d => d.GroupServiceLvl1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_group_service_lvl1_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl2).WithMany(p => p.CategoryCdhatdcns)
                .HasForeignKey(d => d.GroupServiceLvl2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_group_service_lvl2_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl3).WithMany(p => p.CategoryCdhatdcns)
                .HasForeignKey(d => d.GroupServiceLvl3Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_group_service_lvl3_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.CategoryCdhatdcns)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_report_id_fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.CategoryCdhatdcns)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_specialist_id_fkey");

            entity.HasOne(d => d.TechServiceTranferUnitMedical).WithMany(p => p.CategoryCdhatdcnTechServiceTranferUnitMedicals)
                .HasForeignKey(d => d.TechServiceTranferUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_tech_service_tranfer_unit_medical_id_fkey");

            entity.HasOne(d => d.UnitCal).WithMany(p => p.CategoryCdhatdcns)
                .HasForeignKey(d => d.UnitCalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_unit_cal_id_fkey");

            entity.HasOne(d => d.UnitConnectAttribute).WithMany(p => p.CategoryCdhatdcnUnitConnectAttributes)
                .HasForeignKey(d => d.UnitConnectAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCDHATDCN_unit_connect_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryCdhatdcnresultTemplate>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnResultTemplateId).HasName("CategoryCDHATDCNResultTemplate_pkey");

            entity.ToTable("CategoryCDHATDCNResultTemplate", tb => tb.HasComment("Danh mục mẫu kết quả CDHATDCN"));

            entity.Property(e => e.CdhaTdcnResultTemplateId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_result_template_id");
            entity.Property(e => e.CdhaTdcnResultTemplateCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("cdha_tdcn_result_template_code");
            entity.Property(e => e.CdhaTdcnResultTemplateName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("cdha_tdcn_result_template_name");
            entity.Property(e => e.Conclude)
                .HasComment("kết luận")
                .HasColumnName("conclude");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.MethodOfIntervention)
                .HasComment("cách thức can thiệp")
                .HasColumnName("method_of_intervention");
            entity.Property(e => e.ModeOfInterference)
                .HasComment("phương thức can thiệp")
                .HasColumnName("mode_of_Interference");
            entity.Property(e => e.Result)
                .HasComment("kết quả")
                .HasColumnName("result");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryChemistry>(entity =>
        {
            entity.HasKey(e => e.ChemistriesId).HasName("CategoryChemistry_pkey");

            entity.ToTable("CategoryChemistry", tb => tb.HasComment("Danh mục hóa chất"));

            entity.Property(e => e.ChemistriesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("chemistries_id");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.BidDecision)
                .HasComment("quyết định thầu")
                .HasColumnType("character varying")
                .HasColumnName("bid_decision");
            entity.Property(e => e.CeilingPrice)
                .HasComment("giá trần")
                .HasColumnType("money")
                .HasColumnName("ceiling_price");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ChemistriesCode)
                .HasComment("mã hóa chất")
                .HasColumnType("character varying")
                .HasColumnName("chemistries_code");
            entity.Property(e => e.ChemistriesName)
                .HasComment("Tên hóa chất")
                .HasColumnType("character varying")
                .HasColumnName("chemistries_name");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.GroupChemistriesId)
                .HasComment("id nhóm hóa chất")
                .HasColumnName("group_chemistries_id");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.ImportPrice)
                .HasComment("giá nhập")
                .HasColumnType("money")
                .HasColumnName("import_price");
            entity.Property(e => e.InsuranceCeilingPrice)
                .HasComment("trần bảo hiểm")
                .HasColumnType("money")
                .HasColumnName("insurance_ceiling_price");
            entity.Property(e => e.InsurancePaymentRatio)
                .HasComment("tỷ lệ thanh toán bảo hiểm")
                .HasColumnName("insurance_payment_ratio");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsInsurance).HasColumnName("is_insurance");
            entity.Property(e => e.IsNoCharge)
                .HasComment("không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsYhct).HasColumnName("is_yhct");
            entity.Property(e => e.NationalId)
                .HasComment("id nước sản xuất")
                .HasColumnName("national_id");
            entity.Property(e => e.NumberDayWarningExpired)
                .HasComment("số ngày cảnh báo hsd")
                .HasColumnName("number_day_warning_expired");
            entity.Property(e => e.ProducerId)
                .HasComment("id nhà sản xuất")
                .HasColumnName("producer_id");
            entity.Property(e => e.ReceiptCodeId)
                .HasComment("mã phiếu lĩnh")
                .HasColumnName("receipt_code_id");
            entity.Property(e => e.ServicePaymentRatio)
                .HasComment("tỷ lệ thanh toán dịch vụ")
                .HasColumnName("service_payment_ratio");
            entity.Property(e => e.Specifications)
                .HasComment("quy cách")
                .HasColumnType("character varying")
                .HasColumnName("specifications");
            entity.Property(e => e.SupplierId)
                .HasComment("id nhà cung cấp")
                .HasColumnName("supplier_id");
            entity.Property(e => e.UnitId)
                .HasComment("id đơn vị")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_concept_id_fkey");

            entity.HasOne(d => d.GroupChemistries).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.GroupChemistriesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_group_chemistries_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_group_service_lvl3_fkey");

            entity.HasOne(d => d.National).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.NationalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_national_id_fkey");

            entity.HasOne(d => d.Producer).WithMany(p => p.CategoryChemistryProducers)
                .HasForeignKey(d => d.ProducerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_producer_id_fkey");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_receipt_code_id_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.CategoryChemistrySuppliers)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_supplier_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryChemistries)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryChemistry_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryChildPartner>(entity =>
        {
            entity.HasKey(e => e.ChildPartnerId).HasName("CategoryChildPartner_pkey");

            entity.ToTable("CategoryChildPartner", tb => tb.HasComment("Đối tác con"));

            entity.Property(e => e.ChildPartnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("child_partner_id");
            entity.Property(e => e.ChildPartnerCode)
                .HasColumnType("character varying")
                .HasColumnName("child_partner_code");
            entity.Property(e => e.ChildPartnerName)
                .HasColumnType("character varying")
                .HasColumnName("child_partner_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsNotSendName).HasColumnName("is_not_send_name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.TaxCode)
                .HasColumnType("character varying")
                .HasColumnName("tax_code");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryCity>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("CategoryCity_pkey");

            entity.ToTable("CategoryCity", tb => tb.HasComment("Danh mục thành phố"));

            entity.Property(e => e.CityId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("city_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.CityCode)
                .HasComment("mã thành phố")
                .HasColumnType("character varying")
                .HasColumnName("city_code");
            entity.Property(e => e.CityName)
                .HasComment("tên thành phố")
                .HasColumnType("character varying")
                .HasColumnName("city_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.NationalId)
                .HasComment("id quốc gia")
                .HasColumnName("national_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.VaccinationNationalSyncCode)
                .HasComment("mã đồng bộ tiêm chủng quốc gia")
                .HasColumnType("character varying")
                .HasColumnName("vaccination_national_sync_code");

            entity.HasOne(d => d.National).WithMany(p => p.CategoryCities)
                .HasForeignKey(d => d.NationalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCity_national_id_fkey");
        });

        modelBuilder.Entity<CategoryClassifyPatient>(entity =>
        {
            entity.HasKey(e => e.ClassifyPatientId).HasName("CategoryClassifyPatients_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục phân loại bệnh nhân"));

            entity.Property(e => e.ClassifyPatientId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("classify_patient_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClassifyPatientBg)
                .HasComment("màu nền")
                .HasColumnType("character varying")
                .HasColumnName("classify_patient_bg");
            entity.Property(e => e.ClassifyPatientCode)
                .HasComment("mã phân loại người bệnh")
                .HasColumnType("character varying")
                .HasColumnName("classify_patient_code");
            entity.Property(e => e.ClassifyPatientDesc)
                .HasComment("mô tả")
                .HasColumnName("classify_patient_desc");
            entity.Property(e => e.ClassifyPatientName)
                .HasComment("tên phân loại người bệnh")
                .HasColumnType("character varying")
                .HasColumnName("classify_patient_name");
            entity.Property(e => e.ClassifyPatientTextColor)
                .HasComment("màu chữ")
                .HasColumnType("character varying")
                .HasColumnName("classify_patient_text_color");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryCompensationSlip>(entity =>
        {
            entity.HasKey(e => e.CompensationSlipId).HasName("CategoryCompensationSlip_pkey");

            entity.ToTable("CategoryCompensationSlip", tb => tb.HasComment("Phiễu lĩnh bù tủ trực"));

            entity.Property(e => e.CompensationSlipId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("compensation_slip_id");
            entity.Property(e => e.ApproveDate).HasColumnName("approve_date");
            entity.Property(e => e.ApprovedAccount).HasColumnName("approved_account");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CompensationSlipCode)
                .HasColumnType("character varying")
                .HasColumnName("compensation_slip_code");
            entity.Property(e => e.ConceptId)
                .HasComment("loại dịch vụ")
                .HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa chỉ định")
                .HasColumnName("department_id");
            entity.Property(e => e.ExportWarehouseId)
                .HasComment("kho xuất")
                .HasColumnName("export_warehouse_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.OnlineWarehouseId)
                .HasComment("kho tủ trực")
                .HasColumnName("online_warehouse_id");
            entity.Property(e => e.PatientDesignateMedicalServiceId).HasColumnName("patient_designate_medical_service_id");
            entity.Property(e => e.PatientDesignateSuppliesServiceId).HasColumnName("patient_designate_supplies_service_id");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ApprovedAccountNavigation).WithMany(p => p.CategoryCompensationSlipApprovedAccountNavigations)
                .HasForeignKey(d => d.ApprovedAccount)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_approved_account_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryCompensationSlips)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_concept_id_fkey");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CategoryCompensationSlipCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_created_by_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryCompensationSlips)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_department_id_fkey");

            entity.HasOne(d => d.ExportWarehouse).WithMany(p => p.CategoryCompensationSlipExportWarehouses)
                .HasForeignKey(d => d.ExportWarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_export_warehouse_id_fkey");

            entity.HasOne(d => d.OnlineWarehouse).WithMany(p => p.CategoryCompensationSlipOnlineWarehouses)
                .HasForeignKey(d => d.OnlineWarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_online_warehouse_id_fkey");

            entity.HasOne(d => d.PatientDesignateMedicalService).WithMany(p => p.CategoryCompensationSlips)
                .HasForeignKey(d => d.PatientDesignateMedicalServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_patient_designate_medical_service_i");

            entity.HasOne(d => d.PatientDesignateSuppliesService).WithMany(p => p.CategoryCompensationSlips)
                .HasForeignKey(d => d.PatientDesignateSuppliesServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCompensationSlip_patient_designate_supplies_service_");
        });

        modelBuilder.Entity<CategoryConcept>(entity =>
        {
            entity.HasKey(e => e.ConceptId).HasName("CategoryConcept_pkey");

            entity.ToTable("CategoryConcept", tb => tb.HasComment("Danh mục dịch vụ"));

            entity.Property(e => e.ConceptId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("concept_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptName)
                .HasColumnType("character varying")
                .HasColumnName("concept_name");
            entity.Property(e => e.ConceptType)
                .HasDefaultValueSql("1")
                .HasComment("1: dịch vụ 2 hàng hóa")
                .HasColumnName("concept_type");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryConceptType>(entity =>
        {
            entity.HasKey(e => e.ConceptTypeId).HasName("CategoryConceptType_pkey");

            entity.ToTable("CategoryConceptType", tb => tb.HasComment("Danh mục Loại dịch vụ"));

            entity.Property(e => e.ConceptTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("concept_type_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.ConceptTypeName)
                .HasColumnType("character varying")
                .HasColumnName("concept_type_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryConceptTypes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryConceptType_concept_id_fkey");
        });

        modelBuilder.Entity<CategoryCostGroup>(entity =>
        {
            entity.HasKey(e => e.CostGroupId).HasName("CategoryCostGroup_pkey1");

            entity.ToTable("CategoryCostGroup", tb => tb.HasComment("Danh mục nhóm chi phí"));

            entity.Property(e => e.CostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cost_group_id");
            entity.Property(e => e.CostGroupCode)
                .HasComment("mã nhóm chi phí")
                .HasColumnType("character varying")
                .HasColumnName("cost_group_code");
            entity.Property(e => e.CostGroupDesc)
                .HasComment("mô tả nhóm chi phí")
                .HasColumnName("cost_group_desc");
            entity.Property(e => e.CostGroupName)
                .HasComment("tên nhóm chi phí")
                .HasColumnType("character varying")
                .HasColumnName("cost_group_name");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryCouncil>(entity =>
        {
            entity.HasKey(e => e.CouncilId).HasName("CategoryCouncil_pkey");

            entity.ToTable("CategoryCouncil", tb => tb.HasComment("Danh mục hội đồng"));

            entity.Property(e => e.CouncilId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("council_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CouncilCode)
                .HasComment("mã hội đồng")
                .HasColumnType("character varying")
                .HasColumnName("council_code");
            entity.Property(e => e.CouncilName)
                .HasComment("tên hội đồng")
                .HasColumnType("character varying")
                .HasColumnName("council_name");
            entity.Property(e => e.CouncilTypeAttribute)
                .HasComment("Loại hội đồng")
                .HasColumnName("council_type_attribute");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.CouncilTypeAttributeNavigation).WithMany(p => p.CategoryCouncils)
                .HasForeignKey(d => d.CouncilTypeAttribute)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCouncil_council_type_fkey");
        });

        modelBuilder.Entity<CategoryCouncilDetail>(entity =>
        {
            entity.HasKey(e => e.CouncilDetailId).HasName("CategoryCouncilDetail_pkey");

            entity.ToTable("CategoryCouncilDetail", tb => tb.HasComment("Danh mục chi tiết hội đồng"));

            entity.Property(e => e.CouncilDetailId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("council_detail_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Position)
                .HasColumnType("character varying")
                .HasColumnName("position");
            entity.Property(e => e.RoleAttributeId).HasColumnName("role_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Employee).WithMany(p => p.CategoryCouncilDetails)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCouncilDetail_employee_id_fkey");

            entity.HasOne(d => d.RoleAttribute).WithMany(p => p.CategoryCouncilDetails)
                .HasForeignKey(d => d.RoleAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCouncilDetail_role_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryCounter>(entity =>
        {
            entity.HasKey(e => e.CounterId).HasName("CategoryCounter_pkey");

            entity.ToTable("CategoryCounter", tb => tb.HasComment("Danh mục quầy"));

            entity.Property(e => e.CounterId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("counter_id");
            entity.Property(e => e.AreaId)
                .HasComment("khu vực")
                .HasColumnName("area_id");
            entity.Property(e => e.BuildingId)
                .HasComment("tòa")
                .HasColumnName("building_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CounterCode)
                .HasComment("mã quầy")
                .HasColumnType("character varying")
                .HasColumnName("counter_code");
            entity.Property(e => e.CounterName)
                .HasComment("tên quầy")
                .HasColumnType("character varying")
                .HasColumnName("counter_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsNoTicket)
                .HasComment("không lấy số")
                .HasColumnName("is_no_ticket");
            entity.Property(e => e.NextNumber)
                .HasComment("số lượng tiếp theo")
                .HasColumnName("next_number");
            entity.Property(e => e.SpeakerCallingId)
                .HasComment("loa gọi số")
                .HasColumnName("speaker_calling_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WatingNumber)
                .HasComment("số lượng hàng đợi")
                .HasColumnName("wating_number");

            entity.HasOne(d => d.Area).WithMany(p => p.CategoryCounters)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCounter_area_id_fkey");

            entity.HasOne(d => d.Building).WithMany(p => p.CategoryCounters)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCounter_building_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryCounters)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCounter_department_id_fkey");

            entity.HasOne(d => d.SpeakerCalling).WithMany(p => p.CategoryCounters)
                .HasForeignKey(d => d.SpeakerCallingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCounter_speaker_calling_id_fkey");
        });

        modelBuilder.Entity<CategoryCountriesSupply>(entity =>
        {
            entity.HasKey(e => e.CountrySuppliesId).HasName("CategoryCountriesSupplies_pkey");

            entity.ToTable(tb => tb.HasComment("Nước sản xuất vật tư"));

            entity.Property(e => e.CountrySuppliesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("country_supplies_id");
            entity.Property(e => e.CountryName)
                .HasColumnType("character varying")
                .HasColumnName("country_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryCountryDrug>(entity =>
        {
            entity.HasKey(e => e.CountryDrugId).HasName("CategoryCountryDrug_pkey");

            entity.ToTable("CategoryCountryDrug", tb => tb.HasComment("Nước sản xuất thuốc"));

            entity.Property(e => e.CountryDrugId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("country_drug_id");
            entity.Property(e => e.CountryName)
                .HasColumnType("character varying")
                .HasColumnName("country_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryDepartment>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("CategoryDepartment_pkey");

            entity.ToTable("CategoryDepartment", tb => tb.HasComment("Danh mục khoa"));

            entity.Property(e => e.DepartmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("department_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.ApprovePaymentSlip)
                .HasComment("duyệt phiếu trả")
                .HasColumnName("approve_payment_slip");
            entity.Property(e => e.BedActual)
                .HasComment("giường thực tế")
                .HasColumnType("character varying")
                .HasColumnName("bed_actual");
            entity.Property(e => e.BedPlan)
                .HasComment("giường kế hoạch")
                .HasColumnType("character varying")
                .HasColumnName("bed_plan");
            entity.Property(e => e.CeillingInsurance)
                .HasComment("trần bảo hiểm")
                .HasColumnName("ceilling_insurance");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentCode)
                .HasComment("mã khoa")
                .HasColumnType("character varying")
                .HasColumnName("department_code");
            entity.Property(e => e.DepartmentDesc)
                .HasComment("mô tả")
                .HasColumnName("department_desc");
            entity.Property(e => e.DepartmentLogo)
                .HasComment("logo")
                .HasColumnName("department_logo");
            entity.Property(e => e.DepartmentName)
                .HasComment("tên khoa")
                .HasColumnType("character varying")
                .HasColumnName("department_name");
            entity.Property(e => e.InsuranceCode)
                .HasComment("mã bh")
                .HasColumnType("character varying")
                .HasColumnName("insurance_code");
            entity.Property(e => e.InsuranceName)
                .HasComment("tên bh")
                .HasColumnType("character varying")
                .HasColumnName("insurance_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsAutoApprove)
                .HasComment("Tự động duyệt mượn NB")
                .HasColumnName("is_auto_approve");
            entity.Property(e => e.IsDepartmentRedirect)
                .HasComment("Chuyển khoa PTTT")
                .HasColumnName("is_department_redirect");
            entity.Property(e => e.IsLaterPay)
                .HasComment("thanh toán sau")
                .HasColumnName("is_later_pay");
            entity.Property(e => e.NumberPlannedOperatingRooms)
                .HasComment("Số lượng phòng mổ kế hoạch")
                .HasColumnName("number_planned_operating_rooms");
            entity.Property(e => e.TreatmentAdvanceThreshold)
                .HasComment("ngưỡng tạm ứng điều  trị")
                .HasColumnName("treatment_advance_threshold");
            entity.Property(e => e.TypeOfMedicalRecordId)
                .HasComment("loại bệnh án")
                .HasColumnName("type_of_medical_record_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.ApprovePaymentSlipNavigation).WithMany(p => p.CategoryDepartments)
                .HasForeignKey(d => d.ApprovePaymentSlip)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDepartment_approve_payment_slip_fkey");

            entity.HasOne(d => d.TypeOfMedicalRecord).WithMany(p => p.CategoryDepartments)
                .HasForeignKey(d => d.TypeOfMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDepartment_type_of_medical_record_id_fkey");
        });

        modelBuilder.Entity<CategoryDesignationKit>(entity =>
        {
            entity.HasKey(e => e.DesignationKitId).HasName("CategoryDesignationKit_pkey");

            entity.ToTable("CategoryDesignationKit", tb => tb.HasComment("Danh mục bộ chỉ định"));

            entity.Property(e => e.DesignationKitId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DesignationKitCode)
                .HasColumnType("character varying")
                .HasColumnName("designation_kit_code");
            entity.Property(e => e.DesignationKitName)
                .HasColumnType("character varying")
                .HasColumnName("designation_kit_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsDestrictDepartment).HasColumnName("is_destrict_department");
            entity.Property(e => e.IsPrescriptionMedicineKit).HasColumnName("is_prescription_medicine_kit");
            entity.Property(e => e.IsUseCovid).HasColumnName("is_use_covid");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryDesignationKits)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDesignationKit_concept_id_fkey");
        });

        modelBuilder.Entity<CategoryDesignationKitService>(entity =>
        {
            entity.HasKey(e => e.DesignationKitServiceId).HasName("CategoryDesignationKitService_pkey");

            entity.ToTable("CategoryDesignationKitService", tb => tb.HasComment("Danh mục dịch vụ trong bộ"));

            entity.Property(e => e.DesignationKitServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_service_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DosageId)
                .HasComment("chuẩn đoán")
                .HasColumnName("dosage_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.PayMoney)
                .HasComment("tự trả")
                .HasColumnName("pay_money");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasComment("số lượng")
                .HasColumnName("quantity");
            entity.Property(e => e.RoomId)
                .HasComment("phòng chỉ định")
                .HasColumnName("room_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.Dosage).WithMany(p => p.CategoryDesignationKitServices)
                .HasForeignKey(d => d.DosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDesignationKitService_dosage_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.CategoryDesignationKitServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDesignationKitService_product_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryDesignationKitServices)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDesignationKitService_room_id_fkey");
        });

        modelBuilder.Entity<CategoryDinner>(entity =>
        {
            entity.HasKey(e => e.DinnerId).HasName("CategoryDinner_pkey");

            entity.ToTable("CategoryDinner", tb => tb.HasComment("Dịch vụ suất ăn"));

            entity.HasIndex(e => e.DinnerCode, "CategoryDinner_dinner_code_key").IsUnique();

            entity.HasIndex(e => e.DinnerName, "CategoryDinner_dinner_name_key").IsUnique();

            entity.Property(e => e.DinnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("dinner_id");
            entity.Property(e => e.AttributeId)
                .HasComment("loại bữa ăn")
                .HasColumnName("attribute_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DinnerCode)
                .HasComment("mã dịch vụ")
                .HasColumnType("character varying")
                .HasColumnName("dinner_code");
            entity.Property(e => e.DinnerName)
                .HasComment("tên dịch vụ")
                .HasColumnName("dinner_name");
            entity.Property(e => e.PriceInsurance).HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance).HasColumnName("price_non_insurance");
            entity.Property(e => e.Surcharge).HasColumnName("surcharge");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vị")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Attribute).WithMany(p => p.CategoryDinners)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDinner_attribute_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryDinners)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDinner_concept_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryDinners)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDinner_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryDiseaseChapter>(entity =>
        {
            entity.HasKey(e => e.DiseaseChapterId).HasName("CategoryDiseaseChapter_pkey");

            entity.ToTable("CategoryDiseaseChapter", tb => tb.HasComment("Danh mục chương bệnh"));

            entity.Property(e => e.DiseaseChapterId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("disease_chapter_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseChapterCode)
                .HasComment("mã chương bệnh")
                .HasColumnType("character varying")
                .HasColumnName("disease_chapter_code");
            entity.Property(e => e.DiseaseChapterName)
                .HasComment("tên chương bệnh")
                .HasColumnType("character varying")
                .HasColumnName("disease_chapter_name");
            entity.Property(e => e.DiseaseChapterNumber)
                .HasComment("số thứ tự")
                .HasColumnName("disease_chapter_number");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsTypeIcd)
                .HasDefaultValueSql("0")
                .HasComment("0: icd 10, 1 icd 9")
                .HasColumnName("is_type_icd");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryDiseaseGroup>(entity =>
        {
            entity.HasKey(e => e.DiseaseGroupId).HasName("CategoryDiseaseGroup_pkey");

            entity.ToTable("CategoryDiseaseGroup", tb => tb.HasComment("Danh mục nhóm bệnh tật"));

            entity.Property(e => e.DiseaseGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("disease_group_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseChapterId)
                .HasComment("chương bệnh")
                .HasColumnName("disease_chapter_id");
            entity.Property(e => e.DiseaseGroupCode)
                .HasComment("mã nhóm")
                .HasColumnType("character varying")
                .HasColumnName("disease_group_code");
            entity.Property(e => e.DiseaseGroupName)
                .HasComment("tên nhóm")
                .HasColumnType("character varying")
                .HasColumnName("disease_group_name");
            entity.Property(e => e.DiseaseIndex)
                .HasComment("stt")
                .HasColumnName("disease_index");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsTypeIcd)
                .HasDefaultValueSql("0")
                .HasComment("0: icd 10, 1 icd 9")
                .HasColumnName("is_type_icd");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DiseaseChapter).WithMany(p => p.CategoryDiseaseGroups)
                .HasForeignKey(d => d.DiseaseChapterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseGroup_disease_chapter_id_fkey");
        });

        modelBuilder.Entity<CategoryDiseaseName>(entity =>
        {
            entity.HasKey(e => e.DiseaseNameId).HasName("CategoryDiseaseName_pkey");

            entity.ToTable("CategoryDiseaseName", tb => tb.HasComment("Danh mục tên bệnh"));

            entity.Property(e => e.DiseaseNameId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("disease_name_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseChapterId).HasColumnName("disease_chapter_id");
            entity.Property(e => e.DiseaseGroupId).HasColumnName("disease_group_id");
            entity.Property(e => e.DiseaseName)
                .HasColumnType("character varying")
                .HasColumnName("disease_name");
            entity.Property(e => e.DiseaseNameCode)
                .HasColumnType("character varying")
                .HasColumnName("disease_name_code");
            entity.Property(e => e.DiseaseTypeId).HasColumnName("disease_type_id");
            entity.Property(e => e.GroupCodeBcByt)
                .HasColumnType("character varying")
                .HasColumnName("group_code_bc_byt");
            entity.Property(e => e.GroupDetail)
                .HasColumnType("character varying")
                .HasColumnName("group_detail");
            entity.Property(e => e.InsuranceCodeDisease)
                .HasColumnType("character varying")
                .HasColumnName("insurance_code_disease");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsTypeIcd)
                .HasDefaultValueSql("0")
                .HasColumnName("is_type_icd");
            entity.Property(e => e.MainDiseaseGroupId).HasColumnName("main_disease_group_id");
            entity.Property(e => e.SubGroupFirstDiseaseId).HasColumnName("sub_group_first_disease_id");
            entity.Property(e => e.SubGroupSecondDiseaseId).HasColumnName("sub_group_second_disease_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DiseaseChapter).WithMany(p => p.CategoryDiseaseNames)
                .HasForeignKey(d => d.DiseaseChapterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseName_disease_chapter_id_fkey");

            entity.HasOne(d => d.DiseaseGroup).WithMany(p => p.CategoryDiseaseNames)
                .HasForeignKey(d => d.DiseaseGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseName_disease_group_id_fkey");

            entity.HasOne(d => d.DiseaseType).WithMany(p => p.CategoryDiseaseNames)
                .HasForeignKey(d => d.DiseaseTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseName_disease_type_id_fkey");

            entity.HasOne(d => d.MainDiseaseGroup).WithMany(p => p.CategoryDiseaseNames)
                .HasForeignKey(d => d.MainDiseaseGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseName_main_disease_group_fkey");

            entity.HasOne(d => d.SubGroupFirstDisease).WithMany(p => p.CategoryDiseaseNames)
                .HasForeignKey(d => d.SubGroupFirstDiseaseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseName_sub_group_first_disease_id_fkey");

            entity.HasOne(d => d.SubGroupSecondDisease).WithMany(p => p.CategoryDiseaseNames)
                .HasForeignKey(d => d.SubGroupSecondDiseaseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseName_sub_group_second_disease_id_fkey");
        });

        modelBuilder.Entity<CategoryDiseaseType>(entity =>
        {
            entity.HasKey(e => e.DiseaseTypeId).HasName("CategoryDiseaseType_pkey");

            entity.ToTable("CategoryDiseaseType", tb => tb.HasComment("Danh mục Loại bệnh"));

            entity.Property(e => e.DiseaseTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("disease_type_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseChapterId).HasColumnName("disease_chapter_id");
            entity.Property(e => e.DiseaseTypeCode)
                .HasColumnType("character varying")
                .HasColumnName("disease_type_code");
            entity.Property(e => e.DiseaseTypeName)
                .HasColumnType("character varying")
                .HasColumnName("disease_type_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsTypeIcd)
                .HasDefaultValueSql("0")
                .HasComment("0 : icd 10, 1 là icd 9")
                .HasColumnName("is_type_icd");
            entity.Property(e => e.MainDiseaseGroupId).HasColumnName("main_disease_group_id");
            entity.Property(e => e.SubGroupFirstDiseaseId).HasColumnName("sub_group_first_disease_id");
            entity.Property(e => e.SubGroupSecondDiseaseId).HasColumnName("sub_group_second_disease_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.DiseaseChapter).WithMany(p => p.CategoryDiseaseTypes)
                .HasForeignKey(d => d.DiseaseChapterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseType_disease_chapter_id_fkey");

            entity.HasOne(d => d.MainDiseaseGroup).WithMany(p => p.CategoryDiseaseTypes)
                .HasForeignKey(d => d.MainDiseaseGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseType_main_disease_group_id_fkey");

            entity.HasOne(d => d.SubGroupFirstDisease).WithMany(p => p.CategoryDiseaseTypes)
                .HasForeignKey(d => d.SubGroupFirstDiseaseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseType_sub_group_first_disease_id_fkey");

            entity.HasOne(d => d.SubGroupSecondDisease).WithMany(p => p.CategoryDiseaseTypes)
                .HasForeignKey(d => d.SubGroupSecondDiseaseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDiseaseType_sub_group_second_disease_id_fkey");
        });

        modelBuilder.Entity<CategoryDistrict>(entity =>
        {
            entity.HasKey(e => e.DistrictId).HasName("CategoryDistrict_pkey");

            entity.ToTable("CategoryDistrict", tb => tb.HasComment("Danh mục quận huyện"));

            entity.Property(e => e.DistrictId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("district_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("từ viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CityId)
                .HasComment("id thành phố")
                .HasColumnName("city_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DistrictCode)
                .HasComment("mã quận huyện")
                .HasColumnType("character varying")
                .HasColumnName("district_code");
            entity.Property(e => e.DistrictName)
                .HasComment("tên quận huyện")
                .HasColumnType("character varying")
                .HasColumnName("district_name");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.NationalId)
                .HasComment("id quốc gia")
                .HasColumnName("national_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VaccinationNationalSyncCode)
                .HasComment("mã đồng bộ TCQG")
                .HasColumnType("character varying")
                .HasColumnName("vaccination_national_sync_code");

            entity.HasOne(d => d.City).WithMany(p => p.CategoryDistricts)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDistrict_city_id_fkey");

            entity.HasOne(d => d.National).WithMany(p => p.CategoryDistricts)
                .HasForeignKey(d => d.NationalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDistrict_national_id_fkey");
        });

        modelBuilder.Entity<CategoryDoctorDosage>(entity =>
        {
            entity.HasKey(e => e.DoctorDosageId).HasName("CategoryDoctorDosage_pkey");

            entity.ToTable("CategoryDoctorDosage", tb => tb.HasComment("Danh mục liều dùng bác sĩ"));

            entity.Property(e => e.DoctorDosageId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("doctor_dosage_id");
            entity.Property(e => e.AccountId)
                .HasComment("id tài khoản")
                .HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DoctorDosageCode)
                .HasComment("mã liều dùng")
                .HasColumnType("character varying")
                .HasColumnName("doctor_dosage_code");
            entity.Property(e => e.DoctorDosageName)
                .HasComment("tên liều dùng")
                .HasColumnType("character varying")
                .HasColumnName("doctor_dosage_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.QuantityUseAfternoon)
                .HasComment("số lượng dùng chiều")
                .HasColumnName("quantity_use_afternoon");
            entity.Property(e => e.QuantityUseEvening)
                .HasComment("số lượng dùng tối")
                .HasColumnName("quantity_use_evening");
            entity.Property(e => e.QuantityUseMorning)
                .HasComment("số lượng dùng sáng")
                .HasColumnName("quantity_use_morning");
            entity.Property(e => e.QuantityUseNight)
                .HasComment("số lượng dùng đêm")
                .HasColumnName("quantity_use_night");
            entity.Property(e => e.RoutesId)
                .HasComment("id đường dùng")
                .HasColumnName("routes_id");
            entity.Property(e => e.TimeOfUse)
                .HasComment("thời điểm sử dụng")
                .HasColumnType("character varying")
                .HasColumnName("time_of_use");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryDoctorDosages)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDoctorDosage_account_id_fkey");

            entity.HasOne(d => d.Routes).WithMany(p => p.CategoryDoctorDosages)
                .HasForeignKey(d => d.RoutesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDoctorDosage_routes_id_fkey");
        });

        modelBuilder.Entity<CategoryDosage>(entity =>
        {
            entity.HasKey(e => e.DosageId).HasName("CategoryDosage_pkey");

            entity.ToTable("CategoryDosage", tb => tb.HasComment("Danh mục liều dùng"));

            entity.HasIndex(e => e.DosageCode, "CategoryDosage_dosage_code_key").IsUnique();

            entity.HasIndex(e => e.DosageName, "CategoryDosage_dosage_name_key").IsUnique();

            entity.Property(e => e.DosageId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("dosage_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DosageCode)
                .HasComment("mã liều dùng")
                .HasColumnType("character varying")
                .HasColumnName("dosage_code");
            entity.Property(e => e.DosageName)
                .HasComment("tên liều dùng")
                .HasColumnType("character varying")
                .HasColumnName("dosage_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.QuantityPerTimes)
                .HasComment("số lượng/ lần")
                .HasColumnName("quantity_per_times");
            entity.Property(e => e.TimePerDay)
                .HasComment("số lần/ ngày")
                .HasColumnName("time_per_day");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryDrug>(entity =>
        {
            entity.HasKey(e => e.DrugId).HasName("CategoryDrug_pkey");

            entity.ToTable("CategoryDrug", tb => tb.HasComment("Danh mục thuốc"));

            entity.Property(e => e.DrugId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drug_id");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.ActiveElementId)
                .HasComment("id hoạt chất")
                .HasColumnName("active_element_id");
            entity.Property(e => e.ActiveElementRegister)
                .HasColumnType("character varying")
                .HasColumnName("active_element_register");
            entity.Property(e => e.AtcCode)
                .HasComment("mã atc")
                .HasColumnType("character varying")
                .HasColumnName("atc_code");
            entity.Property(e => e.BidDecision)
                .HasColumnType("character varying")
                .HasColumnName("bid_decision");
            entity.Property(e => e.Capacity)
                .HasComment("dung tích")
                .HasColumnName("capacity");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.Content)
                .HasComment("hàm lượng")
                .HasColumnType("character varying")
                .HasColumnName("content");
            entity.Property(e => e.CountryDrugId).HasColumnName("country_drug_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DosageForms)
                .HasComment("Dạng bào chế")
                .HasColumnType("character varying")
                .HasColumnName("dosage_forms");
            entity.Property(e => e.DrugClassificationId)
                .HasComment("phân loại thuốc")
                .HasColumnName("drug_classification_id");
            entity.Property(e => e.DrugCode)
                .HasComment("mã thuốc")
                .HasColumnType("character varying")
                .HasColumnName("drug_code");
            entity.Property(e => e.DrugGroupId)
                .HasComment("nhóm thuốc")
                .HasColumnName("drug_group_id");
            entity.Property(e => e.DrugGroupingId)
                .HasComment("phân nhóm thuốc")
                .HasColumnName("drug_grouping_id");
            entity.Property(e => e.DrugName)
                .HasComment("tên thuốc")
                .HasColumnType("character varying")
                .HasColumnName("drug_name");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.GroupBidAttributeId)
                .HasComment("nhóm thầu")
                .HasColumnName("group_bid_attribute_id");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsAllowOddQtyListing)
                .HasComment("cho phép kê sl lẻ")
                .HasColumnName("is_allow_odd_qty_listing");
            entity.Property(e => e.IsFolowUseDay)
                .HasComment("theo dõi ngày sử dụng")
                .HasColumnName("is_folow_use_day");
            entity.Property(e => e.IsInsurance).HasColumnName("is_insurance");
            entity.Property(e => e.IsNoCharge)
                .HasComment("không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsRequestConsultation).HasColumnName("is_request_consultation");
            entity.Property(e => e.IsStarMedicine)
                .HasComment("thuốc dấu sao")
                .HasColumnName("is_star_medicine");
            entity.Property(e => e.IsSurgery)
                .HasComment("thuộc phẫu thuật")
                .HasColumnName("is_surgery");
            entity.Property(e => e.IsTt30).HasColumnName("is_tt30");
            entity.Property(e => e.IsYhct).HasColumnName("is_yhct");
            entity.Property(e => e.NationalId)
                .HasComment("id nước sản xuất")
                .HasColumnName("national_id");
            entity.Property(e => e.NationalPhamarcyConnection)
                .HasComment("mã liên thông dược quốcgia")
                .HasColumnType("character varying")
                .HasColumnName("national_phamarcy_connection");
            entity.Property(e => e.NumberDayWarningExpired)
                .HasComment("số ngày  cảnh báo hsd")
                .HasColumnName("number_day_warning_expired");
            entity.Property(e => e.NumberRegister)
                .HasColumnType("character varying")
                .HasColumnName("number_register");
            entity.Property(e => e.PackageBidAttributeId)
                .HasComment("gói thầu")
                .HasColumnName("package_bid_attribute_id");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasComment("Tỷ lệ BH thanh toán")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio)
                .HasComment("Tỷ lệ thanh toán dịch vụ")
                .HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceVat)
                .HasComment("Giá sau VAT/ 1 ĐVT sơ cấp")
                .HasColumnName("price_vat");
            entity.Property(e => e.ProcessingMethodId)
                .HasComment("phương pháp chế biến")
                .HasColumnName("processing_method_id");
            entity.Property(e => e.ProducerId)
                .HasComment("nhà sản xuất")
                .HasColumnName("producer_id");
            entity.Property(e => e.RatingCoefficient)
                .HasComment("hệ số định mức")
                .HasColumnName("rating_coefficient");
            entity.Property(e => e.ReceiptId)
                .HasComment("mã phiếu lĩnh")
                .HasColumnName("receipt_id");
            entity.Property(e => e.RoundingTypeAttributeId)
                .HasComment("Loại làm tròn")
                .HasColumnName("rounding_type_attribute_id");
            entity.Property(e => e.RoutesId)
                .HasComment("đường dùng")
                .HasColumnName("routes_id");
            entity.Property(e => e.Specifications)
                .HasComment("quy cách")
                .HasColumnType("character varying")
                .HasColumnName("specifications");
            entity.Property(e => e.SupplierId)
                .HasComment("nhà cung cấp")
                .HasColumnName("supplier_id");
            entity.Property(e => e.UnitLvl1)
                .HasComment("đơn vị sơ cấp")
                .HasColumnName("unit_lvl1");
            entity.Property(e => e.UnitLvl2)
                .HasComment("đơn vị thứ cấp")
                .HasColumnName("unit_lvl2");
            entity.Property(e => e.UnitUsed)
                .HasComment("đơn vị sủ dụng")
                .HasColumnName("unit_used");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UseGuidle)
                .HasComment("hướng dẫn sử dụng")
                .HasColumnName("use_guidle");
            entity.Property(e => e.VisaNumber)
                .HasComment("số visa")
                .HasColumnType("character varying")
                .HasColumnName("visa_number");

            entity.HasOne(d => d.ActiveElement).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.ActiveElementId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_active_element_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_concept_id_fkey");

            entity.HasOne(d => d.CountryDrug).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.CountryDrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_country_drug_id_fkey");

            entity.HasOne(d => d.DrugClassification).WithMany(p => p.CategoryDrugDrugClassifications)
                .HasForeignKey(d => d.DrugClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_drug_classification_id_fkey");

            entity.HasOne(d => d.DrugGroup).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.DrugGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_drug_group_id_fkey");

            entity.HasOne(d => d.DrugGrouping).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.DrugGroupingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_drug_grouping_id_fkey");

            entity.HasOne(d => d.GroupBidAttribute).WithMany(p => p.CategoryDrugGroupBidAttributes)
                .HasForeignKey(d => d.GroupBidAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_group_bid_attribute_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_group_service_lvl3_fkey");

            entity.HasOne(d => d.National).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.NationalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_national_id_fkey");

            entity.HasOne(d => d.PackageBidAttribute).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.PackageBidAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_package_bid_attribute_id_fkey");

            entity.HasOne(d => d.ProcessingMethod).WithMany(p => p.CategoryDrugProcessingMethods)
                .HasForeignKey(d => d.ProcessingMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_processing_method_id_fkey");

            entity.HasOne(d => d.Producer).WithMany(p => p.CategoryDrugProducers)
                .HasForeignKey(d => d.ProducerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_producer_id_fkey");

            entity.HasOne(d => d.Receipt).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.ReceiptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_receipt_id_fkey");

            entity.HasOne(d => d.RoundingTypeAttribute).WithMany(p => p.CategoryDrugRoundingTypeAttributes)
                .HasForeignKey(d => d.RoundingTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_rounding_type_attribute_id_fkey");

            entity.HasOne(d => d.Routes).WithMany(p => p.CategoryDrugs)
                .HasForeignKey(d => d.RoutesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_rourtes_id_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.CategoryDrugSuppliers)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_supplier_id_fkey");

            entity.HasOne(d => d.UnitLvl1Navigation).WithMany(p => p.CategoryDrugUnitLvl1Navigations)
                .HasForeignKey(d => d.UnitLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_unit_lvl1_fkey");

            entity.HasOne(d => d.UnitLvl2Navigation).WithMany(p => p.CategoryDrugUnitLvl2Navigations)
                .HasForeignKey(d => d.UnitLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_unit_lvl2_fkey");

            entity.HasOne(d => d.UnitUsedNavigation).WithMany(p => p.CategoryDrugUnitUsedNavigations)
                .HasForeignKey(d => d.UnitUsed)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrug_unit_used_fkey");
        });

        modelBuilder.Entity<CategoryDrugClassification>(entity =>
        {
            entity.HasKey(e => e.DrugClassificationId).HasName("CategoryDrugClassification_pkey");

            entity.ToTable("CategoryDrugClassification", tb => tb.HasComment("Danh mục phân loại thuốc"));

            entity.Property(e => e.DrugClassificationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drug_classification_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DrugClassificationCode)
                .HasComment("mã phân loại thuốc")
                .HasColumnType("character varying")
                .HasColumnName("drug_classification_code");
            entity.Property(e => e.DrugClassificationName)
                .HasComment("tên phân loại thuốc")
                .HasColumnType("character varying")
                .HasColumnName("drug_classification_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsUsedRequest)
                .HasComment("yêu cầu đợt dùng")
                .HasColumnName("is_used_request");
            entity.Property(e => e.PrescriptionTypeAttributeId)
                .HasComment("loại đơn thuốc")
                .HasColumnName("prescription_type_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.PrescriptionTypeAttribute).WithMany(p => p.CategoryDrugClassifications)
                .HasForeignKey(d => d.PrescriptionTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryDrugClassification_prescription_type_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryDrugGrouping>(entity =>
        {
            entity.HasKey(e => e.DrugGroupingId).HasName("CategoryDrugGrouping_pkey");

            entity.ToTable("CategoryDrugGrouping", tb => tb.HasComment("Phân nhóm thuốc"));

            entity.HasIndex(e => e.DrugGroupingName, "CategoryDrugGrouping_drug_grouping_name_key").IsUnique();

            entity.HasIndex(e => e.DrupGroupingCode, "CategoryDrugGrouping_drup_grouping_code_key").IsUnique();

            entity.Property(e => e.DrugGroupingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drug_grouping_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DrugGroupingName)
                .HasComment("tên nhóm thuốc")
                .HasColumnType("character varying")
                .HasColumnName("drug_grouping_name");
            entity.Property(e => e.DrupGroupingCode)
                .HasComment("mã nhóm thuốc")
                .HasColumnType("character varying")
                .HasColumnName("drup_grouping_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryDryingCost>(entity =>
        {
            entity.HasKey(e => e.DryingCostId).HasName("CategoryDryingCosts_pkey");

            entity.ToTable(tb => tb.HasComment("Chi phí hấp sấy"));

            entity.Property(e => e.DryingCostId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drying_cost_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DecisionBidId)
                .HasColumnType("character varying")
                .HasColumnName("decision_bid_id");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DryingCost)
                .HasColumnType("money")
                .HasColumnName("drying_cost");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryDyeingMethod>(entity =>
        {
            entity.HasKey(e => e.DyeingMethodId).HasName("CategoryDyeingMethod_pkey");

            entity.ToTable("CategoryDyeingMethod", tb => tb.HasComment("danh mục phương pháp nhuộm"));

            entity.Property(e => e.DyeingMethodId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("dyeing_method_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DyeingMethodCode)
                .HasColumnType("character varying")
                .HasColumnName("dyeing_method_code");
            entity.Property(e => e.DyeingMethodName)
                .HasColumnType("character varying")
                .HasColumnName("dyeing_method_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdateAt).HasColumnName("update_at");
        });

        modelBuilder.Entity<CategoryEmergencyTime>(entity =>
        {
            entity.HasKey(e => e.EmergencyTimeId).HasName("CategoryEmergencyTime_pkey");

            entity.ToTable("CategoryEmergencyTime", tb => tb.HasComment("Thời gian cấp cứu"));

            entity.Property(e => e.EmergencyTimeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("emergency_time_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmergencyTimeCode)
                .HasColumnType("character varying")
                .HasColumnName("emergency_time_code");
            entity.Property(e => e.EmergencyTimeName)
                .HasColumnType("character varying")
                .HasColumnName("emergency_time_name");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryEmergencyType>(entity =>
        {
            entity.HasKey(e => e.EmergencyTypeId).HasName("CategoryEmergencyType_pkey");

            entity.ToTable("CategoryEmergencyType", tb => tb.HasComment("Danh mục loại cấp cứu"));

            entity.Property(e => e.EmergencyTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("emergency_type_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmergencyTypeCode)
                .HasColumnType("character varying")
                .HasColumnName("emergency_type_code");
            entity.Property(e => e.EmergencyTypeName)
                .HasColumnType("character varying")
                .HasColumnName("emergency_type_name");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryEmotionlessMethod>(entity =>
        {
            entity.HasKey(e => e.EmotionlessMethodId).HasName("CategoryEmotionlessMethod_pkey");

            entity.ToTable("CategoryEmotionlessMethod", tb => tb.HasComment("Danh mục phương pháp vô cảm"));

            entity.Property(e => e.EmotionlessMethodId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("emotionless_method_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmotionlessMethodClassificationId)
                .HasComment("phân loai phương pháp vô cảm")
                .HasColumnName("emotionless_method_classification_id");
            entity.Property(e => e.EmotionlessMethodCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("emotionless_method_code");
            entity.Property(e => e.EmotionlessMethodName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("emotionless_method_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.EmotionlessMethodClassification).WithMany(p => p.CategoryEmotionlessMethods)
                .HasForeignKey(d => d.EmotionlessMethodClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryEmotionlessMethod_emotionless_method_classificatio_fkey");
        });

        modelBuilder.Entity<CategoryEmployee>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("CategoryEmployee_pkey");

            entity.ToTable("CategoryEmployee", tb => tb.HasComment("Danh mục nhân viên"));

            entity.Property(e => e.EmployeeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("employee_id");
            entity.Property(e => e.Avatar)
                .HasComment("ảnh tải lên")
                .HasColumnName("avatar");
            entity.Property(e => e.AvatarSignature).HasColumnName("avatar_signature");
            entity.Property(e => e.BlockFromDate)
                .HasComment("khóa từ ngày")
                .HasColumnName("block_from_date");
            entity.Property(e => e.BlockToDate)
                .HasComment("khóa đến ngày")
                .HasColumnName("block_to_date");
            entity.Property(e => e.Cerfiticate)
                .HasComment("chứng nhận")
                .HasColumnName("cerfiticate");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.Content)
                .HasComment("kinh nghiệm làm việc")
                .HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Dob)
                .HasComment("ngày sinh")
                .HasColumnName("dob");
            entity.Property(e => e.Email)
                .HasComment("email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EmployeeCode)
                .HasComment("mã nhân viên")
                .HasColumnType("character varying")
                .HasColumnName("employee_code");
            entity.Property(e => e.EmployeeName)
                .HasComment("Họ tên")
                .HasColumnType("character varying")
                .HasColumnName("employee_name");
            entity.Property(e => e.Gender)
                .HasComment("giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.Identity)
                .HasComment("cmnd/cccd")
                .HasColumnType("character varying")
                .HasColumnName("identity");
            entity.Property(e => e.IdentityDigital)
                .HasComment("chứng minh số /MK ký")
                .HasColumnType("character varying")
                .HasColumnName("identity_digital");
            entity.Property(e => e.InsuranceCode)
                .HasComment("mã bhyt")
                .HasColumnName("insurance_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsOnline)
                .HasComment("đặt khám online")
                .HasColumnName("is_online");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.Password)
                .HasComment("mật khẩu")
                .HasColumnType("character varying")
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasComment("điện thoại")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.PositionId)
                .HasComment("vị trí")
                .HasColumnName("position_id");
            entity.Property(e => e.ProfessionalDiplomaId)
                .HasComment("bằng chuyên môn")
                .HasColumnName("professional_diploma_id");
            entity.Property(e => e.SignAccount)
                .HasComment("MST/ tên tài khoản ký")
                .HasColumnType("character varying")
                .HasColumnName("sign_account");
            entity.Property(e => e.SignImage)
                .HasComment("ảnh chữ ký")
                .HasColumnName("sign_image");
            entity.Property(e => e.Title)
                .HasComment("danh hiệu")
                .HasColumnType("character varying")
                .HasColumnName("title");
            entity.Property(e => e.TitleDegreeId)
                .HasComment("học hàm học vị")
                .HasColumnName("title_degree_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Position).WithMany(p => p.CategoryEmployees)
                .HasForeignKey(d => d.PositionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryEmployee_position_id_fkey");

            entity.HasOne(d => d.ProfessionalDiploma).WithMany(p => p.CategoryEmployees)
                .HasForeignKey(d => d.ProfessionalDiplomaId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryEmployee_professional_diploma_id_fkey");

            entity.HasOne(d => d.TitleDegree).WithMany(p => p.CategoryEmployees)
                .HasForeignKey(d => d.TitleDegreeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryEmployee_title_degree_id_fkey");
        });

        modelBuilder.Entity<CategoryEthnic>(entity =>
        {
            entity.HasKey(e => e.EthnicId).HasName("CategoryEthnic_pkey");

            entity.ToTable("CategoryEthnic", tb => tb.HasComment("Danh mục dân tộc"));

            entity.Property(e => e.EthnicId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("ethnic_id");
            entity.Property(e => e.ChangeBy).HasColumnName("change_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EthnicCode)
                .HasComment("mã dân tộc")
                .HasColumnType("character varying")
                .HasColumnName("ethnic_code");
            entity.Property(e => e.EthnicName)
                .HasComment("tên dân tộc")
                .HasColumnType("character varying")
                .HasColumnName("ethnic_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.VaccinationNationalSyncCode)
                .HasComment("mã đồng bộ tiêm chủng quốc gia")
                .HasColumnType("character varying")
                .HasColumnName("vaccination_national_sync_code");
        });

        modelBuilder.Entity<CategoryExamineCode>(entity =>
        {
            entity.HasKey(e => e.ExamineCodeId).HasName("CategoryExamineCode_pkey");

            entity.ToTable("CategoryExamineCode", tb => tb.HasComment("Danh mục mã khám bệnh"));

            entity.Property(e => e.ExamineCodeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("examine_code_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.HospitalSpecial)
                .HasColumnType("character varying")
                .HasColumnName("hospital_special");
            entity.Property(e => e.HospitalTop1)
                .HasColumnType("character varying")
                .HasColumnName("hospital_top1");
            entity.Property(e => e.HospitalTop2)
                .HasColumnType("character varying")
                .HasColumnName("hospital_top2");
            entity.Property(e => e.HospitalTop3)
                .HasColumnType("character varying")
                .HasColumnName("hospital_top3");
            entity.Property(e => e.HospitalTop4)
                .HasColumnType("character varying")
                .HasColumnName("hospital_top4");
            entity.Property(e => e.SpeciallistId).HasColumnName("speciallist_id");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryExamineCodes)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryExamineCode_department_id_fkey");

            entity.HasOne(d => d.Speciallist).WithMany(p => p.CategoryExamineCodes)
                .HasForeignKey(d => d.SpeciallistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryExamineCode_speciallist_id_fkey");
        });

        modelBuilder.Entity<CategoryFinsishExamine>(entity =>
        {
            entity.HasKey(e => e.FinishExamineId).HasName("CategoryFinsishExamine_pkey");

            entity.ToTable("CategoryFinsishExamine", tb => tb.HasComment("Đóng hồ sơ"));

            entity.Property(e => e.FinishExamineId)
                .ValueGeneratedNever()
                .HasColumnName("finish_examine_id");
            entity.Property(e => e.AccountId)
                .HasComment("người phiên dịch")
                .HasColumnName("account_id");
            entity.Property(e => e.AccountResult)
                .HasComment("bác sĩ kết luận")
                .HasColumnName("account_result");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái")
                .HasColumnName("is_status");
            entity.Property(e => e.PatientReceptionId)
                .HasComment("tiếp đón")
                .HasColumnName("patient_reception_id");
            entity.Property(e => e.SetUpMedicalRecordId)
                .HasComment("mã bệnh án dài hạn")
                .HasColumnName("set_up_medical_record_id");
            entity.Property(e => e.TimeFinish)
                .HasComment("thời gian kết thúc")
                .HasColumnName("time_finish");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryFinsishExamineAccounts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryFinsishExamine_account_id_fkey");

            entity.HasOne(d => d.AccountResultNavigation).WithMany(p => p.CategoryFinsishExamineAccountResultNavigations)
                .HasForeignKey(d => d.AccountResult)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryFinsishExamine_account_result_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.CategoryFinsishExamines)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryFinsishExamine_patient_reception_id_fkey");
        });

        modelBuilder.Entity<CategoryGenerateProduct>(entity =>
        {
            entity.HasKey(e => e.GenerateProductId).HasName("CategoryGenerateProduct_pkey");

            entity.ToTable("CategoryGenerateProduct", tb => tb.HasComment("Gói mổ 10 ngày - dịch vụ chung"));

            entity.Property(e => e.GenerateProductId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("generate_product_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Product).WithMany(p => p.CategoryGenerateProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGenerateProduct_product_id_fkey");
        });

        modelBuilder.Entity<CategoryGroupChemistry>(entity =>
        {
            entity.HasKey(e => e.GroupChemistriesId).HasName("CategoryGroupChemistry_pkey");

            entity.ToTable("CategoryGroupChemistry", tb => tb.HasComment("Danh mục nhóm hóa chất"));

            entity.HasIndex(e => e.GroupChemistriesCode, "CategoryGroupChemistry_group_chemistry_code_key").IsUnique();

            entity.HasIndex(e => e.GroupChemistriesName, "CategoryGroupChemistry_group_chemistry_name_key").IsUnique();

            entity.Property(e => e.GroupChemistriesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_chemistries_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupChemistriesCode)
                .HasComment("mã nhóm hóa chất")
                .HasColumnType("character varying")
                .HasColumnName("group_chemistries_code");
            entity.Property(e => e.GroupChemistriesName)
                .HasComment("Tên nhóm hóa chất")
                .HasColumnType("character varying")
                .HasColumnName("group_chemistries_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryGroupCustomerCare>(entity =>
        {
            entity.HasKey(e => e.GroupCustomerCareId).HasName("CategoryGroupCustomerCare_pkey");

            entity.ToTable("CategoryGroupCustomerCare", tb => tb.HasComment("Danh mục chăm sóc khách hàng"));

            entity.Property(e => e.GroupCustomerCareId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_customer_care_id");
            entity.Property(e => e.CardClassId).HasColumnName("card_class_id");
            entity.Property(e => e.PatientSourceId).HasColumnName("patient_source_id");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");

            entity.HasOne(d => d.CardClass).WithMany(p => p.CategoryGroupCustomerCares)
                .HasForeignKey(d => d.CardClassId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupCustomerCare_card_class_id_fkey");

            entity.HasOne(d => d.PatientSource).WithMany(p => p.CategoryGroupCustomerCares)
                .HasForeignKey(d => d.PatientSourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupCustomerCare_patient_source_id_fkey");

            entity.HasOne(d => d.Program).WithMany(p => p.CategoryGroupCustomerCares)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupCustomerCare_program_id_fkey");
        });

        modelBuilder.Entity<CategoryGroupDrug>(entity =>
        {
            entity.HasKey(e => e.GroupDrugId).HasName("CategoryGroupMedicine_pkey");

            entity.ToTable("CategoryGroupDrug", tb => tb.HasComment("Danh mục nhóm thuốc"));

            entity.HasIndex(e => e.GroupDrugCode, "CategoryGroupMedicine_group_medicine_code_key").IsUnique();

            entity.HasIndex(e => e.GroupDrugName, "CategoryGroupMedicine_group_medicine_name_key").IsUnique();

            entity.Property(e => e.GroupDrugId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_drug_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupDrugCode)
                .HasComment("mã nhóm thuốc")
                .HasColumnType("character varying")
                .HasColumnName("group_drug_code");
            entity.Property(e => e.GroupDrugName)
                .HasComment("tên nhóm thuốc")
                .HasColumnType("character varying")
                .HasColumnName("group_drug_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ParentId)
                .HasComment("danh mục cha:")
                .HasColumnName("parent_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryGroupMaterial>(entity =>
        {
            entity.HasKey(e => e.GroupMaterialId).HasName("CategoryGroupMaterial_pkey");

            entity.ToTable("CategoryGroupMaterial", tb => tb.HasComment("Danh mục nhóm vật tư"));

            entity.HasIndex(e => e.GroupMaterialCode, "CategoryGroupMaterial_group_material_code_key").IsUnique();

            entity.HasIndex(e => e.GroupMaterialName, "CategoryGroupMaterial_group_material_name_key").IsUnique();

            entity.Property(e => e.GroupMaterialId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_material_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupMaterialCode)
                .HasComment("mã vật tư")
                .HasColumnType("character varying")
                .HasColumnName("group_material_code");
            entity.Property(e => e.GroupMaterialName)
                .HasComment("tên vật tư")
                .HasColumnType("character varying")
                .HasColumnName("group_material_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryGroupPermission>(entity =>
        {
            entity.HasKey(e => e.GroupPermissionId).HasName("CategoryGroupPermission_pkey");

            entity.ToTable("CategoryGroupPermission", tb => tb.HasComment("Danh mục nhóm tính năng"));

            entity.Property(e => e.GroupPermissionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_permission_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupPermissionCode)
                .HasColumnType("character varying")
                .HasColumnName("group_permission_code");
            entity.Property(e => e.GroupPermissionDesc)
                .HasColumnType("character varying")
                .HasColumnName("group_permission_desc");
            entity.Property(e => e.GroupPermissionName)
                .HasColumnType("character varying")
                .HasColumnName("group_permission_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsOrder).HasColumnName("is_order");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryGroupService>(entity =>
        {
            entity.HasKey(e => e.GroupServiceId).HasName("CategoryGroupService_pkey");

            entity.ToTable("CategoryGroupService", tb => tb.HasComment("Danh mục nhóm dịch vụ"));

            entity.Property(e => e.GroupServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_service_id");
        });

        modelBuilder.Entity<CategoryGroupServiceLevel1>(entity =>
        {
            entity.HasKey(e => e.GroupServiceLvl1Id).HasName("CategoryGroupServiceLevel1_pkey");

            entity.ToTable("CategoryGroupServiceLevel1", tb => tb.HasComment("Danh mục nhóm dịch vụ cấp 1"));

            entity.Property(e => e.GroupServiceLvl1Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_service_lvl1_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupServiceLvl1Code)
                .HasComment("mã nhóm dịch vụ cấp 1")
                .HasColumnType("character varying")
                .HasColumnName("group_service_lvl1_code");
            entity.Property(e => e.GroupServiceLvl1Name)
                .HasComment("tên mã nhóm dịch vụ cấp 1")
                .HasColumnType("character varying")
                .HasColumnName("group_service_lvl1_name");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsIpdPatient)
                .HasComment("Sinh số riêng cho NB Nội trú")
                .HasColumnName("is_ipd_patient");
            entity.Property(e => e.IsPriorityPatient)
                .HasComment("Sinh số riêng cho NB Ưu tiên")
                .HasColumnName("is_priority_patient");
            entity.Property(e => e.IsSkipResult)
                .HasComment("Bỏ qua kết quả lâu")
                .HasColumnName("is_skip_result");
            entity.Property(e => e.NumberGenerateStatusAttributeId)
                .HasComment("trạng thái sinh số thứ tự")
                .HasColumnName("number_generate_status_attribute_id");
            entity.Property(e => e.NumberOnList)
                .HasComment("stt trên bảng kê")
                .HasColumnName("number_on_list");
            entity.Property(e => e.ServiceCompleteStatusAttributeId)
                .HasComment("Trạng thái hoàn thành dv")
                .HasColumnName("service_complete_status_attribute_id");
            entity.Property(e => e.ServiceTypeAttributeId)
                .HasComment("Loại dịch vụ")
                .HasColumnName("service_type_attribute_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.NumberGenerateStatusAttribute).WithMany(p => p.CategoryGroupServiceLevel1NumberGenerateStatusAttributes)
                .HasForeignKey(d => d.NumberGenerateStatusAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel1_number_generate_status_attribut_fkey");

            entity.HasOne(d => d.ServiceCompleteStatusAttribute).WithMany(p => p.CategoryGroupServiceLevel1ServiceCompleteStatusAttributes)
                .HasForeignKey(d => d.ServiceCompleteStatusAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel1_service_complete_status_attribu_fkey");

            entity.HasOne(d => d.ServiceTypeAttribute).WithMany(p => p.CategoryGroupServiceLevel1ServiceTypeAttributes)
                .HasForeignKey(d => d.ServiceTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel1_service_type_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryGroupServiceLevel2>(entity =>
        {
            entity.HasKey(e => e.GroupServiceLevel2Id).HasName("CategoryGroupServiceLevel2_pkey");

            entity.ToTable("CategoryGroupServiceLevel2", tb => tb.HasComment("Danh mục nhóm dịch vụ cấp 2"));

            entity.Property(e => e.GroupServiceLevel2Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_service_level2_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DeviceCode)
                .HasComment("Mã thiết bị")
                .HasColumnType("character varying")
                .HasColumnName("device_code");
            entity.Property(e => e.GroupServiceLevel1Id)
                .HasComment("id nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_level1_id");
            entity.Property(e => e.GroupServiceLevel2Code)
                .HasComment("mã danh mục nhóm dịch vụ cấp 2")
                .HasColumnType("character varying")
                .HasColumnName("group_service_level2_code");
            entity.Property(e => e.GroupServiceLevel2Name)
                .HasComment("Tên nhóm dịch vụ cấp 2")
                .HasColumnType("character varying")
                .HasColumnName("group_service_level2_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsCls)
                .HasComment("Tiếp đón CLS")
                .HasColumnName("is_cls");
            entity.Property(e => e.IsIpdGenerate)
                .HasComment("Sinh số riêng cho NB Nội trú")
                .HasColumnName("is_ipd_generate");
            entity.Property(e => e.IsMicrobiology).HasColumnName("is_microbiology");
            entity.Property(e => e.IsPriorityPatient).HasColumnName("is_priority_patient");
            entity.Property(e => e.IsSkipResult)
                .HasComment("Bỏ qua kết quả lâu")
                .HasColumnName("is_skip_result");
            entity.Property(e => e.IsStoreFilm)
                .HasComment("Lưu phim chụp")
                .HasColumnName("is_store_film");
            entity.Property(e => e.MaxPerformance)
                .HasComment("Công suất tối đa")
                .HasColumnName("max_performance");
            entity.Property(e => e.NumberGenerateStatusId)
                .HasComment("Trạng thái sinh số thứ tự")
                .HasColumnName("number_generate_status_id");
            entity.Property(e => e.ReportId)
                .HasComment("Tên báo cáo")
                .HasColumnName("report_id");
            entity.Property(e => e.ServiceCompleteStatusAttributeId)
                .HasComment("Trạng thái hoàn thành dv")
                .HasColumnName("service_complete_status_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.GroupServiceLevel1).WithMany(p => p.CategoryGroupServiceLevel2s)
                .HasForeignKey(d => d.GroupServiceLevel1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel2_group_service_level1_id_fkey");

            entity.HasOne(d => d.NumberGenerateStatus).WithMany(p => p.CategoryGroupServiceLevel2NumberGenerateStatuses)
                .HasForeignKey(d => d.NumberGenerateStatusId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel2_number_generate_status_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.CategoryGroupServiceLevel2s)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel2_report_id_fkey");

            entity.HasOne(d => d.ServiceCompleteStatusAttribute).WithMany(p => p.CategoryGroupServiceLevel2ServiceCompleteStatusAttributes)
                .HasForeignKey(d => d.ServiceCompleteStatusAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel2_service_complete_status_attribu_fkey");
        });

        modelBuilder.Entity<CategoryGroupServiceLevel3>(entity =>
        {
            entity.HasKey(e => e.GroupServiceLevel3Id).HasName("CategoryGroupServiceLevel3_pkey");

            entity.ToTable("CategoryGroupServiceLevel3", tb => tb.HasComment("Danh mục nhóm dịch vụ cấp 3"));

            entity.Property(e => e.GroupServiceLevel3Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_service_level3_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupServiceLevel1Id)
                .HasComment("nhóm dịch vụ nhóm cấp 1")
                .HasColumnName("group_service_level1_id");
            entity.Property(e => e.GroupServiceLevel2Id)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_level2_id");
            entity.Property(e => e.GroupServiceLevel3Code)
                .HasComment("mã nhóm dịch vụ cấp 3")
                .HasColumnType("character varying")
                .HasColumnName("group_service_level3_code");
            entity.Property(e => e.GroupServiceLevel3Name)
                .HasComment("tên nhóm dịch vụ cấp 3")
                .HasColumnType("character varying")
                .HasColumnName("group_service_level3_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsIpdGenerate)
                .HasComment("Sinh số riêng cho NB Nội trú")
                .HasColumnName("is_ipd_generate");
            entity.Property(e => e.IsPriorityPatient)
                .HasComment("Sinh số riêng cho NB Ưu tiên")
                .HasColumnName("is_priority_patient");
            entity.Property(e => e.IsSkipResult)
                .HasComment("Bỏ qua kết quả lâu")
                .HasColumnName("is_skip_result");
            entity.Property(e => e.NumberGenerateStatusAttributeId)
                .HasComment("Trạng thái sinh số thứ tự")
                .HasColumnName("number_generate_status_attribute_id");
            entity.Property(e => e.NumberReport)
                .HasComment("stt trên báo cáo")
                .HasColumnName("number_report");
            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.ServiceCompletedStatusAttributeId)
                .HasComment("Trạng thái hoàn thành dv")
                .HasColumnName("service_completed_status_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.GroupServiceLevel1).WithMany(p => p.CategoryGroupServiceLevel3s)
                .HasForeignKey(d => d.GroupServiceLevel1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel3_group_service_level1_id_fkey");

            entity.HasOne(d => d.GroupServiceLevel2).WithMany(p => p.CategoryGroupServiceLevel3s)
                .HasForeignKey(d => d.GroupServiceLevel2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel3_group_service_level2_id_fkey");

            entity.HasOne(d => d.NumberGenerateStatusAttribute).WithMany(p => p.CategoryGroupServiceLevel3NumberGenerateStatusAttributes)
                .HasForeignKey(d => d.NumberGenerateStatusAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel3_number_generate_status_attribut_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.CategoryGroupServiceLevel3s)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel3_report_id_fkey");

            entity.HasOne(d => d.ServiceCompletedStatusAttribute).WithMany(p => p.CategoryGroupServiceLevel3ServiceCompletedStatusAttributes)
                .HasForeignKey(d => d.ServiceCompletedStatusAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryGroupServiceLevel3_service_completed_status_attrib_fkey");
        });

        modelBuilder.Entity<CategoryHistoryPartner>(entity =>
        {
            entity.HasKey(e => e.HistoryPartnerId).HasName("CategoryHistoryPartner_pkey");

            entity.ToTable("CategoryHistoryPartner", tb => tb.HasComment("Danh mục lịch sử đối tác"));

            entity.Property(e => e.HistoryPartnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("history_partner_id");
            entity.Property(e => e.AccountBankName)
                .HasColumnType("character varying")
                .HasColumnName("account_bank_name");
            entity.Property(e => e.AccountNumber)
                .HasComment("số tài khoản")
                .HasColumnType("character varying")
                .HasColumnName("account_number");
            entity.Property(e => e.Address)
                .HasComment("địa chỉ")
                .HasColumnName("address");
            entity.Property(e => e.BankName)
                .HasComment("tên ngân hàng")
                .HasColumnType("character varying")
                .HasColumnName("bank_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmailContact)
                .HasComment("email người đầu mối")
                .HasColumnType("character varying")
                .HasColumnName("email_contact");
            entity.Property(e => e.FromDate)
                .HasComment("từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.FundLimit)
                .HasComment("hạn mức quỹ")
                .HasColumnType("money")
                .HasColumnName("fund_limit");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsNotSendUnit)
                .HasComment("không gửi tên đơn vi")
                .HasColumnName("is_not_send_unit");
            entity.Property(e => e.MoneyUsed)
                .HasComment("tiền đã sử dụng")
                .HasColumnType("money")
                .HasColumnName("money_used");
            entity.Property(e => e.NameCollaborate)
                .HasComment("Người chi cộng tác")
                .HasColumnType("character varying")
                .HasColumnName("name_collaborate");
            entity.Property(e => e.NameContact)
                .HasComment("tên người đầu mối")
                .HasColumnType("character varying")
                .HasColumnName("name_contact");
            entity.Property(e => e.PartnerCode)
                .HasComment("mã đối tác")
                .HasColumnType("character varying")
                .HasColumnName("partner_code");
            entity.Property(e => e.PartnerName)
                .HasComment("tên đối tác")
                .HasColumnType("character varying")
                .HasColumnName("partner_name");
            entity.Property(e => e.PhoneCollaborate)
                .HasComment("SĐT người chi cộng tác")
                .HasColumnType("character varying")
                .HasColumnName("phone_collaborate");
            entity.Property(e => e.PhoneContact)
                .HasComment("số điện thoại người đầu mối")
                .HasColumnType("character varying")
                .HasColumnName("phone_contact");
            entity.Property(e => e.Representative)
                .HasComment("người đại diện")
                .HasColumnType("character varying")
                .HasColumnName("representative");
            entity.Property(e => e.RepresentativePhone)
                .HasComment("số điện thoại người đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("representative_phone");
            entity.Property(e => e.RepresentativePosition)
                .HasComment("chức vụ người đại diện")
                .HasColumnType("character varying")
                .HasColumnName("representative_position");
            entity.Property(e => e.TaxCode)
                .HasComment("mã số thuế")
                .HasColumnType("character varying")
                .HasColumnName("tax_code");
            entity.Property(e => e.ToDate)
                .HasComment("đến ngày")
                .HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryHoliday>(entity =>
        {
            entity.HasKey(e => e.HolidayId).HasName("CategoryHoliday_pkey");

            entity.ToTable("CategoryHoliday", tb => tb.HasComment("Danh mục ngày nghỉ"));

            entity.Property(e => e.HolidayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("holiday_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.HolidayCode)
                .HasColumnType("character varying")
                .HasColumnName("holiday_code");
            entity.Property(e => e.HolidayDate).HasColumnName("holiday_date");
            entity.Property(e => e.HolidayName)
                .HasColumnType("character varying")
                .HasColumnName("holiday_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryHospital>(entity =>
        {
            entity.HasKey(e => e.HospitalId).HasName("CategoryHospital_pkey");

            entity.ToTable("CategoryHospital", tb => tb.HasComment("Danh mục bệnh viện"));

            entity.Property(e => e.HospitalId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("hospital_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CityId)
                .HasComment("thành phố")
                .HasColumnName("city_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.HospitalAddress)
                .HasComment("địa chỉ bệnh viện")
                .HasColumnName("hospital_address");
            entity.Property(e => e.HospitalClassAttributeId)
                .HasComment("hạng bệnh viện")
                .HasColumnName("hospital_class_attribute_id");
            entity.Property(e => e.HospitalCode)
                .HasComment("mã bệnh viện")
                .HasColumnType("character varying")
                .HasColumnName("hospital_code");
            entity.Property(e => e.HospitalLineAttributeId)
                .HasComment("tuyến bệnh viện")
                .HasColumnName("hospital_line_attribute_id");
            entity.Property(e => e.HospitalName)
                .HasComment("tên bệnh viện")
                .HasColumnType("character varying")
                .HasColumnName("hospital_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.Logo)
                .HasComment("logo")
                .HasColumnName("logo");
            entity.Property(e => e.LogoBranch)
                .HasComment("Ảnh bản quyền thương hiệu")
                .HasColumnName("logo_branch");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.City).WithMany(p => p.CategoryHospitals)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospital_city_id_fkey");

            entity.HasOne(d => d.HospitalClassAttribute).WithMany(p => p.CategoryHospitalHospitalClassAttributes)
                .HasForeignKey(d => d.HospitalClassAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospital_hospital_class_attribute_id_fkey");

            entity.HasOne(d => d.HospitalLineAttribute).WithMany(p => p.CategoryHospitalHospitalLineAttributes)
                .HasForeignKey(d => d.HospitalLineAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospital_hospital_line_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryHospitalDischargeInfomation>(entity =>
        {
            entity.HasKey(e => e.HospitalDischargeInfomationId).HasName("CategoryHospitalDischargeInfomation_pkey");

            entity.ToTable("CategoryHospitalDischargeInfomation", tb => tb.HasComment("Thông tin ra viện"));

            entity.Property(e => e.HospitalDischargeInfomationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("hospital_discharge_infomation_id");
            entity.Property(e => e.AccountId)
                .HasComment("tên trường khoa")
                .HasColumnName("account_id");
            entity.Property(e => e.AppointmentTime)
                .HasComment("thời gian hẹn khám")
                .HasColumnName("appointment_time");
            entity.Property(e => e.ClinicalProgress)
                .HasComment("quá trình bệnh lý và diễn biến lâm sàng")
                .HasColumnName("clinical_progress");
            entity.Property(e => e.DiagnoseMainDetails)
                .HasComment("chẩn đoán ra viện chi tiết")
                .HasColumnName("diagnose_main_details");
            entity.Property(e => e.DiagnoseMainId)
                .HasComment("chẩn đoán ra viện chính")
                .HasColumnName("diagnose_main_id");
            entity.Property(e => e.DiagnoseMainNote).HasColumnName("diagnose_main_note");
            entity.Property(e => e.DischargeTime)
                .HasComment("thời gian ra viện")
                .HasColumnName("discharge_time");
            entity.Property(e => e.DoctorRemind)
                .HasComment("lời dặn bác sĩ")
                .HasColumnName("doctor_remind");
            entity.Property(e => e.DocumentDate)
                .HasComment("Ngày chứng từ")
                .HasColumnName("document_date");
            entity.Property(e => e.FatherName)
                .HasComment("họ tên cha")
                .HasColumnType("character varying")
                .HasColumnName("father_name");
            entity.Property(e => e.FromDate)
                .HasComment("nghỉ ngoại trú từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.HospitalDischargeStatus)
                .HasComment("tình trạng ra viện")
                .HasColumnName("hospital_discharge_status");
            entity.Property(e => e.HospitalId)
                .HasComment("bv chuyển đến")
                .HasColumnName("hospital_id");
            entity.Property(e => e.InsuranceCard)
                .HasComment("mã thẻ")
                .HasColumnType("character varying")
                .HasColumnName("insurance_card");
            entity.Property(e => e.InsuranceCode)
                .HasComment("mã số bhxh")
                .HasColumnType("character varying")
                .HasColumnName("insurance_code");
            entity.Property(e => e.IsChildCard)
                .HasComment("trẻ em không thẻ :1 không phải 2 không phải trẻ em")
                .HasColumnName("is_child_card");
            entity.Property(e => e.MotherName)
                .HasComment("họ tên mẹ")
                .HasColumnType("character varying")
                .HasColumnName("mother_name");
            entity.Property(e => e.PatientId)
                .HasComment("thông tin bệnh nhân")
                .HasColumnName("patient_id");
            entity.Property(e => e.PatientStatus)
                .HasComment("tình trạng người bệnh")
                .HasColumnName("patient_status");
            entity.Property(e => e.Phone)
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.PregnancyAge)
                .HasComment("tuổi thai")
                .HasColumnName("pregnancy_age");
            entity.Property(e => e.RoomId)
                .HasComment("phòng khám")
                .HasColumnName("room_id");
            entity.Property(e => e.SummaryCls)
                .HasComment("tóm tắt kết quả cls")
                .HasColumnName("summary_cls");
            entity.Property(e => e.TerminationOfPregnancy)
                .HasComment("đình chỉ thai nghén")
                .HasColumnName("termination_of_pregnancy");
            entity.Property(e => e.TerminationOfPregnancyReason)
                .HasComment("nguyên nhân đình chỉ thai")
                .HasColumnName("termination_of_pregnancy_reason");
            entity.Property(e => e.TerminationOfPregnancyTime)
                .HasComment("thời gian đình chỉ thai")
                .HasColumnName("termination_of_pregnancy_time");
            entity.Property(e => e.ToDate)
                .HasComment("nghỉ ngoại trú đến ngày")
                .HasColumnName("to_date");
            entity.Property(e => e.TreatmentDirection)
                .HasComment("hướng điều trị và các chế độ tiếp theo")
                .HasColumnName("treatment_direction");
            entity.Property(e => e.TreatmentResult)
                .HasComment("kết quả điều trị")
                .HasColumnName("treatment_result");
            entity.Property(e => e.Treatments)
                .HasComment("phương pháp điều trị")
                .HasColumnName("treatments");
            entity.Property(e => e.UnitHeads)
                .HasComment("thủ trưởng đơn vị")
                .HasColumnName("unit_heads");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryHospitalDischargeInfomations)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospitalDischargeInfomation_account_id_fkey");

            entity.HasOne(d => d.DiagnoseMain).WithMany(p => p.CategoryHospitalDischargeInfomations)
                .HasForeignKey(d => d.DiagnoseMainId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospitalDischargeInfomation_diagnose_main_id_fkey");

            entity.HasOne(d => d.Hospital).WithMany(p => p.CategoryHospitalDischargeInfomations)
                .HasForeignKey(d => d.HospitalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospitalDischargeInfomation_hospital_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryHospitalDischargeInfomations)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospitalDischargeInfomation_patient_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryHospitalDischargeInfomations)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryHospitalDischargeInfomation_room_id_fkey");
        });

        modelBuilder.Entity<CategoryIndexGroup>(entity =>
        {
            entity.HasKey(e => e.IndexGroupId).HasName("CategoryIndexGroup_pkey");

            entity.ToTable("CategoryIndexGroup", tb => tb.HasComment("Danh mục nhóm chỉ số"));

            entity.Property(e => e.IndexGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("index_group_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IndexGroupCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("index_group_code");
            entity.Property(e => e.IndexGroupDesc)
                .HasComment("Mô tả")
                .HasColumnName("index_group_desc");
            entity.Property(e => e.IndexGroupName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("index_group_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryInjectionAppointment>(entity =>
        {
            entity.HasKey(e => e.InjectionAppointmentId).HasName("CategoryInjectionAppointment_pkey");

            entity.ToTable("CategoryInjectionAppointment", tb => tb.HasComment("Hẹn tiêm"));

            entity.Property(e => e.InjectionAppointmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("injection_appointment_id");
            entity.Property(e => e.Amount)
                .HasComment("liều lượng")
                .HasColumnName("amount");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.InjectionsDate)
                .HasComment("ngày hẹn")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("injections_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.QtyInjections)
                .HasComment("mũi tiêm")
                .HasColumnName("qty_injections");
            entity.Property(e => e.Status)
                .HasComment("0: tạo mới, 1: đã nhắc lịch, 2: đã tiếp đón, 3: huỷ lịch")
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.VaccineId).HasColumnName("vaccine_id");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryInjectionAppointments)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInjectionAppointment_patient_id_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.CategoryInjectionAppointments)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInjectionAppointment_patient_reception_id_fkey");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.CategoryInjectionAppointments)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInjectionAppointment_vaccine_id_fkey");
        });

        modelBuilder.Entity<CategoryInjury>(entity =>
        {
            entity.HasKey(e => e.InjuryId).HasName("CategoryInjury_pkey");

            entity.ToTable("CategoryInjury", tb => tb.HasComment("Danh mục tai nạn thương tích"));

            entity.Property(e => e.InjuryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("Injury_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptTypeId).HasColumnName("concept_type_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InjuryCode)
                .HasColumnType("character varying")
                .HasColumnName("Injury_code");
            entity.Property(e => e.InjuryName)
                .HasColumnType("character varying")
                .HasColumnName("Injury_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ConceptType).WithMany(p => p.CategoryInjuries)
                .HasForeignKey(d => d.ConceptTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInjury_concept_type_id_fkey");
        });

        modelBuilder.Entity<CategoryInputOrOutputType>(entity =>
        {
            entity.HasKey(e => e.InputOrOutputTypeId).HasName("CategoryInputOrOutputType_pkey");

            entity.ToTable("CategoryInputOrOutputType", tb => tb.HasComment("Danh mục hình thức nhập/Loại xuất"));

            entity.HasIndex(e => e.InputOrOutputTypeCode, "CategoryInputOrOutputType_input_or_output_type_code_key").IsUnique();

            entity.Property(e => e.InputOrOutputTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("input_or_output_type_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InputOrOutputTypeCode)
                .HasComment("Mã hình thức nhập/loại xuất")
                .HasColumnType("character varying")
                .HasColumnName("input_or_output_type_code");
            entity.Property(e => e.InputOrOutputTypeName)
                .HasComment("Tên hình thức nhập/loại xuất")
                .HasColumnType("character varying")
                .HasColumnName("input_or_output_type_name");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.MethodAttributeId)
                .HasComment("Hình thức")
                .HasColumnName("method_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.MethodAttribute).WithMany(p => p.CategoryInputOrOutputTypes)
                .HasForeignKey(d => d.MethodAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInputOrOutputType_method_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryInsuranceCard>(entity =>
        {
            entity.HasKey(e => e.InsuranceCardId).HasName("CategoryInsuranceCard_pkey");

            entity.ToTable("CategoryInsuranceCard", tb => tb.HasComment("Danh sách thẻ bảo hiểm"));

            entity.Property(e => e.InsuranceCardId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("insurance_card_id");
            entity.Property(e => e.BenefitLevel)
                .HasComment("mức hưởng")
                .HasColumnName("benefit_level");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InsuranceCardCode)
                .HasComment("mã thẻ bảo hiểm")
                .HasColumnType("character varying")
                .HasColumnName("insurance_card_code");
            entity.Property(e => e.InsuranceCardName)
                .HasComment("tên thẻ bảo hiểm")
                .HasColumnType("character varying")
                .HasColumnName("insurance_card_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Job).WithMany(p => p.CategoryInsuranceCards)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInsuranceCard_job_id_fkey");
        });

        modelBuilder.Entity<CategoryInteractionConsequence>(entity =>
        {
            entity.HasKey(e => e.InteractionConsequencesId).HasName("CategoryInteractionConsequences_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục hậu quả tương tác"));

            entity.Property(e => e.InteractionConsequencesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("interaction_consequences_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InteractionConsequencesCode)
                .HasComment("mã hậu quả")
                .HasColumnType("character varying")
                .HasColumnName("interaction_consequences_code");
            entity.Property(e => e.InteractionConsequencesName)
                .HasComment("tên hậu quả")
                .HasColumnType("character varying")
                .HasColumnName("interaction_consequences_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryInventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("CategoryInventory_pkey");

            entity.ToTable("CategoryInventory", tb => tb.HasComment("Danh sách tồn kho"));

            entity.Property(e => e.InventoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("inventory_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ProductId)
                .HasComment("hàng hóa")
                .HasColumnName("product_id");
            entity.Property(e => e.QtyInventoryActual)
                .HasComment("sl tồn thực tế( thứ cấp)")
                .HasColumnName("qty_inventory_actual");
            entity.Property(e => e.QtyInventoryActualPrimary)
                .HasComment("số lượng tồn thực tế sơ cấp")
                .HasColumnName("qty_inventory_actual_primary");
            entity.Property(e => e.QtyInventoryAvaiable)
                .HasComment("số  lượng tồn khả dụng(thứ cấp)")
                .HasColumnName("qty_inventory_avaiable");
            entity.Property(e => e.QtyInventoryAvaiablePrimary)
                .HasComment("số lượng tồn khả dụng sơ cấp")
                .HasColumnName("qty_inventory_avaiable_primary");
            entity.Property(e => e.QtyOrder)
                .HasComment("sl giữ chỗ thứ cấp")
                .HasColumnName("qty_order");
            entity.Property(e => e.QtyOrderPrimary)
                .HasComment("sl giữ chỗ sơ cấp")
                .HasColumnName("qty_order_primary");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseId)
                .HasComment("kho")
                .HasColumnName("warehouse_id");

            entity.HasOne(d => d.Product).WithMany(p => p.CategoryInventories)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInventory_product_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.CategoryInventories)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInventory_warehouse_id_fkey");
        });

        modelBuilder.Entity<CategoryInventoryHistory>(entity =>
        {
            entity.HasKey(e => e.InventoryHistoryId).HasName("CategoryInventoryHistory_pkey");

            entity.ToTable("CategoryInventoryHistory", tb => tb.HasComment("Lịch sử tồn kho"));

            entity.Property(e => e.InventoryHistoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("inventory_history_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InventoryId).HasColumnName("Inventory_id");
            entity.Property(e => e.QtyNew).HasColumnName("qty_new");
            entity.Property(e => e.QtyOld).HasColumnName("qty_old");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Inventory).WithMany(p => p.CategoryInventoryHistories)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryInventoryHistory_Inventory_id_fkey");
        });

        modelBuilder.Entity<CategoryJob>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("CategoryJob_pkey");

            entity.ToTable("CategoryJob", tb => tb.HasComment("Danh mục nghề nghiệp"));

            entity.Property(e => e.JobId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("job_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.JobCode)
                .HasComment("mã nghề nghiệp")
                .HasColumnType("character varying")
                .HasColumnName("job_code");
            entity.Property(e => e.JobName)
                .HasComment("tên nghề nghiệp")
                .HasColumnType("character varying")
                .HasColumnName("job_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryKiosk>(entity =>
        {
            entity.HasKey(e => e.KioskId).HasName("CategoryKiosk_pkey");

            entity.ToTable("CategoryKiosk", tb => tb.HasComment("Danh mục kiosk"));

            entity.Property(e => e.KioskId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("kiosk_id");
            entity.Property(e => e.AfternoonFrom)
                .HasColumnType("time with time zone")
                .HasColumnName("afternoon_from");
            entity.Property(e => e.AfternoonTo).HasColumnName("afternoon_to");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CounterId).HasColumnName("counter_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DiviceName)
                .HasColumnType("character varying")
                .HasColumnName("divice_name");
            entity.Property(e => e.EmployeeNurseId).HasColumnName("employee_nurse_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.MacAddress)
                .HasColumnType("character varying")
                .HasColumnName("mac_address");
            entity.Property(e => e.MorningFrom).HasColumnName("morning_from");
            entity.Property(e => e.MorningTo).HasColumnName("morning_to");
            entity.Property(e => e.QmsTemplateId).HasColumnName("qms_template_id");
            entity.Property(e => e.QmsTypeId).HasColumnName("qms_type_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VideoUrl).HasColumnName("video_url");

            entity.HasOne(d => d.Counter).WithMany(p => p.CategoryKiosks)
                .HasForeignKey(d => d.CounterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryKiosk_counter_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryKiosks)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryKiosk_department_id_fkey");

            entity.HasOne(d => d.QmsTemplate).WithMany(p => p.CategoryKiosks)
                .HasForeignKey(d => d.QmsTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryKiosk_qms_template_id_fkey");

            entity.HasOne(d => d.QmsType).WithMany(p => p.CategoryKiosks)
                .HasForeignKey(d => d.QmsTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryKiosk_qms_type_id_fkey");
        });

        modelBuilder.Entity<CategoryKioskClinicDoctor>(entity =>
        {
            entity.HasKey(e => e.KioskClinicDoctorId).HasName("CategoryKioskClinicDoctor_pkey");

            entity.ToTable("CategoryKioskClinicDoctor", tb => tb.HasComment("Danh mục phòng khám và bác sĩ "));

            entity.Property(e => e.KioskClinicDoctorId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("kiosk_clinic_doctor_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Employee).WithMany(p => p.CategoryKioskClinicDoctors)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryKioskClinicDoctor_employee_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryKioskClinicDoctors)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryKioskClinicDoctor_room_id_fkey");
        });

        modelBuilder.Entity<CategoryKitSupply>(entity =>
        {
            entity.HasKey(e => e.KitSuppliesId).HasName("CategoryKitSupplies_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục vật tư bộ"));

            entity.Property(e => e.KitSuppliesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("kit_supplies_id");
            entity.Property(e => e.BidName)
                .HasComment("tên thầu")
                .HasColumnType("character varying")
                .HasColumnName("bid_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.KitSuppliesCode)
                .HasComment("mã chi tiết")
                .HasColumnType("character varying")
                .HasColumnName("kit_supplies_code");
            entity.Property(e => e.KitSuppliesName)
                .HasComment("tên chi tiết")
                .HasColumnType("character varying")
                .HasColumnName("kit_supplies_name");
            entity.Property(e => e.MappingCode)
                .HasComment("mã ánh xạ")
                .HasColumnType("character varying")
                .HasColumnName("mapping_code");
            entity.Property(e => e.PaymentRatio)
                .HasComment("tỷ lệ thanh toán")
                .HasColumnName("payment_ratio");
            entity.Property(e => e.PriceVat)
                .HasColumnType("money")
                .HasColumnName("price_vat");
            entity.Property(e => e.Quantity)
                .HasComment("số lượng")
                .HasColumnName("quantity");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vị tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryKitSupplies)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryKitSupplies_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryLaboratoryResultTemplate>(entity =>
        {
            entity.HasKey(e => e.LaboratoryResultTemplateId).HasName("CategoryLaboratoryResultTemplate_pkey");

            entity.ToTable("CategoryLaboratoryResultTemplate", tb => tb.HasComment("Mẫu kết quả xét nghiệm"));

            entity.Property(e => e.LaboratoryResultTemplateId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_result_template_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.Conclude)
                .HasComment("kết luận")
                .HasColumnName("conclude");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.LaboratoryResultTemplateCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("laboratory_result_template_code");
            entity.Property(e => e.LaboratoryResultTemplateName)
                .HasComment("Tên")
                .HasColumnType("character varying")
                .HasColumnName("laboratory_result_template_name");
            entity.Property(e => e.Position)
                .HasComment("vị thể")
                .HasColumnName("position");
            entity.Property(e => e.Result)
                .HasComment("kết quả")
                .HasColumnName("result");
            entity.Property(e => e.Roughly)
                .HasComment("Đại thể")
                .HasColumnName("roughly");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryLaboratoryService>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceId).HasName("CategoryLaboratoryService_pkey");

            entity.ToTable("CategoryLaboratoryService", tb => tb.HasComment("Danh mục xét nghiệm"));

            entity.Property(e => e.LaboratoryServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi ohi nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản gia vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài koan do dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClsImplementUnitMedicalId)
                .HasComment("CSKCB thực hiện CLS")
                .HasColumnName("cls_implement_unit_medical_id");
            entity.Property(e => e.CodePrint)
                .HasColumnType("character varying")
                .HasColumnName("code_print");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DecisionCode)
                .HasComment("mã quyết định")
                .HasColumnType("character varying")
                .HasColumnName("decision_code");
            entity.Property(e => e.DecisionDate)
                .HasComment("ngày quyết định")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("decision_date");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DisplayOrder)
                .HasComment("Thứ tự hiển thị")
                .HasColumnName("display_order");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.ExpiredWarningNumberDay)
                .HasComment("Số ngày cảnh báo HSD")
                .HasColumnName("expired_warning_number_day");
            entity.Property(e => e.FormId).HasColumnName("form_id");
            entity.Property(e => e.Gender)
                .HasComment("Giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.HealthInsurancePriceCode)
                .HasComment("mã giá liên thông bảo hiểm y tế")
                .HasColumnType("character varying")
                .HasColumnName("health_insurance_price_code");
            entity.Property(e => e.HightFemaleIndex)
                .HasComment("chỉ số nữ cao")
                .HasColumnType("character varying")
                .HasColumnName("hight_female_index");
            entity.Property(e => e.HightMaleIndex)
                .HasComment("chỉ số  nam cao")
                .HasColumnType("character varying")
                .HasColumnName("hight_male_index");
            entity.Property(e => e.InsuranceWarningNumberDay)
                .HasComment("Số ngày cảnh báo kê dịch vụ BHYT")
                .HasColumnName("insurance_warning_number_day");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsCreateIndex).HasColumnName("is_create_index");
            entity.Property(e => e.IsEcrcl).HasColumnName("is_ecrcl");
            entity.Property(e => e.IsEditService)
                .HasComment("Cho sửa đổi DV")
                .HasColumnName("is_edit_service");
            entity.Property(e => e.IsEgfr).HasColumnName("is_egfr");
            entity.Property(e => e.IsExternalPay)
                .HasComment("Thu ngoài")
                .HasColumnName("is_external_pay");
            entity.Property(e => e.IsInsurance).HasColumnName("is_insurance");
            entity.Property(e => e.IsKiosk)
                .HasComment("Hiển thị lên KIOSK")
                .HasColumnName("is_kiosk");
            entity.Property(e => e.IsLaterPay)
                .HasComment("Thanh toán sau")
                .HasColumnName("is_later_pay");
            entity.Property(e => e.IsListQtySplit)
                .HasComment("Tách số lượng khi kê")
                .HasColumnName("is_list_qty_split");
            entity.Property(e => e.IsNoCharge)
                .HasComment("Không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsNotImplemnetQtyMutil)
                .HasComment("Không được thực hiện SL nhiều cùng lúc")
                .HasColumnName("is_not_implemnet_qty_mutil");
            entity.Property(e => e.IsRequestConsultation).HasColumnName("is_request_consultation");
            entity.Property(e => e.IsRequestService)
                .HasComment("DV theo yêu cầu")
                .HasColumnName("is_request_service");
            entity.Property(e => e.IsRequestSpecimens).HasColumnName("is_request_specimens");
            entity.Property(e => e.IsRetrictDepartment)
                .HasComment("Hạn chế khoa chỉ định")
                .HasColumnName("is_retrict_department");
            entity.Property(e => e.IsSlowResult).HasColumnName("is_slow_result");
            entity.Property(e => e.IsSplitDuplicateService).HasColumnName("is_split_duplicate_service");
            entity.Property(e => e.IsTt35).HasColumnName("is_tt35");
            entity.Property(e => e.IsUpTtba).HasColumnName("is_up_ttba");
            entity.Property(e => e.IsUseCovid)
                .HasComment("Dùng cho Covid")
                .HasColumnName("is_use_covid");
            entity.Property(e => e.LaboratoryServiceCode)
                .HasComment("mã dịch vụ xét nghiệm")
                .HasColumnType("character varying")
                .HasColumnName("laboratory_service_code");
            entity.Property(e => e.LaboratoryServiceName)
                .HasComment("tên dịch vụ xét nghiệm")
                .HasColumnType("character varying")
                .HasColumnName("laboratory_service_name");
            entity.Property(e => e.LisCode)
                .HasComment("mã lis")
                .HasColumnType("character varying")
                .HasColumnName("lis_code");
            entity.Property(e => e.LowFemaleIndex)
                .HasComment("chỉ số nữ thấp")
                .HasColumnType("character varying")
                .HasColumnName("low_female_index");
            entity.Property(e => e.LowMaleIndex)
                .HasComment("chỉ số nam thấp")
                .HasColumnType("character varying")
                .HasColumnName("low_male_index");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberTt37)
                .HasComment("sst thông tư 37")
                .HasColumnName("number_tt37");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasComment("Tỷ lệ BH thanh toán")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio)
                .HasDefaultValueSql("'100'::double precision")
                .HasComment("Tỷ lệ thanh toán DV")
                .HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceInsurance)
                .HasComment("giá bảo hiểm")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasComment("giá không bảo hiểm")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.ReportId)
                .HasComment("báo cáo")
                .HasColumnName("report_id");
            entity.Property(e => e.ResultReference)
                .HasColumnType("character varying")
                .HasColumnName("result_reference");
            entity.Property(e => e.ResultType).HasColumnName("result_type");
            entity.Property(e => e.SpecialistId)
                .HasComment("chuyên khoa")
                .HasColumnName("specialist_id");
            entity.Property(e => e.Surcharge)
                .HasComment("phụ thu")
                .HasColumnName("surcharge");
            entity.Property(e => e.SurgicalClassificationId)
                .HasComment("Phân loại PTTT")
                .HasColumnName("surgical_classification_id");
            entity.Property(e => e.TechServiceTranferUnitMedicalId).HasColumnName("tech_service_tranfer_unit_medical_id");
            entity.Property(e => e.UnitConnectId)
                .HasComment("đợn vị kết nối")
                .HasColumnName("unit_connect_id");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vj tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UnitName)
                .HasComment("Đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("unit_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ClsImplementUnitMedical).WithMany(p => p.CategoryLaboratoryServiceClsImplementUnitMedicals)
                .HasForeignKey(d => d.ClsImplementUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_cls_implement_unit_medical_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryLaboratoryServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_concept_id_fkey");

            entity.HasOne(d => d.Form).WithMany(p => p.CategoryLaboratoryServiceForms)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_form_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryLaboratoryServices)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryLaboratoryServices)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategoryLaboratoryServices)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_group_service_lvl3_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.CategoryLaboratoryServices)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_report_id_fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.CategoryLaboratoryServices)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_specialist_id_fkey");

            entity.HasOne(d => d.SurgicalClassification).WithMany(p => p.CategoryLaboratoryServiceSurgicalClassifications)
                .HasForeignKey(d => d.SurgicalClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_surgical_classification_id_fkey");

            entity.HasOne(d => d.TechServiceTranferUnitMedical).WithMany(p => p.CategoryLaboratoryServiceTechServiceTranferUnitMedicals)
                .HasForeignKey(d => d.TechServiceTranferUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_tech_service_tranfer_unit_medical_");

            entity.HasOne(d => d.UnitConnect).WithMany(p => p.CategoryLaboratoryServiceUnitConnects)
                .HasForeignKey(d => d.UnitConnectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_unit_connect_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryLaboratoryServices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLaboratoryService_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryLevelOfInteraction>(entity =>
        {
            entity.HasKey(e => e.LevelOfInteractionId).HasName("CategoryLevelOfInteraction_pkey");

            entity.ToTable("CategoryLevelOfInteraction", tb => tb.HasComment("Danh mục mức độ tương tác"));

            entity.Property(e => e.LevelOfInteractionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("level_of_interaction_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.LevelOfInteractionCode)
                .HasColumnType("character varying")
                .HasColumnName("level_of_interaction_code");
            entity.Property(e => e.LevelOfInteractionColor)
                .HasColumnType("character varying")
                .HasColumnName("level_of_interaction_color");
            entity.Property(e => e.LevelOfInteractionName)
                .HasColumnType("character varying")
                .HasColumnName("level_of_interaction_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryLongTermTreatment>(entity =>
        {
            entity.HasKey(e => e.LongTermTreatmentId).HasName("CategoryLongTermTreatment_pkey");

            entity.ToTable("CategoryLongTermTreatment", tb => tb.HasComment("Danh sách điều trị dài hạn"));

            entity.Property(e => e.LongTermTreatmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("long_term_treatment_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Data)
                .HasComment("thông tin kết thúc bệnh án")
                .HasColumnType("jsonb")
                .HasColumnName("data");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.FinishTime)
                .HasComment("thời gian kết thúc")
                .HasColumnName("finish_time");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.SetupMedicalRecordId).HasColumnName("setup_medical_record_id");
            entity.Property(e => e.TreatmentResult)
                .HasComment("kết thúc điều trị")
                .HasColumnName("treatment_result");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.CategoryLongTermTreatments)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLongTermTreatment_basic_information_patient_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryLongTermTreatments)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLongTermTreatment_patient_id_fkey");

            entity.HasOne(d => d.SetupMedicalRecord).WithMany(p => p.CategoryLongTermTreatments)
                .HasForeignKey(d => d.SetupMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryLongTermTreatment_setup_medical_record_id_fkey");
        });

        modelBuilder.Entity<CategoryMachine>(entity =>
        {
            entity.HasKey(e => e.MachineId).HasName("CategoryMachine_pkey");

            entity.ToTable("CategoryMachine", tb => tb.HasComment("Danh mục mã máy"));

            entity.Property(e => e.MachineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("machine_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.InsuranceSendCode)
                .HasComment("Mã máy gửi BHYT")
                .HasColumnType("character varying")
                .HasColumnName("insurance_send_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.MachineCode)
                .HasComment("mã máy")
                .HasColumnType("character varying")
                .HasColumnName("machine_code");
            entity.Property(e => e.MachineName)
                .HasComment("tên máy")
                .HasColumnType("character varying")
                .HasColumnName("machine_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryMainDiseaseGroup>(entity =>
        {
            entity.HasKey(e => e.MainDiseaseGroupId).HasName("CategoryMainDiseaseGroup_pkey");

            entity.ToTable("CategoryMainDiseaseGroup", tb => tb.HasComment("Danh mục nhóm bệnh chính"));

            entity.Property(e => e.MainDiseaseGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("main_disease_group_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseChapterId)
                .HasComment("chương bệnh")
                .HasColumnName("disease_chapter_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsTypeIcd)
                .HasDefaultValueSql("0")
                .HasColumnName("is_type_icd");
            entity.Property(e => e.MainDiseaseGroupCode)
                .HasComment("mã nhóm chính")
                .HasColumnType("character varying")
                .HasColumnName("main_disease_group_code");
            entity.Property(e => e.MainDiseaseGroupName)
                .HasComment("tên nhóm chính")
                .HasColumnType("character varying")
                .HasColumnName("main_disease_group_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DiseaseChapter).WithMany(p => p.CategoryMainDiseaseGroups)
                .HasForeignKey(d => d.DiseaseChapterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMainDiseaseGroup_disease_chapter_id_fkey");
        });

        modelBuilder.Entity<CategoryMedicalExaminationService>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceId).HasName("CategoryMedicalExaminationService_pkey");

            entity.ToTable("CategoryMedicalExaminationService", tb => tb.HasComment("Danh mục khám bệnh"));

            entity.Property(e => e.MedicalExaminationServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClsImplementUnitMedicalId)
                .HasComment("CSKCB thực hiện CLS")
                .HasColumnName("cls_implement_unit_medical_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DisplayOrder)
                .HasComment("Thứ tự hiển thị")
                .HasColumnName("display_order");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.ExpiredWarningNumberDay)
                .HasComment("Số ngày cảnh báo HSD")
                .HasColumnName("expired_warning_number_day");
            entity.Property(e => e.Gender)
                .HasComment("Giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.InsuranceWarningNumberDay)
                .HasComment("Số ngày cảnh báo kê dịch vụ BHYT")
                .HasColumnName("insurance_warning_number_day");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsBookOnline)
                .HasComment("Đặt khám online")
                .HasColumnName("is_book_online");
            entity.Property(e => e.IsECrCl).HasColumnName("is_eCrCl");
            entity.Property(e => e.IsEGfr).HasColumnName("is_eGFR");
            entity.Property(e => e.IsEditService)
                .HasComment("Cho sửa đổi DV")
                .HasColumnName("is_edit_service");
            entity.Property(e => e.IsExternalPay)
                .HasComment("Thu ngoài")
                .HasColumnName("is_external_pay");
            entity.Property(e => e.IsKiosk)
                .HasComment("Hiển thị lên KIOSK")
                .HasColumnName("is_kiosk");
            entity.Property(e => e.IsLaterPay)
                .HasComment("Thanh toán sau")
                .HasColumnName("is_later_pay");
            entity.Property(e => e.IsListQtySplit)
                .HasComment("Tách số lượng khi kê")
                .HasColumnName("is_list_qty_split");
            entity.Property(e => e.IsNoCharge)
                .HasComment("Không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsNotImplemnetQtyMutil)
                .HasComment("Không được thực hiện SL nhiều cùng lúc")
                .HasColumnName("is_not_implemnet_qty_mutil");
            entity.Property(e => e.IsRequestService)
                .HasComment("DV theo yêu cầu")
                .HasColumnName("is_request_service");
            entity.Property(e => e.IsRetrictDepartment)
                .HasComment("Hạn chế khoa chỉ định")
                .HasColumnName("is_retrict_department");
            entity.Property(e => e.IsUseCovid)
                .HasComment("Dùng cho Covid")
                .HasColumnName("is_use_covid");
            entity.Property(e => e.IsVaccination)
                .HasComment("tiêm chủng")
                .HasColumnName("is_vaccination");
            entity.Property(e => e.MedicalExaminationServiceCode)
                .HasComment("mã dịch vụ khám bệnh")
                .HasColumnType("character varying")
                .HasColumnName("medical_examination_service_code");
            entity.Property(e => e.MedicalExaminationServiceName)
                .HasComment("tên dịch vụ khám bệnh")
                .HasColumnType("character varying")
                .HasColumnName("medical_examination_service_name");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasComment("Tỷ lệ BH thanh toán")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio)
                .HasComment("Tỷ lệ thanh toán DV")
                .HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceInsurance)
                .HasComment("giá bảo hiểm")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasComment("giá không bảo hiểm")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.SpecialistId)
                .HasComment("chuyên khoa")
                .HasColumnName("specialist_id");
            entity.Property(e => e.Surcharge)
                .HasComment("phụ thu")
                .HasColumnName("surcharge");
            entity.Property(e => e.TechServiceTranferUnitMedicalId)
                .HasComment("CSKCB chuyển giao DVKT")
                .HasColumnName("tech_service_tranfer_unit_medical_id");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vj tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UnitName)
                .HasComment("Đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("unit_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ClsImplementUnitMedical).WithMany(p => p.CategoryMedicalExaminationServiceClsImplementUnitMedicals)
                .HasForeignKey(d => d.ClsImplementUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationService_cls_implement_unit_medical");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryMedicalExaminationServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationService_concept_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryMedicalExaminationServices)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationService_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryMedicalExaminationServices)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationService_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategoryMedicalExaminationServices)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationService_group_service_lvl3_fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.CategoryMedicalExaminationServices)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationServic_specialist_health_care_id_fkey");

            entity.HasOne(d => d.TechServiceTranferUnitMedical).WithMany(p => p.CategoryMedicalExaminationServiceTechServiceTranferUnitMedicals)
                .HasForeignKey(d => d.TechServiceTranferUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationService_tech_service_tranfer_unit_");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryMedicalExaminationServices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryMedicalExaminationService_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryMedicalUnit>(entity =>
        {
            entity.HasKey(e => e.MedicalUnitId).HasName("CategoryMedicalUnit_pkey");

            entity.ToTable("CategoryMedicalUnit", tb => tb.HasComment("Danh mục đơn vị y tế"));

            entity.Property(e => e.MedicalUnitId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_unit_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.MedicalUnitCode)
                .HasComment("mã đơn vị y tế")
                .HasColumnType("character varying")
                .HasColumnName("medical_unit_code");
            entity.Property(e => e.MedicalUnitName)
                .HasComment("tên đơn vị y tế")
                .HasColumnType("character varying")
                .HasColumnName("medical_unit_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryNational>(entity =>
        {
            entity.HasKey(e => e.NationalId).HasName("CategoryNational_pkey");

            entity.ToTable("CategoryNational", tb => tb.HasComment("Danh mục quốc gia"));

            entity.Property(e => e.NationalId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("national_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.NationalCode)
                .HasComment("mã quốc gia")
                .HasColumnType("character varying")
                .HasColumnName("national_code");
            entity.Property(e => e.NationalName)
                .HasComment("tên quốc gia")
                .HasColumnType("character varying")
                .HasColumnName("national_name");
            entity.Property(e => e.NationalNameEn).HasColumnName("national_name_en");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryObjectType>(entity =>
        {
            entity.HasKey(e => e.ObjectTypeId).HasName("CategoryObjectType_pkey");

            entity.ToTable("CategoryObjectType", tb => tb.HasComment("Danh mục loại đối tượng"));

            entity.Property(e => e.ObjectTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("object_type_id");
            entity.Property(e => e.AdvanceThreshold)
                .HasColumnType("money")
                .HasColumnName("advance_threshold");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ExemptionTypeAttributeId).HasColumnName("exemption_type_attribute_id");
            entity.Property(e => e.ExemptionTypePercent).HasColumnName("exemption_type_percent");
            entity.Property(e => e.ExemptionTypePrice)
                .HasColumnType("money")
                .HasColumnName("exemption_type_price");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsLaterPayment).HasColumnName("is_later_payment");
            entity.Property(e => e.IsMilitary).HasColumnName("is_military");
            entity.Property(e => e.IsPhysicalExamination).HasColumnName("is_physical_examination");
            entity.Property(e => e.IsPriority).HasColumnName("is_priority");
            entity.Property(e => e.IsRequestOpdAdvance).HasColumnName("is_request_opd_advance");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ObjectAttributeId).HasColumnName("object_attribute_id");
            entity.Property(e => e.ObjectTypeCode)
                .HasColumnType("character varying")
                .HasColumnName("object_type_code");
            entity.Property(e => e.ObjectTypeName)
                .HasColumnType("character varying")
                .HasColumnName("object_type_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.ExemptionTypeAttribute).WithMany(p => p.CategoryObjectTypeExemptionTypeAttributes)
                .HasForeignKey(d => d.ExemptionTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryObjectType_exemption_type_attribute_id_fkey");

            entity.HasOne(d => d.ObjectAttribute).WithMany(p => p.CategoryObjectTypeObjectAttributes)
                .HasForeignKey(d => d.ObjectAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryObjectType_object_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryOrigin>(entity =>
        {
            entity.HasKey(e => e.OriginId).HasName("CategoryOrigin_pkey");

            entity.ToTable("CategoryOrigin", tb => tb.HasComment("Danh mục xuất xứ"));

            entity.Property(e => e.OriginId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("origin_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.OriginCode)
                .HasComment("mã xuất xứ")
                .HasColumnType("character varying")
                .HasColumnName("origin_code");
            entity.Property(e => e.OriginName)
                .HasComment("tên xuất xứ")
                .HasColumnType("character varying")
                .HasColumnName("origin_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryOutpatientDoctor>(entity =>
        {
            entity.HasKey(e => e.OutpatientDoctorId).HasName("CategoryOutpatientDoctor_pkey");

            entity.ToTable("CategoryOutpatientDoctor", tb => tb.HasComment("Danh mục bác sĩ ngoại viện"));

            entity.Property(e => e.OutpatientDoctorId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("outpatient_doctor_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.HospitalId)
                .HasComment("đơn vị công tác")
                .HasColumnName("hospital_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.OutpatientDoctorCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("outpatient_doctor_code");
            entity.Property(e => e.OutpatientDoctorName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("outpatient_doctor_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Hospital).WithMany(p => p.CategoryOutpatientDoctors)
                .HasForeignKey(d => d.HospitalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutpatientDoctor_hospital_id_fkey");
        });

        modelBuilder.Entity<CategoryOutsiteOfTreatmentService>(entity =>
        {
            entity.HasKey(e => e.OutsiteOfTreatmentServiceId).HasName("CategoryOutsiteOfTreatmentService_pkey");

            entity.ToTable("CategoryOutsiteOfTreatmentService", tb => tb.HasComment("Danh mục ngoài điều trị"));

            entity.Property(e => e.OutsiteOfTreatmentServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("outsite_of_treatment_service_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClsImplementUnitMedicalId)
                .HasComment("CSKCB thực hiện CLS")
                .HasColumnName("cls_implement_unit_medical_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.ExpiredWarningNumberDay)
                .HasComment("Số ngày cảnh báo HSD")
                .HasColumnName("expired_warning_number_day");
            entity.Property(e => e.GasTypeId).HasColumnName("gas_type_id");
            entity.Property(e => e.Gender)
                .HasComment("Giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.InsuranceWarningNumberDay)
                .HasComment("Số ngày cảnh báo kê dịch vụ BHYT")
                .HasColumnName("insurance_warning_number_day");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsECrCl).HasColumnName("is_eCrCl");
            entity.Property(e => e.IsEGfr).HasColumnName("is_eGFR");
            entity.Property(e => e.IsExternalPayment).HasColumnName("is_external_payment");
            entity.Property(e => e.IsKiosk)
                .HasComment("Hiển thị lên KIOSK")
                .HasColumnName("is_kiosk");
            entity.Property(e => e.IsNoCharge)
                .HasComment("Không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsRequestService)
                .HasComment("DV theo yêu cầu")
                .HasColumnName("is_request_service");
            entity.Property(e => e.IsRetrictDepartment)
                .HasComment("Hạn chế khoa chỉ định")
                .HasColumnName("is_retrict_department");
            entity.Property(e => e.OutsiteOfTreatmentServiceCode)
                .HasComment("mã dịch vụ ngoài điều trị")
                .HasColumnType("character varying")
                .HasColumnName("outsite_of_treatment_service_code");
            entity.Property(e => e.OutsiteOfTreatmentServiceName)
                .HasComment("Tên ngoài điều trị")
                .HasColumnType("character varying")
                .HasColumnName("outsite_of_treatment_service_name");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasComment("Tỷ lệ BH thanh toán")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio)
                .HasComment("Tỷ lệ thanh toán DV")
                .HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceInsurance)
                .HasComment("giá bảo hiểm")
                .HasColumnType("money")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasComment("giá không bảo hiểm")
                .HasColumnType("money")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.Surcharge)
                .HasComment("phụ thu")
                .HasColumnType("money")
                .HasColumnName("surcharge");
            entity.Property(e => e.TechServiceTranferUnitMedicalId)
                .HasComment("CSKCB chuyển giao DVKT")
                .HasColumnName("tech_service_tranfer_unit_medical_id");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vj tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ClsImplementUnitMedical).WithMany(p => p.CategoryOutsiteOfTreatmentServiceClsImplementUnitMedicals)
                .HasForeignKey(d => d.ClsImplementUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutsiteOfTreatmentService_cls_implement_unit_medical");

            entity.HasOne(d => d.GasType).WithMany(p => p.CategoryOutsiteOfTreatmentServices)
                .HasForeignKey(d => d.GasTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutsiteOfTreatmentService_gas_type_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryOutsiteOfTreatmentServices)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutsiteOfTreatmentService_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryOutsiteOfTreatmentServices)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutsiteOfTreatmentService_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategoryOutsiteOfTreatmentServices)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutsiteOfTreatmentService_group_service_lvl3_fkey");

            entity.HasOne(d => d.TechServiceTranferUnitMedical).WithMany(p => p.CategoryOutsiteOfTreatmentServiceTechServiceTranferUnitMedicals)
                .HasForeignKey(d => d.TechServiceTranferUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutsiteOfTreatmentService_tech_service_tranfer_unit_");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryOutsiteOfTreatmentServices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryOutsiteOfTreatmentService_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryPackageService>(entity =>
        {
            entity.HasKey(e => e.PackageServiceId).HasName("CategoryPackageService_pkey");

            entity.ToTable("CategoryPackageService", tb => tb.HasComment("Thông tin gói dịch vụ"));

            entity.Property(e => e.PackageServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("package_service_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsRetrictDepartment).HasColumnName("is_retrict_department");
            entity.Property(e => e.PackageCode)
                .HasColumnType("character varying")
                .HasColumnName("package_code");
            entity.Property(e => e.PackageName)
                .HasColumnType("character varying")
                .HasColumnName("package_name");
            entity.Property(e => e.PackageTotal)
                .HasColumnType("money")
                .HasColumnName("package_total");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryPartner>(entity =>
        {
            entity.HasKey(e => e.PartnerId).HasName("CategoryPartner_pkey");

            entity.ToTable("CategoryPartner", tb => tb.HasComment("Danh mục đối tác"));

            entity.Property(e => e.PartnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("partner_id");
            entity.Property(e => e.AccountBankName)
                .HasColumnType("character varying")
                .HasColumnName("account_bank_name");
            entity.Property(e => e.AccountNumber)
                .HasComment("số tài khoản")
                .HasColumnType("character varying")
                .HasColumnName("account_number");
            entity.Property(e => e.Address)
                .HasComment("địa chỉ")
                .HasColumnName("address");
            entity.Property(e => e.BankName)
                .HasComment("tên ngân hàng")
                .HasColumnType("character varying")
                .HasColumnName("bank_name");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmailContact)
                .HasComment("email người đầu mối")
                .HasColumnType("character varying")
                .HasColumnName("email_contact");
            entity.Property(e => e.FromDate)
                .HasComment("từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.FundLimit)
                .HasComment("hạn mức quỹ")
                .HasColumnType("money")
                .HasColumnName("fund_limit");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsNotSendUnit)
                .HasComment("không gửi tên đơn vi")
                .HasColumnName("is_not_send_unit");
            entity.Property(e => e.MoneyUsed)
                .HasComment("tiền đã sử dụng")
                .HasColumnType("money")
                .HasColumnName("money_used");
            entity.Property(e => e.NameCollaborate)
                .HasComment("Người chi cộng tác")
                .HasColumnType("character varying")
                .HasColumnName("name_collaborate");
            entity.Property(e => e.NameContact)
                .HasComment("tên người đầu mối")
                .HasColumnType("character varying")
                .HasColumnName("name_contact");
            entity.Property(e => e.PartnerCode)
                .HasComment("mã đối tác")
                .HasColumnType("character varying")
                .HasColumnName("partner_code");
            entity.Property(e => e.PartnerName)
                .HasComment("tên đối tác")
                .HasColumnType("character varying")
                .HasColumnName("partner_name");
            entity.Property(e => e.PhoneCollaborate)
                .HasComment("SĐT người chi cộng tác")
                .HasColumnType("character varying")
                .HasColumnName("phone_collaborate");
            entity.Property(e => e.PhoneContact)
                .HasComment("số điện thoại người đầu mối")
                .HasColumnType("character varying")
                .HasColumnName("phone_contact");
            entity.Property(e => e.Representative)
                .HasComment("người đại diện")
                .HasColumnType("character varying")
                .HasColumnName("representative");
            entity.Property(e => e.RepresentativePhone)
                .HasComment("số điện thoại người đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("representative_phone");
            entity.Property(e => e.RepresentativePosition)
                .HasComment("chức vụ người đại diện")
                .HasColumnType("character varying")
                .HasColumnName("representative_position");
            entity.Property(e => e.TaxCode)
                .HasComment("mã số thuế")
                .HasColumnType("character varying")
                .HasColumnName("tax_code");
            entity.Property(e => e.ToDate)
                .HasComment("đến ngày")
                .HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryPatient>(entity =>
        {
            entity.HasKey(e => e.PatientId).HasName("CategoryPatient_pkey");

            entity.ToTable("CategoryPatient", tb => tb.HasComment("Thông tin bệnh nhân"));

            entity.Property(e => e.PatientId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_id");
            entity.Property(e => e.Address)
                .HasComment("địa chỉ")
                .HasColumnType("character varying")
                .HasColumnName("address");
            entity.Property(e => e.AddressAbroad)
                .HasComment("địa chỉ tại nước ngoài")
                .HasColumnType("character varying")
                .HasColumnName("address_abroad");
            entity.Property(e => e.AddressTempId)
                .HasComment("Địa chỉ (tạm trú)")
                .HasColumnType("character varying")
                .HasColumnName("address_temp_id");
            entity.Property(e => e.Age)
                .HasComment("Tuổi")
                .HasColumnType("character varying")
                .HasColumnName("age");
            entity.Property(e => e.Avatar).HasColumnName("avatar");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CityId)
                .HasComment("thành phố")
                .HasColumnName("city_id");
            entity.Property(e => e.CityTempId)
                .HasComment("thành phố(tạm trú)")
                .HasColumnName("city_temp_id");
            entity.Property(e => e.CounterId)
                .HasComment("quầy")
                .HasColumnName("counter_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DateRange)
                .HasComment("ngày cấp")
                .HasColumnName("date_range");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DistrictId)
                .HasComment("quận huyện")
                .HasColumnName("district_id");
            entity.Property(e => e.DistrictTempId)
                .HasComment("Quận huyện (tạm trú)")
                .HasColumnName("district_temp_id");
            entity.Property(e => e.Dob)
                .HasComment("ngày sinh")
                .HasColumnName("dob");
            entity.Property(e => e.Email)
                .HasComment("email")
                .HasColumnType("character varying")
                .HasColumnName("email");
            entity.Property(e => e.EthnicId)
                .HasComment("dân tộc")
                .HasColumnName("ethnic_id");
            entity.Property(e => e.FullName)
                .HasComment("họ tên")
                .HasColumnType("character varying")
                .HasColumnName("full_name");
            entity.Property(e => e.Gender)
                .HasComment("giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.IdentifierCode)
                .HasComment("mã định danh")
                .HasColumnType("character varying")
                .HasColumnName("identifier_code");
            entity.Property(e => e.IdentitesFront)
                .HasComment("ảnh cccd mặt trước")
                .HasColumnName("identites_front");
            entity.Property(e => e.IdentitiesBack)
                .HasComment("ảnh cccd mặt sau")
                .HasColumnName("identities_back");
            entity.Property(e => e.IdentitiesCode)
                .HasComment("mã giấy tờ tùy thân")
                .HasColumnType("character varying")
                .HasColumnName("identities_code");
            entity.Property(e => e.IdentitiesType)
                .HasComment("loại giấy tờ tùy thân")
                .HasColumnName("identities_type");
            entity.Property(e => e.InsuranceCode)
                .HasMaxLength(1)
                .HasComment("mã bhxh")
                .HasColumnName("insurance_code");
            entity.Property(e => e.IsActive)
                .HasComment("hiệu lực")
                .HasColumnName("is_active");
            entity.Property(e => e.IsConfirm)
                .HasComment("Xác nhận thông tin")
                .HasColumnName("is_confirm");
            entity.Property(e => e.IsCovid)
                .HasComment("nb covid")
                .HasColumnName("is_covid");
            entity.Property(e => e.IsEmergency)
                .HasComment("cấp cứu")
                .HasColumnName("is_emergency");
            entity.Property(e => e.IsIpdOrOpd)
                .HasComment("loại đối tượng")
                .HasColumnName("is_ipd_or_opd");
            entity.Property(e => e.IsPriority)
                .HasComment("ưu tiên")
                .HasColumnName("is_priority");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.IssuedBy)
                .HasComment("nơi cấp")
                .HasColumnType("character varying")
                .HasColumnName("issued_by");
            entity.Property(e => e.JobId)
                .HasComment("nghề nghiệp")
                .HasColumnName("job_id");
            entity.Property(e => e.NationalId)
                .HasComment("quốc gia")
                .HasColumnName("national_id");
            entity.Property(e => e.ObjectAttributeId)
                .HasComment("đối tượng")
                .HasColumnName("object_attribute_id");
            entity.Property(e => e.ObjectTypeId)
                .HasComment("loại đối tượng")
                .HasColumnName("object_type_id");
            entity.Property(e => e.Password).HasColumnName("password");
            entity.Property(e => e.PatientCode)
                .HasComment("mã người bệnh")
                .HasColumnType("character varying")
                .HasColumnName("patient_code");
            entity.Property(e => e.Phone)
                .HasComment("số điện thoại")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.SubjectOfExemptionId)
                .HasComment("đối tượng miễn giảm")
                .HasColumnName("subject_of_exemption_id");
            entity.Property(e => e.Tob)
                .HasComment("giờ sinh")
                .HasColumnType("time with time zone")
                .HasColumnName("tob");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WardId)
                .HasComment("phường xã")
                .HasColumnName("ward_id");
            entity.Property(e => e.WardTempId)
                .HasComment("Xã phường (tạm trú)")
                .HasColumnName("ward_temp_id");

            entity.HasOne(d => d.City).WithMany(p => p.CategoryPatientCities)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_city_id_fkey");

            entity.HasOne(d => d.CityTemp).WithMany(p => p.CategoryPatientCityTemps)
                .HasForeignKey(d => d.CityTempId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_city_temp_id_fkey");

            entity.HasOne(d => d.Counter).WithMany(p => p.CategoryPatients)
                .HasForeignKey(d => d.CounterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_counter_id_fkey");

            entity.HasOne(d => d.District).WithMany(p => p.CategoryPatientDistricts)
                .HasForeignKey(d => d.DistrictId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_district_id_fkey");

            entity.HasOne(d => d.DistrictTemp).WithMany(p => p.CategoryPatientDistrictTemps)
                .HasForeignKey(d => d.DistrictTempId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_district_temp_id_fkey");

            entity.HasOne(d => d.Ethnic).WithMany(p => p.CategoryPatients)
                .HasForeignKey(d => d.EthnicId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_ethnic_id_fkey");

            entity.HasOne(d => d.IsIpdOrOpdNavigation).WithMany(p => p.CategoryPatientIsIpdOrOpdNavigations)
                .HasForeignKey(d => d.IsIpdOrOpd)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_is_ipd_or_opd_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.CategoryPatients)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_job_id_fkey");

            entity.HasOne(d => d.National).WithMany(p => p.CategoryPatients)
                .HasForeignKey(d => d.NationalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_national_id_fkey");

            entity.HasOne(d => d.ObjectAttribute).WithMany(p => p.CategoryPatientObjectAttributes)
                .HasForeignKey(d => d.ObjectAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_object_attribute_id_fkey");

            entity.HasOne(d => d.ObjectType).WithMany(p => p.CategoryPatients)
                .HasForeignKey(d => d.ObjectTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_object_type_id_fkey");

            entity.HasOne(d => d.SubjectOfExemption).WithMany(p => p.CategoryPatients)
                .HasForeignKey(d => d.SubjectOfExemptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_subject_of_exemption_id_fkey");

            entity.HasOne(d => d.Ward).WithMany(p => p.CategoryPatientWards)
                .HasForeignKey(d => d.WardId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_ward_id_fkey");

            entity.HasOne(d => d.WardTemp).WithMany(p => p.CategoryPatientWardTemps)
                .HasForeignKey(d => d.WardTempId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatient_ward_temp_id_fkey");
        });

        modelBuilder.Entity<CategoryPatientDesignateService>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateServiceId).HasName("CategoryPatientDesignateService_pkey");

            entity.ToTable("CategoryPatientDesignateService", tb => tb.HasComment("Chỉ định dich vụ"));

            entity.Property(e => e.PatientDesignateServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.AccountExamine)
                .HasComment("người thực hiện")
                .HasColumnName("account_examine");
            entity.Property(e => e.AccountId)
                .HasComment("Người chỉ định")
                .HasColumnName("account_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.DesignateServiceDate)
                .HasComment("thời gian chỉ định")
                .HasColumnName("designate_service_date");
            entity.Property(e => e.DesignationKitId)
                .HasComment("id gói chỉ định")
                .HasColumnName("designation_kit_id");
            entity.Property(e => e.ExamineNumber)
                .HasComment("số khám tên phòng + stt trong ngày")
                .HasColumnName("examine_number");
            entity.Property(e => e.ImplementDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("implement_date");
            entity.Property(e => e.IsCheckin).HasColumnName("is_checkin");
            entity.Property(e => e.IsIpd)
                .HasDefaultValueSql("0")
                .HasComment("0: ngoại trú, 1: nội trú")
                .HasColumnName("is_ipd");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.IsPay).HasColumnName("is_pay");
            entity.Property(e => e.IsReceiptCode)
                .HasDefaultValueSql("0")
                .HasComment("0 = chưa tạo phiếu lĩnh, 1 = đã tao phiếu lĩnh")
                .HasColumnName("is_receipt_code");
            entity.Property(e => e.IsSpecialist)
                .HasDefaultValueSql("0")
                .HasComment("0: khám ban đầu 1 là khám chuyên khoa")
                .HasColumnName("is_specialist");
            entity.Property(e => e.IsStatus)
                .HasDefaultValueSql("0")
                .HasColumnName("is_status");
            entity.Property(e => e.IsTt35).HasColumnName("is_tt35");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientDesginateServiceCode)
                .HasDefaultValueSql("nextval('\"CategoryPatientDesignateServi_patient_desginate_service_cod_seq\"'::regclass)")
                .HasColumnName("patient_desginate_service_code");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.PaymentInsuranceRatio).HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentMethodId)
                .HasComment("Loai hình thanh toán")
                .HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentServiceRatio).HasColumnName("payment_service_ratio");
            entity.Property(e => e.Price)
                .HasComment("đơn giá bệnh viện")
                .HasColumnName("price");
            entity.Property(e => e.PriceInsurance)
                .HasComment("đơn giá bảo hiểm")
                .HasColumnName("price_insurance");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.ReasonReturn)
                .HasComment("lý do hoàn")
                .HasColumnName("reason_return");
            entity.Property(e => e.RoomDesignateId)
                .HasComment("phòng chỉ định")
                .HasColumnName("room_designate_id");
            entity.Property(e => e.RoomId)
                .HasComment("phòng thực hiện dịch vu")
                .HasColumnName("room_id");
            entity.Property(e => e.TimeNumber)
                .HasComment("số lần")
                .HasColumnName("time_number");
            entity.Property(e => e.TimeResult)
                .HasComment("thời gian có kết quả")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("time_result");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.AccountExamineNavigation).WithMany(p => p.CategoryPatientDesignateServiceAccountExamineNavigations)
                .HasForeignKey(d => d.AccountExamine)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_account_examine_fkey");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryPatientDesignateServiceAccounts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_account_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryPatientDesignateServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_concept_id_fkey");

            entity.HasOne(d => d.DesignationKit).WithMany(p => p.CategoryPatientDesignateServices)
                .HasForeignKey(d => d.DesignationKitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_designation_kit_id_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.CategoryPatientDesignateServices)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_patient_reception_id_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.CategoryPatientDesignateServices)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_payment_method_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.CategoryPatientDesignateServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_product_id_fkey");

            entity.HasOne(d => d.RoomDesignate).WithMany(p => p.CategoryPatientDesignateServiceRoomDesignates)
                .HasForeignKey(d => d.RoomDesignateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_room_designate_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryPatientDesignateServiceRooms)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateService_room_id_fkey");
        });

        modelBuilder.Entity<CategoryPatientPrescription>(entity =>
        {
            entity.HasKey(e => e.PatientPrescriptionId).HasName("CategoryPatientPrescription_pkey");

            entity.ToTable("CategoryPatientPrescription", tb => tb.HasComment("Thông tin khách hàng - đơn thuốc"));

            entity.Property(e => e.PatientPrescriptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_prescription_id");
            entity.Property(e => e.AccountId)
                .HasComment("bác sĩ chỉ định")
                .HasColumnName("account_id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.Age)
                .HasComment("tuổi")
                .HasColumnType("character varying")
                .HasColumnName("age");
            entity.Property(e => e.CityId)
                .HasComment("thành phố")
                .HasColumnName("city_id");
            entity.Property(e => e.CounterId)
                .HasComment("quầy")
                .HasColumnName("counter_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DistrictId)
                .HasComment("quận huyện")
                .HasColumnName("district_id");
            entity.Property(e => e.Dob)
                .HasComment("ngày sinh")
                .HasColumnName("dob");
            entity.Property(e => e.FullName)
                .HasComment("Họ và tên")
                .HasColumnType("character varying")
                .HasColumnName("full_name");
            entity.Property(e => e.Gender)
                .HasComment("giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.Guardian)
                .HasComment("người bảo lãnh")
                .HasColumnType("character varying")
                .HasColumnName("guardian");
            entity.Property(e => e.GuardianPhone)
                .HasComment("số dt người bảo lãnh")
                .HasColumnType("character varying")
                .HasColumnName("guardian_phone");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.OutpatientDoctorId)
                .HasComment("bác sĩ ngoại viện")
                .HasColumnName("outpatient_doctor_id");
            entity.Property(e => e.PatientPrescriptionCode)
                .HasColumnType("character varying")
                .HasColumnName("patient_prescription_code");
            entity.Property(e => e.PatientReceiptCodeId).HasColumnName("patient_receipt_code_id");
            entity.Property(e => e.Phone)
                .HasComment("sdt")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WardId)
                .HasComment("phường xã")
                .HasColumnName("ward_id");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryPatientPrescriptions)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientPrescription_account_id_fkey");

            entity.HasOne(d => d.City).WithMany(p => p.CategoryPatientPrescriptions)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientPrescription_city_id_fkey");

            entity.HasOne(d => d.Counter).WithMany(p => p.CategoryPatientPrescriptions)
                .HasForeignKey(d => d.CounterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientPrescription_counter_id_fkey");

            entity.HasOne(d => d.District).WithMany(p => p.CategoryPatientPrescriptions)
                .HasForeignKey(d => d.DistrictId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientPrescription_district_id_fkey");

            entity.HasOne(d => d.OutpatientDoctor).WithMany(p => p.CategoryPatientPrescriptions)
                .HasForeignKey(d => d.OutpatientDoctorId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientPrescription_outpatient_doctor_id_fkey");

            entity.HasOne(d => d.PatientReceiptCode).WithMany(p => p.CategoryPatientPrescriptions)
                .HasForeignKey(d => d.PatientReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientPrescription_patient_receipt_code_id_fkey");

            entity.HasOne(d => d.Ward).WithMany(p => p.CategoryPatientPrescriptions)
                .HasForeignKey(d => d.WardId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientPrescription_ward_id_fkey");
        });

        modelBuilder.Entity<CategoryPatientReceiptCode>(entity =>
        {
            entity.HasKey(e => e.PatientReceiptCodeId).HasName("Patient_ReceiptCode_pkey");

            entity.ToTable("CategoryPatientReceiptCode", tb => tb.HasComment("Danh sách phiếu thu"));

            entity.HasIndex(e => e.ReceiptCode, "CategoryPatientReceiptCode_receipt_code_key").IsUnique();

            entity.Property(e => e.PatientReceiptCodeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_receipt_code_id");
            entity.Property(e => e.AccountId)
                .HasComment("thu ngân")
                .HasColumnName("account_id");
            entity.Property(e => e.AccountRequest).HasColumnName("account_request");
            entity.Property(e => e.BillStatus)
                .HasComment("trạng thái hóa đơn")
                .HasColumnName("bill_status");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsInsurance)
                .HasDefaultValueSql("1")
                .HasComment("1: đối tượng bảo hiểm hiển thị ở phần thu ngân 0, đối tượng không bảo hiểm hiển thị ở phần đơn thuốc")
                .HasColumnName("is_insurance");
            entity.Property(e => e.PaymentDate)
                .HasComment("ngày thanh toán")
                .HasColumnName("payment_date");
            entity.Property(e => e.ReceiptCode)
                .HasComment("mã phiếu thu format ngày hiện tại + stt phiếu thu yyyyMMdd000Index")
                .HasColumnType("character varying")
                .HasColumnName("receipt_code");
            entity.Property(e => e.ReceiptCodeReturn)
                .HasComment("lưu mã phiếu thu khi hoàn default là null")
                .HasColumnName("receipt_code_return");
            entity.Property(e => e.ReceiptStatus)
                .HasComment("trạng thái: 0: Chưa thanh toán, 1: Thanh toán, 2: Chờ hoàn, 3: Đã hoàn")
                .HasColumnName("receipt_status");
            entity.Property(e => e.ReceiptSymbol)
                .HasComment("ký hiệu")
                .HasColumnType("character varying")
                .HasColumnName("receipt_symbol");
            entity.Property(e => e.Total)
                .HasComment("tổng tiền")
                .HasColumnName("total");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryPatientReceiptCodeAccounts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_ReceiptCode_account_id_fkey");

            entity.HasOne(d => d.AccountRequestNavigation).WithMany(p => p.CategoryPatientReceiptCodeAccountRequestNavigations)
                .HasForeignKey(d => d.AccountRequest)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientReceiptCode_account_request_fkey");
        });

        modelBuilder.Entity<CategoryPatientReception>(entity =>
        {
            entity.HasKey(e => e.PatientReceptionId).HasName("CategoryPatientReception_pkey");

            entity.ToTable("CategoryPatientReception", tb => tb.HasComment("Người bệnh tiếp đón"));

            entity.Property(e => e.PatientReceptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_reception_id");
            entity.Property(e => e.CounterId).HasColumnName("counter_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.IsCovid).HasColumnName("is_covid");
            entity.Property(e => e.IsEmergency).HasColumnName("is_emergency");
            entity.Property(e => e.IsPriority).HasColumnName("is_priority");
            entity.Property(e => e.IsStatus)
                .HasComment("0 là huỷ tiếp đón, 1 là tiếp đón")
                .HasColumnName("is_status");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");
            entity.Property(e => e.Reason)
                .HasComment("lý do")
                .HasColumnName("reason");
            entity.Property(e => e.ReasonId)
                .HasComment("lý do tiếp đón")
                .HasColumnName("reason_id");
            entity.Property(e => e.ReceptionCode)
                .HasComment("mã tiếp đón, mã hồ sơ")
                .HasColumnType("character varying")
                .HasColumnName("reception_code");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Counter).WithMany(p => p.CategoryPatientReceptions)
                .HasForeignKey(d => d.CounterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientReception_counter_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryPatientReceptions)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientReception_patient_id_fkey");

            entity.HasOne(d => d.Program).WithMany(p => p.CategoryPatientReceptions)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientReception_program_id_fkey");

            entity.HasOne(d => d.ReasonNavigation).WithMany(p => p.CategoryPatientReceptions)
                .HasForeignKey(d => d.ReasonId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientReception_reason_id_fkey");
        });

        modelBuilder.Entity<CategoryPatientSource>(entity =>
        {
            entity.HasKey(e => e.PatientSourceId).HasName("CategoryPatientSource_pkey");

            entity.ToTable("CategoryPatientSource", tb => tb.HasComment("Danh mục nguồn người bệnh"));

            entity.Property(e => e.PatientSourceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_source_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GroupPatientSourceId)
                .HasComment("id nhóm nguồn người bệnh")
                .HasColumnName("group_patient_source_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsLaterPay).HasColumnName("is_later_pay");
            entity.Property(e => e.IsPresenter)
                .HasComment("người giới thiệu")
                .HasColumnName("is_presenter");
            entity.Property(e => e.PatientSourceCode)
                .HasComment("Mã nguồn người bệnh")
                .HasColumnType("character varying")
                .HasColumnName("patient_source_code");
            entity.Property(e => e.PatientSourceName)
                .HasComment("Tên nguồn người bệnh")
                .HasColumnType("character varying")
                .HasColumnName("patient_source_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.GroupPatientSource).WithMany(p => p.CategoryPatientSources)
                .HasForeignKey(d => d.GroupPatientSourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientSource_group_patient_source_id_fkey");
        });

        modelBuilder.Entity<CategoryPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId).HasName("CategoryPaymentMethod_pkey");

            entity.ToTable("CategoryPaymentMethod", tb => tb.HasComment("Danh mục phương thức thanh toán"));

            entity.Property(e => e.PaymentMethodId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("payment_method_id");
            entity.Property(e => e.BillCodeAttributeId)
                .HasComment("mã hóa đơn")
                .HasColumnName("bill_code_attribute_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsCash)
                .HasComment("tiền mặt")
                .HasColumnName("is_cash");
            entity.Property(e => e.IsDiffSupplies)
                .HasComment("ncc khác bv")
                .HasColumnName("is_diff_supplies");
            entity.Property(e => e.PamentMethodTypeAttributeId)
                .HasComment("loại pttt")
                .HasColumnName("pament_method_type_attribute_id");
            entity.Property(e => e.PartnerId)
                .HasComment("đối tác")
                .HasColumnName("partner_id");
            entity.Property(e => e.PartnerTypeAttributeId)
                .HasComment("loại đối tác")
                .HasColumnName("partner_type_attribute_id");
            entity.Property(e => e.PaymentMethodCode)
                .HasComment("mã phương thức thanh toán")
                .HasColumnType("character varying")
                .HasColumnName("payment_method_code");
            entity.Property(e => e.PaymentMethodName)
                .HasComment("tên pttt")
                .HasColumnType("character varying")
                .HasColumnName("payment_method_name");
            entity.Property(e => e.Priority)
                .HasComment("mức độ ưu tiên")
                .HasColumnName("priority");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.BillCodeAttribute).WithMany(p => p.CategoryPaymentMethodBillCodeAttributes)
                .HasForeignKey(d => d.BillCodeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPaymentMethod_bill_code_attribute_id_fkey");

            entity.HasOne(d => d.PamentMethodTypeAttribute).WithMany(p => p.CategoryPaymentMethodPamentMethodTypeAttributes)
                .HasForeignKey(d => d.PamentMethodTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPaymentMethod_pament_method_type_attribute_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.CategoryPaymentMethods)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPaymentMethod_partner_id_fkey");

            entity.HasOne(d => d.PartnerTypeAttribute).WithMany(p => p.CategoryPaymentMethodPartnerTypeAttributes)
                .HasForeignKey(d => d.PartnerTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPaymentMethod_partner_type_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryPaymentType>(entity =>
        {
            entity.HasKey(e => e.PaymentTypeId).HasName("CategoryPaymentType_pkey");

            entity.ToTable("CategoryPaymentType", tb => tb.HasComment("Danh mục loại thanh toán"));

            entity.Property(e => e.PaymentTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("payment_type_id");
            entity.Property(e => e.BookReceipt)
                .HasComment("quyển số thu")
                .HasColumnName("book_receipt");
            entity.Property(e => e.ChangeBy).HasColumnName("change_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PaymentTypeCode)
                .HasComment("mã loại thanh toán")
                .HasColumnType("character varying")
                .HasColumnName("payment_type_code");
            entity.Property(e => e.PaymentTypeName)
                .HasComment("tên loại thanh toán")
                .HasColumnType("character varying")
                .HasColumnName("payment_type_name");
            entity.Property(e => e.UpdateAt).HasColumnName("update_at");

            entity.HasOne(d => d.BookReceiptNavigation).WithMany(p => p.CategoryPaymentTypes)
                .HasForeignKey(d => d.BookReceipt)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPaymentType_book_receipt_fkey");
        });

        modelBuilder.Entity<CategoryPermission>(entity =>
        {
            entity.HasKey(e => e.PermissionId).HasName("CategoryPermission_pkey");

            entity.ToTable("CategoryPermission", tb => tb.HasComment("Danh mục quyền"));

            entity.Property(e => e.PermissionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("permission_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsOrder).HasColumnName("is_order");
            entity.Property(e => e.ParrentId).HasColumnName("parrent_id");
            entity.Property(e => e.PermissionCode)
                .HasColumnType("character varying")
                .HasColumnName("permission_code");
            entity.Property(e => e.PermissionDesc).HasColumnName("permission_desc");
            entity.Property(e => e.PermissionName)
                .HasColumnType("character varying")
                .HasColumnName("permission_name");
            entity.Property(e => e.Slug)
                .HasComment("url")
                .HasColumnName("slug");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryPharmacologicalProperty>(entity =>
        {
            entity.HasKey(e => e.PharmacologicalPropertiesId).HasName("CategoryPharmacologicalProperties_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục đặc tính dược lý"));

            entity.Property(e => e.PharmacologicalPropertiesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("pharmacological_properties_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PharmacologicalPropertiesCode)
                .HasColumnType("character varying")
                .HasColumnName("pharmacological_properties_code");
            entity.Property(e => e.PharmacologicalPropertiesName)
                .HasColumnType("character varying")
                .HasColumnName("pharmacological_properties_name");
            entity.Property(e => e.UpdateAt).HasColumnName("update_at");
        });

        modelBuilder.Entity<CategoryPlaceOfSamplingAttribute>(entity =>
        {
            entity.HasKey(e => e.PlaceOfSamplingAttributedId).HasName("CategoryPlaceOfSampling_Attribute_pkey");

            entity.ToTable("CategoryPlaceOfSampling_Attribute", tb => tb.HasComment("Nơi lấy mẫu bệnh phẩm - đối tượng KCB"));

            entity.Property(e => e.PlaceOfSamplingAttributedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("place_of_sampling_attributed_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.PlaceOfSamplingId).HasColumnName("place_of_sampling_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.CategoryPlaceOfSamplingAttributes)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPlaceOfSampling_Attribute_attribute_id_fkey");

            entity.HasOne(d => d.PlaceOfSampling).WithMany(p => p.CategoryPlaceOfSamplingAttributes)
                .HasForeignKey(d => d.PlaceOfSamplingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPlaceOfSampling_Attribute_place_of_sampling_id_fkey");
        });

        modelBuilder.Entity<CategoryPlaceOfSamplingSpecimen>(entity =>
        {
            entity.HasKey(e => e.PlaceOfSamplingSpecimemsId).HasName("CategoryPlaceOfSamplingSpecimens_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục nơi lấy mẫu bệnh phẩm"));

            entity.Property(e => e.PlaceOfSamplingSpecimemsId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("place_of_sampling_specimems_id");
            entity.Property(e => e.BuildingId)
                .HasComment("nhà chỉ định")
                .HasColumnName("building_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa chỉ định")
                .HasColumnName("department_id");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.QueueQty)
                .HasComment("sl hàng đợi")
                .HasColumnName("queue_qty");
            entity.Property(e => e.Roomid).HasColumnName("roomid");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Building).WithMany(p => p.CategoryPlaceOfSamplingSpecimen)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPlaceOfSamplingSpecimens_building_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryPlaceOfSamplingSpecimen)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPlaceOfSamplingSpecimens_department_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryPlaceOfSamplingSpecimen)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPlaceOfSamplingSpecimens_group_service_lvl1_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryPlaceOfSamplingSpecimen)
                .HasForeignKey(d => d.Roomid)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPlaceOfSamplingSpecimens_roomid_fkey");
        });

        modelBuilder.Entity<CategoryPosition>(entity =>
        {
            entity.HasKey(e => e.PositionId).HasName("CategoryPosition_pkey");

            entity.ToTable("CategoryPosition", tb => tb.HasComment("Danh mục chức vụ"));

            entity.Property(e => e.PositionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("position_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.PositionCode)
                .HasComment("mã chức vụ")
                .HasColumnType("character varying")
                .HasColumnName("position_code");
            entity.Property(e => e.PositionName)
                .HasComment("tên chức vụ")
                .HasColumnType("character varying")
                .HasColumnName("position_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryPositionPrint>(entity =>
        {
            entity.HasKey(e => e.PositionPrintId).HasName("CategoryPositionPrint_pkey");

            entity.ToTable("CategoryPositionPrint", tb => tb.HasComment("Danh mục vị trí máy in"));

            entity.Property(e => e.PositionPrintId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("position_print_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PositionPrintCode)
                .HasComment("mã vị trí")
                .HasColumnType("character varying")
                .HasColumnName("position_print_code");
            entity.Property(e => e.PositionPrintName)
                .HasComment("tên vị trí")
                .HasColumnType("character varying")
                .HasColumnName("position_print_name");
            entity.Property(e => e.ScreenPrintId)
                .HasComment("màn hình")
                .HasColumnName("screen_print_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.ScreenPrint).WithMany(p => p.CategoryPositionPrints)
                .HasForeignKey(d => d.ScreenPrintId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPositionPrint_screen_print_id_fkey");
        });

        modelBuilder.Entity<CategoryPrescriptionMedicine>(entity =>
        {
            entity.HasKey(e => e.PrescriptionMedicineId).HasName("CategoryPrescriptionMedicine_pkey");

            entity.ToTable("CategoryPrescriptionMedicine", tb => tb.HasComment("Danh mục thuốc kê ngoài"));

            entity.Property(e => e.PrescriptionMedicineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("prescription_medicine_id");
            entity.Property(e => e.AccountCostMaterials)
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.ActiveElementId)
                .HasComment("id hoạt chất")
                .HasColumnName("active_element_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.Content)
                .HasComment("hàm lượng")
                .HasColumnName("content");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DrugClassificationId)
                .HasComment("phân loại thuốc")
                .HasColumnName("drug_classification_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.NationalId)
                .HasComment("nước sản xuất")
                .HasColumnName("national_id");
            entity.Property(e => e.PrescriptionMedicineCode)
                .HasComment("mã thuốc")
                .HasColumnType("character varying")
                .HasColumnName("prescription_medicine_code");
            entity.Property(e => e.PrescriptionMedicineName)
                .HasComment("tên thuốc")
                .HasColumnType("character varying")
                .HasColumnName("prescription_medicine_name");
            entity.Property(e => e.Specifications)
                .HasComment("quy cách")
                .HasColumnType("character varying")
                .HasColumnName("specifications");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vị tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UnitUsed)
                .HasComment("đơn vị sử dụng")
                .HasColumnName("unit_used");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ActiveElement).WithMany(p => p.CategoryPrescriptionMedicines)
                .HasForeignKey(d => d.ActiveElementId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionMedicine_active_element_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryPrescriptionMedicines)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionMedicine_concept_id_fkey");

            entity.HasOne(d => d.DrugClassification).WithMany(p => p.CategoryPrescriptionMedicines)
                .HasForeignKey(d => d.DrugClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionMedicine_drug_classification_id_fkey");

            entity.HasOne(d => d.National).WithMany(p => p.CategoryPrescriptionMedicines)
                .HasForeignKey(d => d.NationalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionMedicine_national_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryPrescriptionMedicineUnits)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionMedicine_unit_id_fkey");

            entity.HasOne(d => d.UnitUsedNavigation).WithMany(p => p.CategoryPrescriptionMedicineUnitUsedNavigations)
                .HasForeignKey(d => d.UnitUsed)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionMedicine_unit_used_fkey");
        });

        modelBuilder.Entity<CategoryPrescriptionOrder>(entity =>
        {
            entity.HasKey(e => e.PrescriptionOrderId).HasName("CategoryPrescriptionOrder_pkey");

            entity.ToTable("CategoryPrescriptionOrder", tb => tb.HasComment("Đơn thuốc"));

            entity.Property(e => e.PrescriptionOrderId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("prescription_order_id");
            entity.Property(e => e.AccountId)
                .HasComment("người phát")
                .HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Discount)
                .HasComment("giảm giá")
                .HasColumnType("money")
                .HasColumnName("discount");
            entity.Property(e => e.IsRefund)
                .HasComment("trạng thái hoàn")
                .HasColumnName("is_refund");
            entity.Property(e => e.Note)
                .HasComment("note")
                .HasColumnName("note");
            entity.Property(e => e.OrderCode)
                .HasComment("mã phiếu ngày hiện tại + stt theo format yyyyMMdd0000Index")
                .HasColumnType("character varying")
                .HasColumnName("order_code");
            entity.Property(e => e.PatientPrescriptionId).HasColumnName("patient_prescription_id");
            entity.Property(e => e.StatusOrder)
                .HasComment("trạng thái đơn hàng")
                .HasColumnName("status_order");
            entity.Property(e => e.StatusPayment)
                .HasComment("trạng thái thanh toán")
                .HasColumnName("status_payment");
            entity.Property(e => e.SubTotal)
                .HasComment("thành tiền")
                .HasColumnType("money")
                .HasColumnName("sub_total");
            entity.Property(e => e.Total)
                .HasComment("tổng tiền")
                .HasColumnType("money")
                .HasColumnName("total");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseId)
                .HasComment("kho bán")
                .HasColumnName("warehouse_id");

            entity.HasOne(d => d.PatientPrescription).WithMany(p => p.CategoryPrescriptionOrders)
                .HasForeignKey(d => d.PatientPrescriptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionOrder_patient_prescription_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.CategoryPrescriptionOrders)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionOrder_warehouse_id_fkey");
        });

        modelBuilder.Entity<CategoryPrescriptionService>(entity =>
        {
            entity.HasKey(e => e.PerscriptionServiceId).HasName("CategoryPrescriptionService_pkey");

            entity.ToTable("CategoryPrescriptionService", tb => tb.HasComment("Danh sách thuốc - Dơn thuốc"));

            entity.Property(e => e.PerscriptionServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("perscription_service_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Discount)
                .HasColumnType("money")
                .HasColumnName("discount");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.PatientPrescriptionId)
                .HasComment("thông tin khách hàng")
                .HasColumnName("patient_prescription_id");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Drug).WithMany(p => p.CategoryPrescriptionServices)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionService_drug_id_fkey");

            entity.HasOne(d => d.PatientPrescription).WithMany(p => p.CategoryPrescriptionServices)
                .HasForeignKey(d => d.PatientPrescriptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrescriptionService_patient_prescription_id_fkey");
        });

        modelBuilder.Entity<CategoryPresenter>(entity =>
        {
            entity.HasKey(e => e.PresenterId).HasName("CategoryPresenter_pkey");

            entity.ToTable("CategoryPresenter", tb => tb.HasComment("Người giới thiệu"));

            entity.Property(e => e.PresenterId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("presenter_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PatientSourceId).HasColumnName("patient_source_id");
            entity.Property(e => e.PresenterCode)
                .HasComment("mã người giới thiệu")
                .HasColumnType("character varying")
                .HasColumnName("presenter_code");
            entity.Property(e => e.PresenterName)
                .HasDefaultValueSql("'tên người giới thiệu'::character varying")
                .HasColumnType("character varying")
                .HasColumnName("presenter_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.PatientSource).WithMany(p => p.CategoryPresenters)
                .HasForeignKey(d => d.PatientSourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPresenter_patient_source_id_fkey");
        });

        modelBuilder.Entity<CategoryPrint>(entity =>
        {
            entity.HasKey(e => e.PrintId).HasName("CategoryPrint_pkey");

            entity.ToTable("CategoryPrint", tb => tb.HasComment("Danh mục máy in"));

            entity.Property(e => e.PrintId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("print_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.PrintCode)
                .HasComment("mã máy tính")
                .HasColumnType("character varying")
                .HasColumnName("print_code");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryPrintName>(entity =>
        {
            entity.HasKey(e => e.PrintNameId).HasName("CategoryPrintName_pkey");

            entity.ToTable("CategoryPrintName", tb => tb.HasComment("tên máy in"));

            entity.Property(e => e.PrintNameId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("print_name_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PrintId).HasColumnName("print_id");
            entity.Property(e => e.PrintIp)
                .HasColumnType("character varying")
                .HasColumnName("print_ip");
            entity.Property(e => e.PrintName)
                .HasColumnType("character varying")
                .HasColumnName("print_name");

            entity.HasOne(d => d.Print).WithMany(p => p.CategoryPrintNames)
                .HasForeignKey(d => d.PrintId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrintName_print_id_fkey");
        });

        modelBuilder.Entity<CategoryPrintType>(entity =>
        {
            entity.HasKey(e => e.PrintTypeId).HasName("CategoryPrintType_pkey");

            entity.ToTable("CategoryPrintType", tb => tb.HasComment("Danh mục loại máy in"));

            entity.Property(e => e.PrintTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("print_type_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Horizontal).HasColumnName("horizontal");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PaperDirectionAttributeId).HasColumnName("paper_direction_attribute_id");
            entity.Property(e => e.PaperSizeAttributeId).HasColumnName("paper_size_attribute_id");
            entity.Property(e => e.PrintNameId).HasColumnName("print_name_id");
            entity.Property(e => e.PrintTypeIp).HasColumnName("print_type_ip");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.Vertical).HasColumnName("vertical");

            entity.HasOne(d => d.PaperDirectionAttribute).WithMany(p => p.CategoryPrintTypePaperDirectionAttributes)
                .HasForeignKey(d => d.PaperDirectionAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrintType_paper_direction_attribute_id_fkey");

            entity.HasOne(d => d.PaperSizeAttribute).WithMany(p => p.CategoryPrintTypePaperSizeAttributes)
                .HasForeignKey(d => d.PaperSizeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrintType_paper_size_attribute_id_fkey");

            entity.HasOne(d => d.PrintName).WithMany(p => p.CategoryPrintTypes)
                .HasForeignKey(d => d.PrintNameId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrintType_print_name_id_fkey");

            entity.HasOne(d => d.PrintTypeIpNavigation).WithMany(p => p.CategoryPrintTypePrintTypeIpNavigations)
                .HasForeignKey(d => d.PrintTypeIp)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPrintType_print_type_ip_fkey");
        });

        modelBuilder.Entity<CategoryProduct>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("CategoryProduct_pkey");

            entity.ToTable("CategoryProduct", tb => tb.HasComment("Danh mục hàng hóa"));

            entity.Property(e => e.ProductId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("product_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.BedId).HasColumnName("bed_id");
            entity.Property(e => e.BloodProductId).HasColumnName("blood_product_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.ChemistriesId).HasColumnName("chemistries_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DinnerId).HasColumnName("dinner_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.LaboratoryId).HasColumnName("laboratory_id");
            entity.Property(e => e.MedicalExaminationId).HasColumnName("medical_examination_id");
            entity.Property(e => e.PrescriptionMedicineId)
                .HasComment("thuốc kê  ngoài")
                .HasColumnName("prescription_medicine_id");
            entity.Property(e => e.RehabilitationId).HasColumnName("rehabilitation_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");
            entity.Property(e => e.SuppliesId).HasColumnName("supplies_id");
            entity.Property(e => e.SurgicalProceduresId).HasColumnName("surgical_procedures_id");
            entity.Property(e => e.VaccineId).HasColumnName("vaccine_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_attribute_id_fkey");

            entity.HasOne(d => d.Bed).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.BedId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_bed_id_fkey");

            entity.HasOne(d => d.BloodProduct).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.BloodProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_blood_product_id_fkey");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.Chemistries).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.ChemistriesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_chemistries_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_concept_id_fkey");

            entity.HasOne(d => d.Dinner).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.DinnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_dinner_id_fkey");

            entity.HasOne(d => d.Drug).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_drug_id_fkey");

            entity.HasOne(d => d.Laboratory).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.LaboratoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_laboratory_id_fkey");

            entity.HasOne(d => d.MedicalExamination).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.MedicalExaminationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_medical_examination_id_fkey");

            entity.HasOne(d => d.PrescriptionMedicine).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.PrescriptionMedicineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_prescription_medicine_id_fkey");

            entity.HasOne(d => d.Rehabilitation).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.RehabilitationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_rehabilitation_id_fkey");

            entity.HasOne(d => d.Service).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_service_id_fkey");

            entity.HasOne(d => d.Supplies).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_supplies_id_fkey");

            entity.HasOne(d => d.SurgicalProcedures).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.SurgicalProceduresId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_surgical_procedures_id_fkey");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.CategoryProducts)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProduct_vaccine_id_fkey");
        });

        modelBuilder.Entity<CategoryProfessionalDiploma>(entity =>
        {
            entity.HasKey(e => e.ProfessionalDiplomaId).HasName("CategoryProfessionalDiploma_pkey");

            entity.ToTable("CategoryProfessionalDiploma", tb => tb.HasComment("Danh mục văn bằng chuyên môn"));

            entity.Property(e => e.ProfessionalDiplomaId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("professional_diploma_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ProfessionalDiplomaCode)
                .HasComment("mã văn bằng chuyên môn")
                .HasColumnType("character varying")
                .HasColumnName("professional_diploma_code");
            entity.Property(e => e.ProfessionalDiplomaName)
                .HasComment("tên văn bằng chuyên môn")
                .HasColumnType("character varying")
                .HasColumnName("professional_diploma_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryProgram>(entity =>
        {
            entity.HasKey(e => e.ProgramId).HasName("CategoryProgram_pkey");

            entity.ToTable("CategoryProgram", tb => tb.HasComment("Danh mục chương trình"));

            entity.Property(e => e.ProgramId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("program_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ExamptionFormAttributeId)
                .HasComment("Hình thức miễn giảm")
                .HasColumnName("examption_form_attribute_id");
            entity.Property(e => e.ExamptionMethodAttributeId)
                .HasComment("Cách thức miễn giảm")
                .HasColumnName("examption_method_attribute_id");
            entity.Property(e => e.FromDate)
                .HasDefaultValueSql("now()")
                .HasComment("từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ProgramCode)
                .HasComment("mã chương trình")
                .HasColumnType("character varying")
                .HasColumnName("program_code");
            entity.Property(e => e.ProgramDesc)
                .HasComment("mô tả")
                .HasColumnName("program_desc");
            entity.Property(e => e.ProgramName)
                .HasComment("tên chương trình")
                .HasColumnType("character varying")
                .HasColumnName("program_name");
            entity.Property(e => e.ProgramTypeAttributeId)
                .HasComment("Phân loại chương trình")
                .HasColumnName("program_type_attribute_id");
            entity.Property(e => e.ProgramValue)
                .HasComment("giá trị")
                .HasColumnName("program_value");
            entity.Property(e => e.Qty)
                .HasDefaultValueSql("0")
                .HasComment("số lượng")
                .HasColumnName("qty");
            entity.Property(e => e.QtyRemain)
                .HasComment("số lượng còn lại")
                .HasColumnName("qty_remain");
            entity.Property(e => e.QtyUse)
                .HasComment("số lượng đã sử dụng")
                .HasColumnName("qty_use");
            entity.Property(e => e.ServiceTypeAttributeId)
                .HasComment("Loại áp dụng")
                .HasColumnName("service_type_attribute_id");
            entity.Property(e => e.ToDate)
                .HasComment("đến ngày")
                .HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.ExamptionFormAttribute).WithMany(p => p.CategoryProgramExamptionFormAttributes)
                .HasForeignKey(d => d.ExamptionFormAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProgram_examption_form_attribute_id_fkey");

            entity.HasOne(d => d.ExamptionMethodAttribute).WithMany(p => p.CategoryProgramExamptionMethodAttributes)
                .HasForeignKey(d => d.ExamptionMethodAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProgram_examption_method_attribute_id_fkey");

            entity.HasOne(d => d.ProgramTypeAttribute).WithMany(p => p.CategoryProgramProgramTypeAttributes)
                .HasForeignKey(d => d.ProgramTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProgram_program_type_attribute_id_fkey");

            entity.HasOne(d => d.ServiceTypeAttribute).WithMany(p => p.CategoryProgramServiceTypeAttributes)
                .HasForeignKey(d => d.ServiceTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryProgram_service_type_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryQuestionScreeningForm>(entity =>
        {
            entity.HasKey(e => e.QuestionScreeningFormId).HasName("CategoryQuestionScreeningForm_pkey");

            entity.ToTable("CategoryQuestionScreeningForm", tb => tb.HasComment("danh mục câu hỏi sàng lọc"));

            entity.Property(e => e.QuestionScreeningFormId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("question_screening_form_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.QuestionIndex)
                .HasComment("0: Thông tin người bệnh, 1: Khám sàng lọc, 2: Kết luận")
                .HasColumnName("question_index");
            entity.Property(e => e.QuestionNumber)
                .HasComment("stt")
                .HasColumnName("question_number");
            entity.Property(e => e.QuestionScreeningFormCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("question_screening_form_code");
            entity.Property(e => e.QuestionScreeningFormName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("question_screening_form_name");
            entity.Property(e => e.QuestionType)
                .HasComment("1:có 2 có ghi chú")
                .HasColumnName("question_type");
            entity.Property(e => e.TypeScreeningFormId)
                .HasComment("phiếu câu hỏi")
                .HasColumnName("type_screening_form_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.TypeScreeningForm).WithMany(p => p.CategoryQuestionScreeningForms)
                .HasForeignKey(d => d.TypeScreeningFormId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryQuestionScreeningForm_type_screening_form_id_fkey");
        });

        modelBuilder.Entity<CategoryQueue>(entity =>
        {
            entity.HasKey(e => e.QueueId).HasName("CategoryQueue_pkey");

            entity.ToTable("CategoryQueue", tb => tb.HasComment("Thiết lập hàng đợi"));

            entity.Property(e => e.QueueId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("queue_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.MaxPatient).HasColumnName("max_patient");
            entity.Property(e => e.MinPatient).HasColumnName("min_patient");
            entity.Property(e => e.QmsType).HasColumnName("qms_type");
            entity.Property(e => e.RoomType).HasColumnName("room_type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.QmsTypeNavigation).WithMany(p => p.CategoryQueueQmsTypeNavigations)
                .HasForeignKey(d => d.QmsType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryQueue_qms_type_fkey");

            entity.HasOne(d => d.RoomTypeNavigation).WithMany(p => p.CategoryQueueRoomTypeNavigations)
                .HasForeignKey(d => d.RoomType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryQueue_room_type_fkey");
        });

        modelBuilder.Entity<CategoryQueueObjectType>(entity =>
        {
            entity.HasKey(e => e.QueueObjectTypeId).HasName("CategoryQueueObjectType_pkey");

            entity.ToTable("CategoryQueueObjectType", tb => tb.HasComment("Loại đội tượng hàng đợi"));

            entity.Property(e => e.QueueObjectTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("queue_object_type_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.QueueObjectTypeName)
                .HasColumnType("character varying")
                .HasColumnName("queue_object_type_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryRank>(entity =>
        {
            entity.HasKey(e => e.RankId).HasName("CategoryRank_pkey");

            entity.ToTable("CategoryRank", tb => tb.HasComment("Danh mục quân hàm"));

            entity.Property(e => e.RankId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rank_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.RankCode)
                .HasComment("mã quân hàm")
                .HasColumnType("character varying")
                .HasColumnName("rank_code");
            entity.Property(e => e.RankName)
                .HasComment("Tên quân hàm")
                .HasColumnType("character varying")
                .HasColumnName("rank_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryReasonForAdvance>(entity =>
        {
            entity.HasKey(e => e.ReasonForAdvanceId).HasName("CategoryReasonForAdvance_pkey");

            entity.ToTable("CategoryReasonForAdvance", tb => tb.HasComment("Danh mục lý do tạm ứng"));

            entity.Property(e => e.ReasonForAdvanceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("reason_for_advance_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsCompletedReason)
                .HasComment("lý do hoàn")
                .HasColumnName("is_completed_reason");
            entity.Property(e => e.IsPaymentRefund)
                .HasComment("hoàn thanh toán")
                .HasColumnName("is_payment_refund");
            entity.Property(e => e.ReasonForAdvanceCode)
                .HasComment("mã lý do tạm ứng")
                .HasColumnType("character varying")
                .HasColumnName("reason_for_advance_code");
            entity.Property(e => e.ReasonForAdvanceName)
                .HasColumnType("character varying")
                .HasColumnName("reason_for_advance_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryReasonServiceReturn>(entity =>
        {
            entity.HasKey(e => e.ReasonServiceReturnId).HasName("CategoryReasonServiceReturn_pkey");

            entity.ToTable("CategoryReasonServiceReturn", tb => tb.HasComment("Lý do đổi trả dv"));

            entity.Property(e => e.ReasonServiceReturnId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("reason_service_return_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ReasonServiceReturnCode)
                .HasColumnType("character varying")
                .HasColumnName("reason_service_return_code");
            entity.Property(e => e.ReasonServiceReturnName)
                .HasColumnType("character varying")
                .HasColumnName("reason_service_return_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryReceipt>(entity =>
        {
            entity.HasKey(e => e.ReceiptId).HasName("CategoryReceipt_pkey");

            entity.ToTable("CategoryReceipt", tb => tb.HasComment("Phiếu lĩnh "));

            entity.Property(e => e.ReceiptId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_id");
            entity.Property(e => e.ConceptId)
                .HasComment("loại hàng hóa")
                .HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("Khoa chỉ định")
                .HasColumnName("department_id");
            entity.Property(e => e.DrugClassificationId)
                .HasComment("phân loại thuốc")
                .HasColumnName("drug_classification_id");
            entity.Property(e => e.DrugId)
                .HasComment("tên thuốc")
                .HasColumnName("drug_id");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.IsApprove)
                .HasComment("duyệt")
                .HasColumnName("is_approve");
            entity.Property(e => e.ReceiptCode)
                .HasColumnType("character varying")
                .HasColumnName("receipt_code");
            entity.Property(e => e.ReceiptType)
                .HasComment("loại lĩnh 1: lĩnh nội trú 2 lĩnh tủ trực")
                .HasColumnName("receipt_type");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.RoomSugeryId)
                .HasComment("buồng phẫu thuật chọn loại phòng= loại giường")
                .HasColumnName("room_sugery_id");
            entity.Property(e => e.SetupMedicalRecordId)
                .HasComment("mã bệnh án")
                .HasColumnName("setup_medical_record_id");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseFrom)
                .HasComment("từ kho")
                .HasColumnName("warehouse_from");
            entity.Property(e => e.WarehouseTo)
                .HasComment("đến kho")
                .HasColumnName("warehouse_to");
        });

        modelBuilder.Entity<CategoryReceiptCode>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeId).HasName("CategoryReceiptCode_pkey");

            entity.ToTable("CategoryReceiptCode", tb => tb.HasComment("Danh sách mã phiếu lĩnh"));

            entity.Property(e => e.ReceiptCodeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId)
                .HasComment("loại hàng hóa")
                .HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.FromDate)
                .HasComment("từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsStatus)
                .HasComment("1: phiếu lĩnh, 2: phiếu trả")
                .HasColumnName("is_status");
            entity.Property(e => e.MedicalRecordTypeId)
                .HasComment("mã bệnh án")
                .HasColumnName("medical_record_type_id");
            entity.Property(e => e.ReceiptCodeCd)
                .HasComment("mã phiếu lĩnh")
                .HasColumnType("character varying")
                .HasColumnName("receipt_code_cd");
            entity.Property(e => e.ReceiptCodeSuppliesId).HasColumnName("receipt_code_supplies_id");
            entity.Property(e => e.ReceiptCodeType)
                .HasComment("loại phiếu")
                .HasColumnName("receipt_code_type");
            entity.Property(e => e.ReceptCodeName)
                .HasComment("tên phiếu lĩnh")
                .HasColumnType("char")
                .HasColumnName("recept_code_name");
            entity.Property(e => e.ToDate)
                .HasComment("đến ngày")
                .HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseFrom)
                .HasComment("từ kho")
                .HasColumnName("warehouse_from");
            entity.Property(e => e.WarehouseTo)
                .HasComment("đến  kho")
                .HasColumnName("warehouse_to");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryReceiptCodes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCode_concept_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryReceiptCodes)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCode_department_id_fkey");

            entity.HasOne(d => d.MedicalRecordType).WithMany(p => p.CategoryReceiptCodes)
                .HasForeignKey(d => d.MedicalRecordTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCode_medical_record_id_fkey");

            entity.HasOne(d => d.ReceiptCodeSupplies).WithMany(p => p.CategoryReceiptCodes)
                .HasForeignKey(d => d.ReceiptCodeSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCode_receipt_code_supplies_id_fkey");

            entity.HasOne(d => d.ReceiptCodeTypeNavigation).WithMany(p => p.CategoryReceiptCodes)
                .HasForeignKey(d => d.ReceiptCodeType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCode_receipt_code_type_fkey");

            entity.HasOne(d => d.WarehouseFromNavigation).WithMany(p => p.CategoryReceiptCodeWarehouseFromNavigations)
                .HasForeignKey(d => d.WarehouseFrom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCode_warehouse_from_fkey");

            entity.HasOne(d => d.WarehouseToNavigation).WithMany(p => p.CategoryReceiptCodeWarehouseToNavigations)
                .HasForeignKey(d => d.WarehouseTo)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCode_warehouse_to_fkey");
        });

        modelBuilder.Entity<CategoryReceiptCodeEstimate>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeEstimateId).HasName("CategoryReceiptCodeEstimate_pkey");

            entity.ToTable("CategoryReceiptCodeEstimate", tb => tb.HasComment("Phiếu nhập dự trù"));

            entity.Property(e => e.ReceiptCodeEstimateId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_estimate_id");
            entity.Property(e => e.ApproveDate).HasColumnName("approve_date");
            entity.Property(e => e.ApprovedAccount).HasColumnName("approved_account");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.IsType).HasColumnName("is_type");
            entity.Property(e => e.MethodImportType)
                .HasComment("hình thức nhập")
                .HasColumnName("method_import_type");
            entity.Property(e => e.MonthEstimate)
                .HasComment("tháng dự trù")
                .HasColumnName("month_estimate");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.QtyEstimate)
                .HasComment("số lượng dự trù")
                .HasColumnName("qty_estimate");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.ReceiptCodeEstimateCode)
                .HasColumnType("character varying")
                .HasColumnName("receipt_code_estimate_code");
            entity.Property(e => e.ReceiptCodeSuppliesId).HasColumnName("receipt_code_supplies_id");
            entity.Property(e => e.Times)
                .HasComment("số lần")
                .HasColumnName("times");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseExport)
                .HasComment("kho xuất")
                .HasColumnName("warehouse_export");
            entity.Property(e => e.WarehouseImport)
                .HasComment("kho nhập")
                .HasColumnName("warehouse_import");

            entity.HasOne(d => d.ApprovedAccountNavigation).WithMany(p => p.CategoryReceiptCodeEstimateApprovedAccountNavigations)
                .HasForeignKey(d => d.ApprovedAccount)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeEstimate_approved_account_fkey");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CategoryReceiptCodeEstimateCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeEstimate_created_by_fkey");

            entity.HasOne(d => d.MethodImportTypeNavigation).WithMany(p => p.CategoryReceiptCodeEstimates)
                .HasForeignKey(d => d.MethodImportType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeEstimate_method_import_type_fkey");

            entity.HasOne(d => d.ReceiptCodeSupplies).WithMany(p => p.CategoryReceiptCodeEstimates)
                .HasForeignKey(d => d.ReceiptCodeSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeEstimate_receipt_code_supplies_id_fkey");

            entity.HasOne(d => d.WarehouseExportNavigation).WithMany(p => p.CategoryReceiptCodeEstimateWarehouseExportNavigations)
                .HasForeignKey(d => d.WarehouseExport)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeEstimate_warehouse_export_fkey");

            entity.HasOne(d => d.WarehouseImportNavigation).WithMany(p => p.CategoryReceiptCodeEstimateWarehouseImportNavigations)
                .HasForeignKey(d => d.WarehouseImport)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeEstimate_warehouse_import_fkey");
        });

        modelBuilder.Entity<CategoryReceiptCodeSupply>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeSuppliesId).HasName("CategoryReceiptCodeSupplies_pkey");

            entity.ToTable(tb => tb.HasComment("Phiếu nhập nhà cung cấp"));

            entity.Property(e => e.ReceiptCodeSuppliesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_supplies_id");
            entity.Property(e => e.ApproveDate)
                .HasComment("ngày duyệt phiếu")
                .HasColumnName("approve_date");
            entity.Property(e => e.ApprovedAccount).HasColumnName("approved_account");
            entity.Property(e => e.BidServiceId)
                .HasComment("quyết định thầu")
                .HasColumnName("bid_service_id");
            entity.Property(e => e.BillDate)
                .HasComment("ngày hóa đơn")
                .HasColumnName("bill_date");
            entity.Property(e => e.BillNumber)
                .HasComment("số hóa đơn")
                .HasColumnType("character varying")
                .HasColumnName("bill_number");
            entity.Property(e => e.BillSymbol)
                .HasComment("ký hiệu")
                .HasColumnType("character varying")
                .HasColumnName("bill_symbol");
            entity.Property(e => e.ContactNumber)
                .HasComment("số hợp đồng")
                .HasColumnType("character varying")
                .HasColumnName("contact_number");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy)
                .HasComment("người tạo phiếu")
                .HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa tạo phiếu")
                .HasColumnName("department_id");
            entity.Property(e => e.FinishDate).HasColumnName("finish_date");
            entity.Property(e => e.Hospital)
                .HasComment("csyt chuyển tới")
                .HasColumnName("hospital");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsStatus)
                .HasComment("0 tạo mới 1 chờ duyệt 2 duyệt")
                .HasColumnName("is_status");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientDesignateServiceChemistryId).HasColumnName("patient_designate_service_chemistry_id");
            entity.Property(e => e.PatientDesignateServiceDrugId).HasColumnName("patient_designate_service_drug_id");
            entity.Property(e => e.PatientDesignateServiceSuppliesId).HasColumnName("patient_designate_service_supplies_id");
            entity.Property(e => e.PatientDesignateServiceVaccineId).HasColumnName("patient_designate_service_vaccine_id");
            entity.Property(e => e.PriceTax).HasColumnName("price_tax");
            entity.Property(e => e.Reason)
                .HasComment("lý do")
                .HasColumnName("reason");
            entity.Property(e => e.ReceiptCodeSuppliesCode)
                .HasComment("số phiếu : yyMM + index  2311+ index")
                .HasColumnType("character varying")
                .HasColumnName("receipt_code_supplies_code");
            entity.Property(e => e.ReceiptCodeSuppliesImportCode)
                .HasColumnType("character varying")
                .HasColumnName("receipt_code_supplies_import_code");
            entity.Property(e => e.ReceiptMethodId)
                .HasComment("hình thức nhập")
                .HasColumnName("receipt_method_id");
            entity.Property(e => e.SuppliesId)
                .HasComment("nhà cung cấp")
                .HasColumnName("supplies_id");
            entity.Property(e => e.SuppliesType)
                .HasComment("1 nhập nhà cung cấp 2 phiếu thu khác")
                .HasColumnName("supplies_type");
            entity.Property(e => e.Total).HasColumnName("total");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseExportId)
                .HasComment("kho xuat")
                .HasColumnName("warehouse_export_id");
            entity.Property(e => e.WarehouseImportId)
                .HasComment("kho nhập")
                .HasColumnName("warehouse_import_id");
            entity.Property(e => e.WarehouseSourceId)
                .HasComment("nguồn kho")
                .HasColumnName("warehouse_source_id");

            entity.HasOne(d => d.ApprovedAccountNavigation).WithMany(p => p.CategoryReceiptCodeSupplyApprovedAccountNavigations)
                .HasForeignKey(d => d.ApprovedAccount)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_approve_account_fkey");

            entity.HasOne(d => d.BidService).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.BidServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_bid_service_id_fkey");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CategoryReceiptCodeSupplyCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_created_by_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_department_id_fkey");

            entity.HasOne(d => d.PatientDesignateServiceChemistry).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.PatientDesignateServiceChemistryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_patient_designate_service_chemis");

            entity.HasOne(d => d.PatientDesignateServiceDrug).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.PatientDesignateServiceDrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_patient_designate_service_drug_i");

            entity.HasOne(d => d.PatientDesignateServiceSupplies).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.PatientDesignateServiceSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_patient_designate_service_suppli");

            entity.HasOne(d => d.PatientDesignateServiceVaccine).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.PatientDesignateServiceVaccineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_patient_designate_service_vaccin");

            entity.HasOne(d => d.ReceiptMethod).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.ReceiptMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_receipt_method_id_fkey");

            entity.HasOne(d => d.Supplies).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_supplies_id_fkey");

            entity.HasOne(d => d.WarehouseExport).WithMany(p => p.CategoryReceiptCodeSupplyWarehouseExports)
                .HasForeignKey(d => d.WarehouseExportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_warehouse_export_id_fkey");

            entity.HasOne(d => d.WarehouseImport).WithMany(p => p.CategoryReceiptCodeSupplyWarehouseImports)
                .HasForeignKey(d => d.WarehouseImportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_warehouse_import_id_fkey");

            entity.HasOne(d => d.WarehouseSource).WithMany(p => p.CategoryReceiptCodeSupplies)
                .HasForeignKey(d => d.WarehouseSourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReceiptCodeSupplies_warehouse_source_id_fkey");
        });

        modelBuilder.Entity<CategoryReceiptList>(entity =>
        {
            entity.HasKey(e => e.ReceiptListId).HasName("CategoryReceiptList_pkey");

            entity.ToTable("CategoryReceiptList", tb => tb.HasComment("Phiếu lĩnh"));

            entity.Property(e => e.ReceiptListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_list_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.FromWarehouseId).HasColumnName("from_warehouse_id");
            entity.Property(e => e.ReceiptType).HasColumnName("receipt_type");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.ToWarehouseId).HasColumnName("to_warehouse_id");
            entity.Property(e => e.UpdateAt).HasColumnName("update_at");
        });

        modelBuilder.Entity<CategoryRefund>(entity =>
        {
            entity.HasKey(e => e.RefundId).HasName("CategoryRefund_pkey");

            entity.ToTable("CategoryRefund", tb => tb.HasComment("Danh sách phiếu hoàn"));

            entity.Property(e => e.RefundId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("refund_id");
            entity.Property(e => e.AccountId)
                .HasComment("người yêu cầu")
                .HasColumnName("account_id");
            entity.Property(e => e.AdvanceForReasonId)
                .HasComment("lý do hoàn trả")
                .HasColumnName("advance_for_reason_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DesignateServiceId)
                .HasComment("dịch vụ hoàn trả")
                .HasColumnName("designate_service_id");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái phiếu")
                .HasColumnName("is_status");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.ReceiptCodeId)
                .HasComment("phiếu thu")
                .HasColumnName("receipt_code_id");
            entity.Property(e => e.RefundCode)
                .HasComment("mã phiếu hoàn : ngày hiện tại + stt hoàn format yyyyMMdd0000Index")
                .HasColumnType("character varying")
                .HasColumnName("refund_code");
            entity.Property(e => e.RefundType)
                .HasComment("hình thức hoàn 1: trả dịch vụ")
                .HasColumnName("refund_type");
            entity.Property(e => e.TimeRequest)
                .HasComment("thời gian yêu cầu")
                .HasColumnName("time_request");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryRefunds)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRefund_account_id_fkey");

            entity.HasOne(d => d.AdvanceForReason).WithMany(p => p.CategoryRefunds)
                .HasForeignKey(d => d.AdvanceForReasonId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRefund_advance_for_reason_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryRefunds)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRefund_patient_id_fkey");
        });

        modelBuilder.Entity<CategoryRehabilitationsService>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceId).HasName("CategoryRehabilitationsService_pkey");

            entity.ToTable("CategoryRehabilitationsService", tb => tb.HasComment("Danh mục phục hồi chức năng"));

            entity.Property(e => e.RehabilitationServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vât tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClassificationRehabilitationServiceId).HasColumnName("classification_rehabilitation_service_id");
            entity.Property(e => e.ClsImplementUnitMedicalId)
                .HasComment("CSKCB thực hiện CLS")
                .HasColumnName("cls_implement_unit_medical_id");
            entity.Property(e => e.CodePrint)
                .HasColumnType("character varying")
                .HasColumnName("code_print");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DecisionCode)
                .HasComment("mã số quyết định")
                .HasColumnType("character varying")
                .HasColumnName("decision_code");
            entity.Property(e => e.DecisionDate)
                .HasComment("ngày quyết định")
                .HasColumnName("decision_date");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.ExpiredWarningNumberDay)
                .HasComment("Số ngày cảnh báo HSD")
                .HasColumnName("expired_warning_number_day");
            entity.Property(e => e.FormId).HasColumnName("form_id");
            entity.Property(e => e.Gender)
                .HasComment("Giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.HealthInsurancePriceCode)
                .HasColumnType("character varying")
                .HasColumnName("health_insurance_price_code");
            entity.Property(e => e.InsuranceWarningNumberDay)
                .HasComment("Số ngày cảnh báo kê dịch vụ BHYT")
                .HasColumnName("insurance_warning_number_day");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsBookOnline)
                .HasComment("Đặt khám online")
                .HasColumnName("is_book_online");
            entity.Property(e => e.IsECrCl).HasColumnName("is_eCrCl");
            entity.Property(e => e.IsEGfr).HasColumnName("is_eGFR");
            entity.Property(e => e.IsEditService)
                .HasComment("Cho sửa đổi DV")
                .HasColumnName("is_edit_service");
            entity.Property(e => e.IsExternalPay)
                .HasComment("Thu ngoài")
                .HasColumnName("is_external_pay");
            entity.Property(e => e.IsInsurance).HasColumnName("is_insurance");
            entity.Property(e => e.IsKiosk).HasColumnName("is_kiosk");
            entity.Property(e => e.IsLaterPay)
                .HasComment("Thanh toán sau")
                .HasColumnName("is_later_pay");
            entity.Property(e => e.IsListQtySplit)
                .HasComment("Tách số lượng khi kê")
                .HasColumnName("is_list_qty_split");
            entity.Property(e => e.IsNoCharge)
                .HasComment("Không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsNotImplemnetQtyMutil)
                .HasComment("Không được thực hiện SL nhiều cùng lúc")
                .HasColumnName("is_not_implemnet_qty_mutil");
            entity.Property(e => e.IsRequestConsultation)
                .HasDefaultValueSql("0")
                .HasColumnName("is_request_consultation");
            entity.Property(e => e.IsRequestService)
                .HasComment("DV theo yêu cầu")
                .HasColumnName("is_request_service");
            entity.Property(e => e.IsRetrictDepartment)
                .HasComment("Hạn chế khoa chỉ định")
                .HasColumnName("is_retrict_department");
            entity.Property(e => e.IsSplitVoteIndicationDupplicate).HasColumnName("is_split_vote_indication_dupplicate");
            entity.Property(e => e.IsTt35).HasColumnName("is_tt35");
            entity.Property(e => e.IsUseCovid)
                .HasComment("Dùng cho Covid")
                .HasColumnName("is_use_covid");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberTt37).HasColumnName("number_tt37");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasComment("Tỷ lệ BH thanh toán")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio)
                .HasComment("Tỷ lệ thanh toán DV")
                .HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceInsurance)
                .HasComment("giá bảo hiểm")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasComment("giá không bảo hiểm")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.RehabilitationServiceCode)
                .HasComment("mã dịch vụ phục hồi chức năng")
                .HasColumnType("character varying")
                .HasColumnName("rehabilitation_service_code");
            entity.Property(e => e.RehabilitationServiceName)
                .HasComment("tên dịch vụ phục hồi chức năng")
                .HasColumnType("character varying")
                .HasColumnName("rehabilitation_service_name");
            entity.Property(e => e.ReportId)
                .HasComment("Tên báo cáo")
                .HasColumnName("report_id");
            entity.Property(e => e.SpecialistId).HasColumnName("specialist_id");
            entity.Property(e => e.Surcharge)
                .HasComment("phụ thu")
                .HasColumnName("surcharge");
            entity.Property(e => e.SurgicalProceduresDivisionId)
                .HasComment("phân tuyến PTTT")
                .HasColumnName("surgical_procedures_division_id");
            entity.Property(e => e.TechServiceTranferUnitMedicalId)
                .HasComment("CSKCB chuyển giao DVKT")
                .HasColumnName("tech_service_tranfer_unit_medical_id");
            entity.Property(e => e.UnitConnectId)
                .HasComment("đơn vị kết nối")
                .HasColumnName("unit_connect_id");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vj tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ClassificationRehabilitationService).WithMany(p => p.CategoryRehabilitationsServiceClassificationRehabilitationServices)
                .HasForeignKey(d => d.ClassificationRehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_classification_rehabilitation");

            entity.HasOne(d => d.ClsImplementUnitMedical).WithMany(p => p.CategoryRehabilitationsServiceClsImplementUnitMedicals)
                .HasForeignKey(d => d.ClsImplementUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_cls_implement_unit_medical");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryRehabilitationsServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_concept_id_fkey");

            entity.HasOne(d => d.Form).WithMany(p => p.CategoryRehabilitationsServiceForms)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_form_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryRehabilitationsServices)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryRehabilitationsServices)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategoryRehabilitationsServices)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_group_service_lvl3_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.CategoryRehabilitationsServices)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_report_id_fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.CategoryRehabilitationsServices)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_specialist_id_fkey");

            entity.HasOne(d => d.SurgicalProceduresDivision).WithMany(p => p.CategoryRehabilitationsServiceSurgicalProceduresDivisions)
                .HasForeignKey(d => d.SurgicalProceduresDivisionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_surgical_procedures_divisi");

            entity.HasOne(d => d.TechServiceTranferUnitMedical).WithMany(p => p.CategoryRehabilitationsServiceTechServiceTranferUnitMedicals)
                .HasForeignKey(d => d.TechServiceTranferUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_tech_service_tranfer_unit_");

            entity.HasOne(d => d.UnitConnect).WithMany(p => p.CategoryRehabilitationsServiceUnitConnects)
                .HasForeignKey(d => d.UnitConnectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_unit_connect_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryRehabilitationsServices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRehabilitationsService_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryRelationship>(entity =>
        {
            entity.HasKey(e => e.RelationshipId).HasName("CategoryRelationship_pkey");

            entity.ToTable("CategoryRelationship", tb => tb.HasComment("Danh mục mối quan hệ"));

            entity.Property(e => e.RelationshipId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("relationship_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.RelationshipCode)
                .HasComment("mã mối quan hệ")
                .HasColumnType("character varying")
                .HasColumnName("relationship_code");
            entity.Property(e => e.RelationshipName)
                .HasComment("tên mối quan hệ")
                .HasColumnType("character varying")
                .HasColumnName("relationship_name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.VaccinationNationalSyncCode)
                .HasComment("mã đồng bộ TCQG")
                .HasColumnType("character varying")
                .HasColumnName("vaccination_national_sync_code");
        });

        modelBuilder.Entity<CategoryReport>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("CategoryReport_pkey");

            entity.ToTable("CategoryReport", tb => tb.HasComment("Danh mục báo cáo"));

            entity.Property(e => e.ReportId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.File).HasColumnName("file");
            entity.Property(e => e.FileName)
                .HasColumnType("character varying")
                .HasColumnName("file_name");
            entity.Property(e => e.FormAttributeId)
                .HasComment("id loại biểu mẫu")
                .HasColumnName("form_attribute_id");
            entity.Property(e => e.FormatFileAttributeId)
                .HasComment("id định dạng file")
                .HasColumnName("format_file_attribute_id");
            entity.Property(e => e.Horizontal)
                .HasComment("kích thước chiều ngang")
                .HasColumnName("horizontal");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsDigitalSign)
                .HasComment("ký số")
                .HasColumnName("is_digital_sign");
            entity.Property(e => e.PaperOrientationAttributeId)
                .HasComment("id hướng giấy")
                .HasColumnName("paper_orientation_attribute_id");
            entity.Property(e => e.PaperSizeAttributeId)
                .HasComment("id khổ giấy")
                .HasColumnName("paper_size_attribute_id");
            entity.Property(e => e.PrintTypeAttributeId)
                .HasComment("id loại in")
                .HasColumnName("print_type_attribute_id");
            entity.Property(e => e.ReportCode)
                .HasColumnType("character varying")
                .HasColumnName("report_code");
            entity.Property(e => e.ReportName)
                .HasComment("tên báo cáo")
                .HasColumnType("character varying")
                .HasColumnName("report_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.Vertical)
                .HasComment("kích thước chiều dọc")
                .HasColumnName("vertical");

            entity.HasOne(d => d.FormAttribute).WithMany(p => p.CategoryReportFormAttributes)
                .HasForeignKey(d => d.FormAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReport_form_attribute_id_fkey");

            entity.HasOne(d => d.FormatFileAttribute).WithMany(p => p.CategoryReportFormatFileAttributes)
                .HasForeignKey(d => d.FormatFileAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReport_format_file_attribute_id_fkey");

            entity.HasOne(d => d.PaperOrientationAttribute).WithMany(p => p.CategoryReportPaperOrientationAttributes)
                .HasForeignKey(d => d.PaperOrientationAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReport_paper_orientation_attribute_id_fkey");

            entity.HasOne(d => d.PaperSizeAttribute).WithMany(p => p.CategoryReportPaperSizeAttributes)
                .HasForeignKey(d => d.PaperSizeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReport_paper_size_attribute_id_fkey");

            entity.HasOne(d => d.PrintTypeAttribute).WithMany(p => p.CategoryReportPrintTypeAttributes)
                .HasForeignKey(d => d.PrintTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReport_print_type_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryReportDrugInteraction>(entity =>
        {
            entity.HasKey(e => e.ReportDrugInteractionId).HasName("CategoryReportDrugInteractions_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục khai báo tương tác thuốc"));

            entity.Property(e => e.ReportDrugInteractionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_drug_interaction_id");
            entity.Property(e => e.ActiveElementId1)
                .HasComment("Hoạt chất 1")
                .HasColumnName("active_element_id1");
            entity.Property(e => e.ActiveElementId2)
                .HasComment("hoặc chất 2")
                .HasColumnName("active_element_id2");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IcdWarning)
                .HasComment("cảnh báo icd")
                .HasColumnName("icd_warning");
            entity.Property(e => e.InteractionConsequencesId)
                .HasComment("Hậu quả")
                .HasColumnName("interaction_consequences_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsIcdWarning).HasColumnName("is_icd_warning");
            entity.Property(e => e.IsLaboratory)
                .HasComment("xét nghiệm")
                .HasColumnName("is_laboratory");
            entity.Property(e => e.IsStopPrescribingMedication)
                .HasComment("chặn kê thuốc")
                .HasColumnName("is_stop_prescribing_medication");
            entity.Property(e => e.LevelOfInteractionId)
                .HasComment("mức độ tương tác")
                .HasColumnName("level_of_interaction_id");
            entity.Property(e => e.Mechanism)
                .HasComment("Cơ chế")
                .HasColumnType("character varying")
                .HasColumnName("mechanism");
            entity.Property(e => e.PharmacologicalPropertiesId1)
                .HasComment("đặc tính dược lý1")
                .HasColumnName("pharmacological_properties_id1");
            entity.Property(e => e.PharmacologicalPropertiesId2)
                .HasComment("đặc tính dược lý 2")
                .HasColumnName("pharmacological_properties_id2");
            entity.Property(e => e.Solve)
                .HasComment("xử trí")
                .HasColumnType("character varying")
                .HasColumnName("solve");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ActiveElementId1Navigation).WithMany(p => p.CategoryReportDrugInteractionActiveElementId1Navigations)
                .HasForeignKey(d => d.ActiveElementId1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReportDrugInteractions_active_element_id1_fkey");

            entity.HasOne(d => d.ActiveElementId2Navigation).WithMany(p => p.CategoryReportDrugInteractionActiveElementId2Navigations)
                .HasForeignKey(d => d.ActiveElementId2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReportDrugInteractions_active_element_id2_fkey");

            entity.HasOne(d => d.InteractionConsequences).WithMany(p => p.CategoryReportDrugInteractions)
                .HasForeignKey(d => d.InteractionConsequencesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReportDrugInteractions_interaction_consequences_id_fkey");

            entity.HasOne(d => d.LevelOfInteraction).WithMany(p => p.CategoryReportDrugInteractions)
                .HasForeignKey(d => d.LevelOfInteractionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReportDrugInteractions_level_of_interaction_id_fkey");

            entity.HasOne(d => d.PharmacologicalPropertiesId1Navigation).WithMany(p => p.CategoryReportDrugInteractionPharmacologicalPropertiesId1Navigations)
                .HasForeignKey(d => d.PharmacologicalPropertiesId1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReportDrugInteraction_pharmacological_properties_i_fkey");

            entity.HasOne(d => d.PharmacologicalPropertiesId2Navigation).WithMany(p => p.CategoryReportDrugInteractionPharmacologicalPropertiesId2Navigations)
                .HasForeignKey(d => d.PharmacologicalPropertiesId2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryReportDrugInteractio_pharmacological_properties_i_fkey1");
        });

        modelBuilder.Entity<CategoryRepresentative>(entity =>
        {
            entity.HasKey(e => e.RepresentativeId).HasName("CategoryRepresentative_pkey");

            entity.ToTable("CategoryRepresentative", tb => tb.HasComment("Danh mục người đại diện"));

            entity.Property(e => e.RepresentativeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("representative_id");
            entity.Property(e => e.AccountNum)
                .HasComment("số tài khoản")
                .HasColumnType("character varying")
                .HasColumnName("account_num");
            entity.Property(e => e.Address)
                .HasComment("địa chỉ")
                .HasColumnType("character varying")
                .HasColumnName("address");
            entity.Property(e => e.AgencyUnitId)
                .HasComment("cơ quan đơn vị")
                .HasColumnName("agency_unit_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Dob)
                .HasComment("ngày sinh")
                .HasColumnType("character varying")
                .HasColumnName("dob");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.Phone)
                .HasComment("số điện thoại")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.RepresentativeCode)
                .HasComment("mã người đại diện")
                .HasColumnType("character varying")
                .HasColumnName("representative_code");
            entity.Property(e => e.RepresentativeName)
                .HasComment("tên người đại diện")
                .HasColumnType("character varying")
                .HasColumnName("representative_name");
            entity.Property(e => e.TaxCode)
                .HasComment("mã só thuế")
                .HasColumnType("character varying")
                .HasColumnName("tax_code");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.AgencyUnit).WithMany(p => p.CategoryRepresentatives)
                .HasForeignKey(d => d.AgencyUnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRepresentative_agency_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryResultTemplateRehabilitation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CategoryResultTemplateRehabilitation");

            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ResultTemplatedRehabilitationCode)
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_code");
            entity.Property(e => e.ResultTemplatedRehabilitationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("result_templated_rehabilitation_id");
            entity.Property(e => e.ResultTemplatedRehabilitationImage).HasColumnName("result_templated_rehabilitation_image");
            entity.Property(e => e.ResultTemplatedRehabilitationLaterDiagnosis)
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_later_diagnosis");
            entity.Property(e => e.ResultTemplatedRehabilitationMethod).HasColumnName("result_templated_rehabilitation_method");
            entity.Property(e => e.ResultTemplatedRehabilitationMethodAttributeId).HasColumnName("result_templated_rehabilitation_method_attribute_id");
            entity.Property(e => e.ResultTemplatedRehabilitationName)
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_name");
            entity.Property(e => e.ResultTemplatedRehabilitationResult)
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_result");
            entity.Property(e => e.ResultTemplatedRehabilitationType).HasColumnName("result_templated_rehabilitation_type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryResultTemplateSurgery>(entity =>
        {
            entity.HasKey(e => e.ResultTemplatedSurgeryId).HasName("CategoryResultTemplateSurgery_pkey");

            entity.ToTable("CategoryResultTemplateSurgery", tb => tb.HasComment("Danh mục mẫu kết quả PHCN"));

            entity.Property(e => e.ResultTemplatedSurgeryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("result_templated_surgery_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ResultTemplatedSurgeryCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_surgery_code");
            entity.Property(e => e.ResultTemplatedSurgeryImage).HasColumnName("result_templated_surgery_image");
            entity.Property(e => e.ResultTemplatedSurgeryLaterDiagnosis)
                .HasComment("chẩn đoán sau PTTT")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_surgery_later_diagnosis");
            entity.Property(e => e.ResultTemplatedSurgeryMethod)
                .HasComment("phương pháp PTTT")
                .HasColumnName("result_templated_surgery_method");
            entity.Property(e => e.ResultTemplatedSurgeryMethodAttributeId)
                .HasComment("phương pháp vô cảm")
                .HasColumnName("result_templated_surgery_method_attribute_id");
            entity.Property(e => e.ResultTemplatedSurgeryName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_surgery_name");
            entity.Property(e => e.ResultTemplatedSurgeryResult)
                .HasComment("kết luận")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_surgery_result");
            entity.Property(e => e.ResultTemplatedSurgeryType)
                .HasComment("Cách thức PTTT")
                .HasColumnName("result_templated_surgery_type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ResultTemplatedSurgeryMethodAttribute).WithMany(p => p.CategoryResultTemplateSurgeries)
                .HasForeignKey(d => d.ResultTemplatedSurgeryMethodAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryResultTemplateSurgery_result_templated_surgery_metho");
        });

        modelBuilder.Entity<CategoryResultTemplaterRehabilitation>(entity =>
        {
            entity.HasKey(e => e.ResultTemplatedRehabilitationId).HasName("CategoryResultTemplateRehabilitation_pkey");

            entity.ToTable("CategoryResultTemplaterRehabilitation");

            entity.Property(e => e.ResultTemplatedRehabilitationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("result_templated_rehabilitation_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ResultTemplatedRehabilitationCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_code");
            entity.Property(e => e.ResultTemplatedRehabilitationImage).HasColumnName("result_templated_rehabilitation_image");
            entity.Property(e => e.ResultTemplatedRehabilitationLaterDiagnosis)
                .HasComment("chẩn đoán sau PTTT")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_later_diagnosis");
            entity.Property(e => e.ResultTemplatedRehabilitationMethod)
                .HasComment("phương pháp PTTT")
                .HasColumnName("result_templated_rehabilitation_method");
            entity.Property(e => e.ResultTemplatedRehabilitationMethodAttributeId)
                .HasComment("phương pháp vô cảm")
                .HasColumnName("result_templated_rehabilitation_method_attribute_id");
            entity.Property(e => e.ResultTemplatedRehabilitationName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_name");
            entity.Property(e => e.ResultTemplatedRehabilitationResult)
                .HasComment("kết luận")
                .HasColumnType("character varying")
                .HasColumnName("result_templated_rehabilitation_result");
            entity.Property(e => e.ResultTemplatedRehabilitationType)
                .HasComment("Cách thức PTTT")
                .HasColumnName("result_templated_rehabilitation_type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ResultTemplatedRehabilitationMethodAttribute).WithMany(p => p.CategoryResultTemplaterRehabilitations)
                .HasForeignKey(d => d.ResultTemplatedRehabilitationMethodAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryResultTemplateRehabilitation_result_templated_rehabilit");
        });

        modelBuilder.Entity<CategoryRetailSurplu>(entity =>
        {
            entity.HasKey(e => e.RetailSurplusId).HasName("CategoryRetailSurplus_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục thặng dư bán lẻ"));

            entity.Property(e => e.RetailSurplusId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("retail_surplus_id");
            entity.Property(e => e.ChangeBy).HasColumnName("change_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DrugClassificationId)
                .HasComment("id phân loại thuốc")
                .HasColumnName("drug_classification_id");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.RetailSurplusPercent)
                .HasComment("Thặng số bán lẻ(%)")
                .HasColumnName("retail_surplus_percent");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VatMax)
                .HasComment("Giá nhập sau VAT lớn nhất")
                .HasColumnType("money")
                .HasColumnName("vat_max");
            entity.Property(e => e.VatMin)
                .HasComment("Giá nhập sau VAT nhỏ nhất")
                .HasColumnType("money")
                .HasColumnName("vat_min");
            entity.Property(e => e.WarehouseId)
                .HasComment("id kho")
                .HasColumnName("warehouse_id");

            entity.HasOne(d => d.DrugClassification).WithMany(p => p.CategoryRetailSurplus)
                .HasForeignKey(d => d.DrugClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRetailSurplus_drug_classification_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryRetailSurplus)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRetailSurplus_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategoryRetailSurplus)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRetailSurplus_group_service_lvl2_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.CategoryRetailSurplus)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRetailSurplus_warehouse_id_fkey");
        });

        modelBuilder.Entity<CategoryRole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("CategoryRole_pkey");

            entity.ToTable("CategoryRole", tb => tb.HasComment("Danh mục vai trò"));

            entity.Property(e => e.RoleId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("role_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.RoleCode)
                .HasColumnType("character varying")
                .HasColumnName("role_code");
            entity.Property(e => e.RoleDesc)
                .HasColumnType("character varying")
                .HasColumnName("role_desc");
            entity.Property(e => e.RoleName)
                .HasColumnType("character varying")
                .HasColumnName("role_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryRoleSign>(entity =>
        {
            entity.HasKey(e => e.RoleSignId).HasName("CategoryRoleSign_pkey");

            entity.ToTable("CategoryRoleSign", tb => tb.HasComment("Danh mục quyền ký"));

            entity.Property(e => e.RoleSignId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("role_sign_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.RoleSignCode)
                .HasComment("mã quyền ký")
                .HasColumnType("character varying")
                .HasColumnName("role_sign_code");
            entity.Property(e => e.RoleSignName)
                .HasComment("tên quyền ký")
                .HasColumnType("character varying")
                .HasColumnName("role_sign_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryRoom>(entity =>
        {
            entity.HasKey(e => e.RoomId).HasName("CategoryRoom_pkey");

            entity.ToTable("CategoryRoom", tb => tb.HasComment("Danh mục phòng"));

            entity.Property(e => e.RoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("room_id");
            entity.Property(e => e.Address)
                .HasComment("địa chỉ")
                .HasColumnName("address");
            entity.Property(e => e.AreaId)
                .HasComment("khu vực")
                .HasColumnName("area_id");
            entity.Property(e => e.BuildingId)
                .HasComment("nhà")
                .HasColumnName("building_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsDefault)
                .HasDefaultValueSql("1")
                .HasComment("mặc định")
                .HasColumnName("is_default");
            entity.Property(e => e.IsExternalHospital)
                .HasComment("ngoại viện")
                .HasColumnName("is_external_hospital");
            entity.Property(e => e.IsIpd)
                .HasComment("nội trú")
                .HasColumnName("is_ipd");
            entity.Property(e => e.IsOnline)
                .HasComment("đặt khám online")
                .HasColumnName("is_online");
            entity.Property(e => e.IsOpd)
                .HasComment("ngoại trú")
                .HasColumnName("is_opd");
            entity.Property(e => e.IsQmsCheckin)
                .HasDefaultValueSql("1")
                .HasComment("check in qms")
                .HasColumnName("is_qms_checkin");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.RoomCode)
                .HasComment("mã phòng")
                .HasColumnType("character varying")
                .HasColumnName("room_code");
            entity.Property(e => e.RoomName)
                .HasComment("tên phòng")
                .HasColumnType("character varying")
                .HasColumnName("room_name");
            entity.Property(e => e.SpecialistId)
                .HasComment("chuyên khoa")
                .HasColumnName("specialist_id");
            entity.Property(e => e.TimeAvg)
                .HasComment("thời gian trung bình")
                .HasColumnName("time_avg");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Area).WithMany(p => p.CategoryRooms)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_area_id_fkey");

            entity.HasOne(d => d.Building).WithMany(p => p.CategoryRooms)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_building_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryRooms)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_department_id_fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.CategoryRooms)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_specialist_id_fkey");
        });

        modelBuilder.Entity<CategoryRoomBed>(entity =>
        {
            entity.HasKey(e => e.CategoryRoomBedId).HasName("CategoryRoom_Bed_pkey");

            entity.ToTable("CategoryRoom_Bed", tb => tb.HasComment("Quản lý danh mục phòng giường"));

            entity.Property(e => e.CategoryRoomBedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("category_room_bed_id");
            entity.Property(e => e.BedNumberId)
                .HasComment("số hiệu giường")
                .HasColumnName("bed_number_id");
            entity.Property(e => e.BedService2Id)
                .HasComment("tên dịch vụ giường tự chọn")
                .HasColumnName("bed_service_2_id");
            entity.Property(e => e.BedServiceId)
                .HasComment("tên dịch vụ giường thường")
                .HasColumnName("bed_service_id");
            entity.Property(e => e.BedTypeId)
                .HasComment("loại giường")
                .HasColumnName("bed_type_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.FromDate)
                .HasComment("từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.IsBedType).HasColumnName("is_bed_type");
            entity.Property(e => e.IsPayment)
                .HasComment("tự trả")
                .HasColumnName("is_payment");
            entity.Property(e => e.PatientId)
                .HasComment("bệnh nhân")
                .HasColumnName("patient_id");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.RoomId)
                .HasComment("phòng")
                .HasColumnName("room_id");
            entity.Property(e => e.SetupMedicalRecordId)
                .HasComment("hồ sơ bệnh án")
                .HasColumnName("setup_medical_record_id");
            entity.Property(e => e.ToDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("to_date");

            entity.HasOne(d => d.BedNumber).WithMany(p => p.CategoryRoomBeds)
                .HasForeignKey(d => d.BedNumberId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_Bed_bed_number_id_fkey");

            entity.HasOne(d => d.BedService2).WithMany(p => p.CategoryRoomBedBedService2s)
                .HasForeignKey(d => d.BedService2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_Bed_bed_service_2_id_fkey");

            entity.HasOne(d => d.BedService).WithMany(p => p.CategoryRoomBedBedServices)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_Bed_bed_service_id_fkey");

            entity.HasOne(d => d.BedType).WithMany(p => p.CategoryRoomBeds)
                .HasForeignKey(d => d.BedTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_Bed_bed_type_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.CategoryRoomBeds)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_Bed_patient_id_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.CategoryRoomBeds)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_Bed_patient_reception_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryRoomBeds)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryRoom_Bed_room_id_fkey");
        });

        modelBuilder.Entity<CategoryRoute>(entity =>
        {
            entity.HasKey(e => e.RoutesId).HasName("CategoryRoutes_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục đường dùng"));

            entity.Property(e => e.RoutesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("routes_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DisplayOrder)
                .HasComment("thứ tự hiển thị")
                .HasColumnName("display_order");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.RoutesCode)
                .HasComment("mã đường dùng")
                .HasColumnType("character varying")
                .HasColumnName("routes_code");
            entity.Property(e => e.RoutesName)
                .HasComment("tên đường dùng")
                .HasColumnType("character varying")
                .HasColumnName("routes_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryScreenKiosk>(entity =>
        {
            entity.HasKey(e => e.ScreenKioskId).HasName("CategoryScreenKiosk_pkey");

            entity.ToTable("CategoryScreenKiosk", tb => tb.HasComment("Danh mục màn hình kiosk"));

            entity.Property(e => e.ScreenKioskId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("screen_kiosk_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsOrder).HasColumnName("is_order");
            entity.Property(e => e.ScreenKioskName)
                .HasColumnType("character varying")
                .HasColumnName("screen_kiosk_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryScreenPrint>(entity =>
        {
            entity.HasKey(e => e.ScreenPrintId).HasName("CategoryScreenPrint_pkey");

            entity.ToTable("CategoryScreenPrint", tb => tb.HasComment("danh mic màn hình phiếu in"));

            entity.Property(e => e.ScreenPrintId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("screen_print_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ScreenPrintCode)
                .HasComment("mã màn hình")
                .HasColumnType("character varying")
                .HasColumnName("screen_print_code");
            entity.Property(e => e.ScreenPrintName)
                .HasComment("tên màn hình")
                .HasColumnType("character varying")
                .HasColumnName("screen_print_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryScreeningExamination>(entity =>
        {
            entity.HasKey(e => e.ScreeningExaminationId).HasName("CategoryScreeningExamination_pkey");

            entity.ToTable("CategoryScreeningExamination", tb => tb.HasComment("Khám sàng lọc"));

            entity.Property(e => e.ScreeningExaminationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("screening_examination_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DataExamination)
                .HasColumnType("jsonb")
                .HasColumnName("data_examination");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithMany(p => p.CategoryScreeningExaminations)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryScreeningExamination_account_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.CategoryScreeningExaminations)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryScreeningExamination_patient_designate_service_id_fkey");
        });

        modelBuilder.Entity<CategoryService>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("CategoryService_pkey");

            entity.ToTable("CategoryService", tb => tb.HasComment("Danh mục dịch vụ"));

            entity.HasIndex(e => e.ServiceName, "CategoryService_service_name_key").IsUnique();

            entity.Property(e => e.ServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("service_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ServiceName)
                .HasColumnType("character varying")
                .HasColumnName("service_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryService_concept_id_fkey");
        });

        modelBuilder.Entity<CategoryServiceOfPackage>(entity =>
        {
            entity.HasKey(e => e.ServiceOfPackageId).HasName("CategoryServiceOfPackage_pkey");

            entity.ToTable("CategoryServiceOfPackage", tb => tb.HasComment("Dịch vụ trong gói"));

            entity.Property(e => e.ServiceOfPackageId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("service_of_package_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DosageId).HasColumnName("dosage_id");
            entity.Property(e => e.IsActive)
                .HasComment("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsExemptions).HasColumnName("is_exemptions");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.IsPay).HasColumnName("is_pay");
            entity.Property(e => e.PackageServiceId).HasColumnName("package_service_id");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.QtyDefault).HasColumnName("qty_default");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Dosage).WithMany(p => p.CategoryServiceOfPackages)
                .HasForeignKey(d => d.DosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryServiceOfPackage_dosage_id_fkey");

            entity.HasOne(d => d.PackageService).WithMany(p => p.CategoryServiceOfPackages)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryServiceOfPackage_package_service_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.CategoryServiceOfPackages)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryServiceOfPackage_patient_designate_service_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.CategoryServiceOfPackages)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryServiceOfPackage_product_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategoryServiceOfPackages)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryServiceOfPackage_room_id_fkey");
        });

        modelBuilder.Entity<CategorySetUpDesignatedWarehouse>(entity =>
        {
            entity.HasKey(e => e.SetUpDesignatedWareHouseId).HasName("CategorySetUpDesignatedWarehouse_pkey");

            entity.ToTable("CategorySetUpDesignatedWarehouse", tb => tb.HasComment("Thiết lập kho chỉ định"));

            entity.Property(e => e.SetUpDesignatedWareHouseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("set_up_designated_ware_house_id");
            entity.Property(e => e.AccountId)
                .HasComment("tài khoản")
                .HasColumnName("account_id");
            entity.Property(e => e.ConceptId)
                .HasComment("loại dv")
                .HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa nb")
                .HasColumnName("department_id");
            entity.Property(e => e.DesignatedDepartmentId)
                .HasComment("khoa chỉ định")
                .HasColumnName("designated_department_id");
            entity.Property(e => e.Ipd)
                .HasComment("nội trú")
                .HasColumnName("ipd");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsEmergency)
                .HasComment("cấp cứu")
                .HasColumnName("is_emergency");
            entity.Property(e => e.IsSubclinical)
                .HasComment("cận lâm sàng")
                .HasColumnName("is_subclinical");
            entity.Property(e => e.ObjectId)
                .HasComment("đối tượng")
                .HasColumnName("object_id");
            entity.Property(e => e.ObjectTypeId)
                .HasComment("loại đối tượng")
                .HasColumnName("object_type_id");
            entity.Property(e => e.PiorityLvl)
                .HasComment("mức độ ưu tiên")
                .HasColumnName("piority_lvl");
            entity.Property(e => e.PositionId)
                .HasComment("chức vụ")
                .HasColumnName("position_id");
            entity.Property(e => e.RoomId)
                .HasComment("phòng")
                .HasColumnName("room_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.WarehouseId)
                .HasComment("Kho")
                .HasColumnName("warehouse_id");

            entity.HasOne(d => d.Account).WithMany(p => p.CategorySetUpDesignatedWarehouses)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_account_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategorySetUpDesignatedWarehouses)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_concept_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategorySetUpDesignatedWarehouseDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_department_id_fkey");

            entity.HasOne(d => d.DesignatedDepartment).WithMany(p => p.CategorySetUpDesignatedWarehouseDesignatedDepartments)
                .HasForeignKey(d => d.DesignatedDepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_designated_department_id_fk");

            entity.HasOne(d => d.Object).WithMany(p => p.CategorySetUpDesignatedWarehouses)
                .HasForeignKey(d => d.ObjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_object_id_fkey");

            entity.HasOne(d => d.ObjectType).WithMany(p => p.CategorySetUpDesignatedWarehouses)
                .HasForeignKey(d => d.ObjectTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_object_type_id_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.CategorySetUpDesignatedWarehouses)
                .HasForeignKey(d => d.PositionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_position_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CategorySetUpDesignatedWarehouses)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_room_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.CategorySetUpDesignatedWarehouses)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpDesignatedWarehouse_warehouse_id_fkey");
        });

        modelBuilder.Entity<CategorySetUpSign>(entity =>
        {
            entity.HasKey(e => e.SetUpSignId).HasName("CategorySetUpSign_pkey");

            entity.ToTable("CategorySetUpSign", tb => tb.HasComment("Danh mục thiết lập chân ký"));

            entity.Property(e => e.SetUpSignId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("set_up_sign_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ImageHeight).HasColumnName("image_height");
            entity.Property(e => e.ImageWidth).HasColumnName("image_width");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.NumberSign)
                .HasColumnType("character varying")
                .HasColumnName("number_sign");
            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.UpdateAt).HasColumnName("update_at");

            entity.HasOne(d => d.Report).WithMany(p => p.CategorySetUpSigns)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetUpSign_report_id_fkey");
        });

        modelBuilder.Entity<CategorySetting>(entity =>
        {
            entity.HasKey(e => e.SettingId).HasName("CategorySetting_pkey");

            entity.ToTable("CategorySetting", tb => tb.HasComment("cấu hình "));

            entity.Property(e => e.SettingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_id");
            entity.Property(e => e.LanSo)
                .HasComment("lần số")
                .HasColumnType("jsonb")
                .HasColumnName("lan_so");
            entity.Property(e => e.MaDonThuoc)
                .HasComment("Mã đơn thuốc")
                .HasColumnType("jsonb")
                .HasColumnName("ma_don_thuoc");
            entity.Property(e => e.MaNgoaiTru)
                .HasComment("mã ngoại trú")
                .HasColumnType("jsonb")
                .HasColumnName("ma_ngoai_tru");
            entity.Property(e => e.MaNguoiBenh)
                .HasComment("mã người bệnh")
                .HasColumnType("jsonb")
                .HasColumnName("ma_nguoi_benh");
            entity.Property(e => e.MaSoMeMaSoTreSoSinh)
                .HasComment("Mã số mẹ Mã số trẻ sơ sinh")
                .HasColumnType("jsonb")
                .HasColumnName("ma_so_me_ma_so_tre_so_sinh");
            entity.Property(e => e.MaTiepDonNbMaHoSo)
                .HasComment("mã tiếp đón nb/ sô hồ sơ")
                .HasColumnType("jsonb")
                .HasColumnName("ma_tiep_don_nb_ma_ho_so");
            entity.Property(e => e.MaYTe)
                .HasComment("mã y tế")
                .HasColumnType("jsonb")
                .HasColumnName("ma_y_te");
            entity.Property(e => e.So)
                .HasComment("số")
                .HasColumnType("jsonb")
                .HasColumnName("so");
            entity.Property(e => e.SoGiayChuyenTuyen)
                .HasComment("Số: ……../20…/GCT Số Hồ sơ: …… Vào sổ chuyển tuyến số")
                .HasColumnType("jsonb")
                .HasColumnName("so_giay_chuyen_tuyen");
            entity.Property(e => e.SoGkskSoGksklx)
                .HasComment("Số:    /GKSK-......... Số:        /GKSKLX-...")
                .HasColumnType("jsonb")
                .HasColumnName("so_gksk_so_gksklx");
            entity.Property(e => e.SoLuuTru)
                .HasComment("số lưu trữ")
                .HasColumnType("jsonb")
                .HasColumnName("so_luu_tru");
            entity.Property(e => e.SoQuyenSoSoHoSo)
                .HasComment("Số:…………                        Quyển số…            Số Hồ sơ:")
                .HasColumnType("jsonb")
                .HasColumnName("so_quyen_so_so_ho_so");
            entity.Property(e => e.SoSeri)
                .HasComment("số seri")
                .HasColumnType("jsonb")
                .HasColumnName("so_seri");
            entity.Property(e => e.SoSeriSo)
                .HasComment("Số Seri……… Số:………../………….")
                .HasColumnType("jsonb")
                .HasColumnName("so_seri_so");
            entity.Property(e => e.SoVaoVienSoBenhAn)
                .HasComment("số vào viện số bệnh án")
                .HasColumnType("jsonb")
                .HasColumnName("so_vao_vien_so_benh_an");
        });

        modelBuilder.Entity<CategorySettingBedChoose>(entity =>
        {
            entity.HasKey(e => e.SettingBedChooseId).HasName("CategorySettingBedChoose_pkey");

            entity.ToTable("CategorySettingBedChoose", tb => tb.HasComment("Thiết lập chọn giường"));

            entity.Property(e => e.SettingBedChooseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_bed_choose_id");
            entity.Property(e => e.AfterDayOperationRooms)
                .HasComment("số ngày sau mổ")
                .HasColumnName("after_day_operation_rooms");
            entity.Property(e => e.ApplyCase)
                .HasComment("trường hợp áp dụng 1:trước phẫu thuật 2 sau phẫu thuật 3 không phẫu thuật")
                .HasColumnName("apply_case");
            entity.Property(e => e.BedServiceId)
                .HasComment("dịch vụ giường")
                .HasColumnName("bed_service_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa chỉ định")
                .HasColumnName("department_id");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsIntensiveCare)
                .HasComment("hồi sức tích cực")
                .HasColumnName("is_intensive_care");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BedService).WithMany(p => p.CategorySettingBedChooses)
                .HasForeignKey(d => d.BedServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySettingBedChoose_bed_service_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategorySettingBedChooses)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySettingBedChoose_department_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategorySettingBedChooses)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySettingBedChoose_group_service_lvl1_fkey");
        });

        modelBuilder.Entity<CategorySettingConditionDirectDepartment>(entity =>
        {
            entity.HasKey(e => e.SettingConditionDirectDepartmentId).HasName("CategorySettingConditionDirectDepartment_pkey");

            entity.ToTable("CategorySettingConditionDirectDepartment", tb => tb.HasComment("Thiết lập điều kiện chuyển khoa ra viện"));

            entity.Property(e => e.SettingConditionDirectDepartmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_condition_direct_department_id");
            entity.Property(e => e.ChangeBy).HasColumnName("change_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DirectFromSurgeryDepartment)
                .HasComment("chuyển khoa từ khoa phẫu thuật")
                .HasColumnName("direct_from_surgery_department");
            entity.Property(e => e.DirectToNormalDepartment)
                .HasComment("chuyển khoa tới thường")
                .HasColumnName("direct_to_normal_department");
            entity.Property(e => e.DirectToSurgeryDepartment)
                .HasComment("chuyển khoa tới phẫu thuật")
                .HasColumnName("direct_to_surgery_department");
            entity.Property(e => e.DischargeFromNormalDepartment)
                .HasComment("ra viện từ khoa thường")
                .HasColumnName("discharge_from_normal_department");
            entity.Property(e => e.DischargeFromSurgeryDepartment)
                .HasComment("ra viện từ khoa phẫu thuật")
                .HasColumnName("discharge_from_surgery_department");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.SettingConditionDirectDepartmentName)
                .HasComment("tên thiết lập")
                .HasColumnName("setting_condition_direct_department_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.SettingConditionDirectDepartmentNameNavigation).WithMany(p => p.CategorySettingConditionDirectDepartments)
                .HasForeignKey(d => d.SettingConditionDirectDepartmentName)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySettingConditionDirec_setting_condition_direct_dep_fkey");
        });

        modelBuilder.Entity<CategorySettingGeneral>(entity =>
        {
            entity.HasKey(e => e.SettingGeneralId).HasName("CategorySettingGeneral_pkey");

            entity.ToTable("CategorySettingGeneral", tb => tb.HasComment("Thiết lập chung"));

            entity.Property(e => e.SettingGeneralId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_general_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.SettingGeneralCode)
                .HasColumnType("character varying")
                .HasColumnName("setting_general_code");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySettingPoint>(entity =>
        {
            entity.HasKey(e => e.SettingPointId).HasName("CategorySettingPoint_pkey");

            entity.ToTable("CategorySettingPoint", tb => tb.HasComment("thiết lập tích điểm"));

            entity.Property(e => e.SettingPointId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_point_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CostExaminePoint)
                .HasComment("chi phí khám bệnh (điểm)")
                .HasColumnName("cost_examine_point");
            entity.Property(e => e.CostExaminePrice)
                .HasComment("chi phí khám bệnh (đ)")
                .HasColumnName("cost_examine_price");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ExaminePerTimes)
                .HasComment("số lần khám (lần)")
                .HasColumnName("examine_per_times");
            entity.Property(e => e.ExaminePerTimesPoint)
                .HasComment("số lần khám (điểm)")
                .HasColumnName("examine_per_times_point");
            entity.Property(e => e.IntrolduceNumberPoint)
                .HasComment("số lần giới thiệu (điểm)")
                .HasColumnName("introlduce_number_point");
            entity.Property(e => e.IntrolduceNumberTimes)
                .HasComment("số lượt giới thiệu (lần)")
                .HasColumnName("introlduce_number_times");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PaymentPoint)
                .HasComment("thanh toán (điểm)")
                .HasColumnName("payment_point");
            entity.Property(e => e.PaymentPrice)
                .HasComment("thanh toán(đ)")
                .HasColumnName("payment_price");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySettingReceiptVote>(entity =>
        {
            entity.HasKey(e => e.SettingReceiptVoteId).HasName("CategorySettingReceiptVote_pkey");

            entity.ToTable("CategorySettingReceiptVote", tb => tb.HasComment("Thiết lập phiếu trả"));

            entity.Property(e => e.SettingReceiptVoteId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_receipt_vote_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreateVoteOdd)
                .HasComment("Tạo phiếu với số lượng lẻ")
                .HasColumnName("create_vote_odd");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.CreatedVoteTime)
                .HasComment("Thời gian tạo phiếu 1: thời gian chỉ định 2 thời gian thực hiện")
                .HasColumnName("created_vote_time");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ReceiptVoteOdd)
                .HasComment("trả phiếu với số lượng lẻ")
                .HasColumnName("receipt_vote_odd");
            entity.Property(e => e.SeparateReceiptCode)
                .HasComment("tách phiếu theo mã phiếu lĩnh")
                .HasColumnName("separate_receipt_code");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySettingScreen>(entity =>
        {
            entity.HasKey(e => e.SettingScreenId).HasName("CategorySettingScreen_pkey");

            entity.ToTable("CategorySettingScreen", tb => tb.HasComment("Danh sách thiết lập màn hình"));

            entity.Property(e => e.SettingScreenId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_screen_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.SettingScreenName)
                .HasComment("Tên màn hình và tên phiếu khi parent_id != null")
                .HasColumnType("character varying")
                .HasColumnName("setting_screen_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySettingSeparateMergeService>(entity =>
        {
            entity.HasKey(e => e.SettingSeparateMergeServiceId).HasName("CategorySettingSeparateMergeService_pkey");

            entity.ToTable("CategorySettingSeparateMergeService", tb => tb.HasComment("Danh sách thiết lập dịch vụ tách gộp"));

            entity.Property(e => e.SettingSeparateMergeServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_separate_merge_service_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.SettingSeparateMergeServiceName)
                .HasComment("tên các dịch vụ")
                .HasColumnType("character varying")
                .HasColumnName("setting_separate_merge_service_name");
            entity.Property(e => e.SettingSeparateMergeServiceType)
                .HasComment("1: xét nghiệm 2 là chỉ đinh dvkt")
                .HasColumnName("setting_separate_merge_service_type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySetupMedicalRecord>(entity =>
        {
            entity.HasKey(e => e.SetupMedicalRecordId).HasName("CategorySetupMedicalRecord_pkey");

            entity.ToTable("CategorySetupMedicalRecord", tb => tb.HasComment("Danh sách lập bệnh án"));

            entity.Property(e => e.SetupMedicalRecordId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setup_medical_record_id");
            entity.Property(e => e.AttributeId)
                .HasComment("loại hình kb, cb")
                .HasColumnName("attribute_id");
            entity.Property(e => e.BasicInformationIpdId)
                .HasComment("thông tin bệnh nhân")
                .HasColumnName("basic_information_ipd_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.CodeReferId)
                .HasComment("mã liên kết người bệnh từ patient_id lấy ra code")
                .HasColumnName("code_refer_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa nhập viện")
                .HasColumnName("department_id");
            entity.Property(e => e.HospitalDischargeInfomationId)
                .HasComment("thông tin ra viện")
                .HasColumnName("hospital_discharge_infomation_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái")
                .HasColumnName("is_status");
            entity.Property(e => e.MedicalRecordType)
                .HasComment("loại bệnh án")
                .HasColumnName("medical_record_type");
            entity.Property(e => e.ObjectId)
                .HasComment("loại đối tượng")
                .HasColumnName("object_id");
            entity.Property(e => e.SetupMedicalRecordCode)
                .HasComment("mã bệnh án")
                .HasColumnType("character varying")
                .HasColumnName("setup_medical_record_code");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Attribute).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_attribute_id_fkey");

            entity.HasOne(d => d.BasicInformationIpd).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.BasicInformationIpdId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_basic_information_ipd_id_fkey");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_basic_information_patient_id_fkey");

            entity.HasOne(d => d.CodeRefer).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.CodeReferId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_code_refer_id_fkey");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_created_by_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_department_id_fkey");

            entity.HasOne(d => d.HospitalDischargeInfomation).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.HospitalDischargeInfomationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_hospital_discharge_infomation_id_");

            entity.HasOne(d => d.MedicalRecordTypeNavigation).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.MedicalRecordType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_medical_record_type_fkey");

            entity.HasOne(d => d.Object).WithMany(p => p.CategorySetupMedicalRecords)
                .HasForeignKey(d => d.ObjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySetupMedicalRecord_object_id_fkey");
        });

        modelBuilder.Entity<CategoryShift>(entity =>
        {
            entity.HasKey(e => e.ShiftId).HasName("CategoryShift_pkey");

            entity.ToTable("CategoryShift", tb => tb.HasComment("Danh mục ca làm việc"));

            entity.Property(e => e.ShiftId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("shift_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.FromDate)
                .HasComment("từ ngày")
                .HasColumnName("from_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsDiffWork)
                .HasComment("khác ngày làm việc")
                .HasColumnName("is_diff_work");
            entity.Property(e => e.ShiftCode)
                .HasComment("mã ca làm việc")
                .HasColumnType("character varying")
                .HasColumnName("shift_code");
            entity.Property(e => e.ShiftName)
                .HasComment("tên mã làm việc")
                .HasColumnType("character varying")
                .HasColumnName("shift_name");
            entity.Property(e => e.ToDate)
                .HasComment("đến ngày")
                .HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySignLevel>(entity =>
        {
            entity.HasKey(e => e.SignLevelId).HasName("CategorySignLevel_pkey");

            entity.ToTable("CategorySignLevel", tb => tb.HasComment("Danh mục cấp ký"));

            entity.Property(e => e.SignLevelId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("sign_level_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.NameSign)
                .HasColumnType("character varying")
                .HasColumnName("name_sign");
            entity.Property(e => e.RoleSignId).HasColumnName("role_sign_id");
            entity.Property(e => e.SetUpSignId).HasColumnName("set_up_sign_id");
            entity.Property(e => e.SignTypeAttributeId).HasColumnName("sign_type_attribute_id");

            entity.HasOne(d => d.RoleSign).WithMany(p => p.CategorySignLevels)
                .HasForeignKey(d => d.RoleSignId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySignLevel_role_sign_id_fkey");

            entity.HasOne(d => d.SetUpSign).WithMany(p => p.CategorySignLevels)
                .HasForeignKey(d => d.SetUpSignId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySignLevel_set_up_sign_id_fkey");
        });

        modelBuilder.Entity<CategorySpeakerCalling>(entity =>
        {
            entity.HasKey(e => e.SpeakerCallingId).HasName("CategorySpeakerCalling_pkey");

            entity.ToTable("CategorySpeakerCalling", tb => tb.HasComment("Danh mục loa gọi số"));

            entity.Property(e => e.SpeakerCallingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("speaker_calling_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ReceptionType)
                .HasComment("loại tiếp đón")
                .HasColumnName("reception_type");
            entity.Property(e => e.SpeakerCallingCode)
                .HasComment("mã loa gọi số")
                .HasColumnType("character varying")
                .HasColumnName("speaker_calling_code");
            entity.Property(e => e.SpeakerCallingName)
                .HasComment("tên loa gọi số")
                .HasColumnType("character varying")
                .HasColumnName("speaker_calling_name");
            entity.Property(e => e.SpeakerCallingType)
                .HasComment("hình thức phát loa")
                .HasColumnName("speaker_calling_type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Department).WithMany(p => p.CategorySpeakerCallings)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySpeakerCalling_department_id_fkey");

            entity.HasOne(d => d.ReceptionTypeNavigation).WithMany(p => p.CategorySpeakerCallingReceptionTypeNavigations)
                .HasForeignKey(d => d.ReceptionType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySpeakerCalling_reception_type_fkey");

            entity.HasOne(d => d.SpeakerCallingTypeNavigation).WithMany(p => p.CategorySpeakerCallingSpeakerCallingTypeNavigations)
                .HasForeignKey(d => d.SpeakerCallingType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySpeakerCalling_speaker_calling_type_fkey");
        });

        modelBuilder.Entity<CategorySpecialist>(entity =>
        {
            entity.HasKey(e => e.SpecialistId).HasName("CategorySpecialist_pkey");

            entity.ToTable("CategorySpecialist", tb => tb.HasComment("Danh mục chuyên khoa"));

            entity.Property(e => e.SpecialistId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("specialist_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.Logo).HasColumnName("logo");
            entity.Property(e => e.SpecialistCode)
                .HasComment("mã chuyên khoa")
                .HasColumnType("character varying")
                .HasColumnName("specialist_code");
            entity.Property(e => e.SpecialistName)
                .HasComment("tên chuyên khoa")
                .HasColumnType("character varying")
                .HasColumnName("specialist_name");
            entity.Property(e => e.SpecialistNote)
                .HasComment("ghi chú")
                .HasColumnType("character varying")
                .HasColumnName("specialist_note");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySpecimen>(entity =>
        {
            entity.HasKey(e => e.SpecimensId).HasName("CategorySpecimens_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục bệnh phẩm"));

            entity.Property(e => e.SpecimensId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("specimens_id");
            entity.Property(e => e.ChangeBy).HasColumnName("change_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.SpecimensCode)
                .HasColumnType("character varying")
                .HasColumnName("specimens_code");
            entity.Property(e => e.SpecimensName)
                .HasColumnType("character varying")
                .HasColumnName("specimens_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySubGroupFirstDisease>(entity =>
        {
            entity.HasKey(e => e.SubGroupFirstDiseaseId).HasName("CategorySubGroupFirstDisease_pkey");

            entity.ToTable("CategorySubGroupFirstDisease", tb => tb.HasComment("Danh mục nhóm bệnh phụ 1"));

            entity.Property(e => e.SubGroupFirstDiseaseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("sub_group_first_disease_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseChapterId).HasColumnName("disease_chapter_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsTypeIcd)
                .HasDefaultValueSql("0")
                .HasColumnName("is_type_icd");
            entity.Property(e => e.MainDiseaseGroupId).HasColumnName("main_disease_group_id");
            entity.Property(e => e.SubGroupFirstDiseaseCode)
                .HasColumnType("character varying")
                .HasColumnName("sub_group_first_disease_code");
            entity.Property(e => e.SubGroupFirstDiseaseName)
                .HasColumnType("character varying")
                .HasColumnName("sub_group_first_disease_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DiseaseChapter).WithMany(p => p.CategorySubGroupFirstDiseases)
                .HasForeignKey(d => d.DiseaseChapterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySubGroupFirstDisease_disease_chapter_id_fkey");

            entity.HasOne(d => d.MainDiseaseGroup).WithMany(p => p.CategorySubGroupFirstDiseases)
                .HasForeignKey(d => d.MainDiseaseGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySubGroupFirstDisease_main_disease_group_id_fkey");
        });

        modelBuilder.Entity<CategorySubGroupSecondDisease>(entity =>
        {
            entity.HasKey(e => e.SubGroupSecondDiseaseId).HasName("CategorySubGroupSecondDisease_pkey");

            entity.ToTable("CategorySubGroupSecondDisease", tb => tb.HasComment("nhóm bệnh phụ 2"));

            entity.Property(e => e.SubGroupSecondDiseaseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("sub_group_second_disease_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseChapterId).HasColumnName("disease_chapter_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsTypeIcd)
                .HasDefaultValueSql("0")
                .HasColumnName("is_type_icd");
            entity.Property(e => e.MainDiseaseGroupId).HasColumnName("main_disease_group_id");
            entity.Property(e => e.SubGroupFirstDiseaseId).HasColumnName("sub_group_first_disease_id");
            entity.Property(e => e.SubGroupSecondDiseaseCode)
                .HasColumnType("character varying")
                .HasColumnName("sub_group_second_disease_code");
            entity.Property(e => e.SubGroupSecondDiseaseName)
                .HasColumnType("character varying")
                .HasColumnName("sub_group_second_disease_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DiseaseChapter).WithMany(p => p.CategorySubGroupSecondDiseases)
                .HasForeignKey(d => d.DiseaseChapterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySubGroupSecondDisease_disease_chapter_id_fkey");

            entity.HasOne(d => d.MainDiseaseGroup).WithMany(p => p.CategorySubGroupSecondDiseases)
                .HasForeignKey(d => d.MainDiseaseGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySubGroupSecondDisease_main_disease_group_id_fkey");

            entity.HasOne(d => d.SubGroupFirstDisease).WithMany(p => p.CategorySubGroupSecondDiseases)
                .HasForeignKey(d => d.SubGroupFirstDiseaseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySubGroupSecondDisease_sub_group_first_disease_id_fkey");
        });

        modelBuilder.Entity<CategorySubjectOfExemption>(entity =>
        {
            entity.HasKey(e => e.SubjectOfExemptionId).HasName("CategorySubjectOfExemption_pkey");

            entity.ToTable("CategorySubjectOfExemption", tb => tb.HasComment("Danh mục đối tượng miễn giảm"));

            entity.Property(e => e.SubjectOfExemptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("subject_of_exemption_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.PercentDiscount)
                .HasComment("phần trăm")
                .HasColumnName("percent_discount");
            entity.Property(e => e.SubjectOfExemptionCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("subject_of_exemption_code");
            entity.Property(e => e.SubjectOfExemptionName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("subject_of_exemption_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySubjectOfInsurance>(entity =>
        {
            entity.HasKey(e => e.SubjectOfInsuranceId).HasName("CategorySubjectOfInsurance_pkey");

            entity.ToTable("CategorySubjectOfInsurance", tb => tb.HasComment("Danh mục đối tượng hưởng bảo hiểm"));

            entity.Property(e => e.SubjectOfInsuranceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("subject_of_insurance_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.PercentInsurance)
                .HasComment("số % hưởng bh")
                .HasColumnName("percent_insurance");
            entity.Property(e => e.SubjectOfInsuranceName)
                .HasComment("tên 3 ký tự đầu của thẻ bh")
                .HasColumnType("character varying")
                .HasColumnName("subject_of_insurance_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategorySummary15Day>(entity =>
        {
            entity.HasKey(e => e.Summary15DaysId).HasName("CategorySummary15Day_pkey");

            entity.ToTable("CategorySummary15Day", tb => tb.HasComment("Phiếu sơ kết 15 ngày"));

            entity.Property(e => e.Summary15DaysId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("summary_15_days_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.DiagnoseNameDetailId).HasColumnName("diagnose_name_detail_id");
            entity.Property(e => e.DiagnoseNameId).HasColumnName("diagnose_name_id");
            entity.Property(e => e.DiagnoseNameText).HasColumnName("diagnose_name_text");
            entity.Property(e => e.FromDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("from_date");
            entity.Property(e => e.InvestigationProcess)
                .HasComment("Quá trình điều trị")
                .HasColumnName("investigation_process");
            entity.Property(e => e.LabClinical)
                .HasComment("Xét nghiệm cận lâm sàng")
                .HasColumnName("lab_clinical");
            entity.Property(e => e.ProcessTreatment)
                .HasComment("Diễn biến lâm sàng trong đợt điều trị")
                .HasColumnName("process_treatment");
            entity.Property(e => e.ResultEvaluation)
                .HasComment("Đánh giá kết quả")
                .HasColumnName("result_evaluation");
            entity.Property(e => e.ToDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("to_date");
            entity.Property(e => e.TreatmentDirection)
                .HasComment("Hướng điều trị và tiên lượng")
                .HasColumnName("treatment_direction");

            entity.HasOne(d => d.DiagnoseName).WithMany(p => p.CategorySummary15Days)
                .HasForeignKey(d => d.DiagnoseNameId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySummary15Day_diagnose_name_id_fkey");
        });

        modelBuilder.Entity<CategorySummary15DayDiagnose>(entity =>
        {
            entity.HasKey(e => e.Summary15DayDiagnoseId).HasName("CategorySummary15Day_Diagnose_pkey");

            entity.ToTable("CategorySummary15Day_Diagnose", tb => tb.HasComment("sơ kết 15 ngày  - chẩn đóa kèm theo"));

            entity.Property(e => e.Summary15DayDiagnoseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("summary_15_day_diagnose_id");
            entity.Property(e => e.DiagnoseNameId).HasColumnName("diagnose_name_id");
            entity.Property(e => e.DiagnoseNameText).HasColumnName("diagnose_name_text");
            entity.Property(e => e.Summary15DayId).HasColumnName("summary_15_day_id");

            entity.HasOne(d => d.DiagnoseName).WithMany(p => p.CategorySummary15DayDiagnoses)
                .HasForeignKey(d => d.DiagnoseNameId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySummary15Day_Diagnose_diagnose_name_id_fkey");

            entity.HasOne(d => d.Summary15Day).WithMany(p => p.CategorySummary15DayDiagnoses)
                .HasForeignKey(d => d.Summary15DayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySummary15Day_Diagnose_summary_15_day_id_fkey");
        });

        modelBuilder.Entity<CategorySupplieBySize>(entity =>
        {
            entity.HasKey(e => e.SupplieBySizeId).HasName("CategorySupplieBySize_pkey");

            entity.ToTable("CategorySupplieBySize", tb => tb.HasComment("Danh mục vật tư theo kích cỡ"));

            entity.Property(e => e.SupplieBySizeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("supplie_by_size_id");
            entity.Property(e => e.BidName)
                .HasColumnType("character varying")
                .HasColumnName("bid_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.SupplieBySizeCode)
                .HasColumnType("character varying")
                .HasColumnName("supplie_by_size_code");
            entity.Property(e => e.SuppliesBySizeName)
                .HasColumnType("character varying")
                .HasColumnName("supplies_by_size_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategorySupply>(entity =>
        {
            entity.HasKey(e => e.SuppliesId).HasName("CategorySupplies_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục vật tư"));

            entity.Property(e => e.SuppliesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("supplies_id");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.BidDecision)
                .HasComment("quyết định thầu")
                .HasColumnType("character varying")
                .HasColumnName("bid_decision");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CountriesSuppliesId)
                .HasComment("Nước sản xuất")
                .HasColumnName("countries_supplies_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.GroupMaterialId)
                .HasComment("nhóm vật tư")
                .HasColumnName("group_material_id");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("Nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("Nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("Nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.InsuranceCeiling)
                .HasComment("Trần bảo hiểm")
                .HasColumnName("insurance_ceiling");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsHightech)
                .HasComment("Kỹ thuật cao")
                .HasColumnName("is_hightech");
            entity.Property(e => e.IsInsurance)
                .HasComment("1: bảo hiểm 0 : không bảo hiểm")
                .HasColumnName("is_insurance");
            entity.Property(e => e.IsKitSupplies)
                .HasComment("Vật tư bộ")
                .HasColumnName("is_kit_supplies");
            entity.Property(e => e.IsNoCharge)
                .HasComment("Không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsRequestConsultation).HasColumnName("is_request_consultation");
            entity.Property(e => e.IsStent)
                .HasComment("Stent phủ thuốc")
                .HasColumnName("is_stent");
            entity.Property(e => e.IsSuppliesBySize)
                .HasComment("Vật tư theo kích cỡ")
                .HasColumnName("is_supplies_by_size");
            entity.Property(e => e.IsSuppliesMachine)
                .HasComment("Vật tư chạy máy")
                .HasColumnName("is_supplies_machine");
            entity.Property(e => e.IsSuppliesReuse)
                .HasComment("Vật tư tái sử dụng")
                .HasColumnName("is_supplies_reuse");
            entity.Property(e => e.IsSurgery)
                .HasComment("Thuộc phẫu thuật")
                .HasColumnName("is_surgery");
            entity.Property(e => e.IsYhct).HasColumnName("is_yhct");
            entity.Property(e => e.MaterialCode)
                .HasComment("mã hiệu vật tư")
                .HasColumnType("character varying")
                .HasColumnName("material_code");
            entity.Property(e => e.NumberDayWarningExpired)
                .HasComment("Số ngày cảnh báo HSD")
                .HasColumnName("number_day_warning_expired");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasComment("Tỷ lệ BH thanh toán")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio)
                .HasComment("Tỷ lệ thanh toán dịch vụ")
                .HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceImport)
                .HasComment("Giá nhập")
                .HasColumnName("price_import");
            entity.Property(e => e.PriceInsurance)
                .HasComment("Giá bảo hiểm")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasComment("Giá không bảo hiểm")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.PriceTax)
                .HasComment("giá thuế")
                .HasColumnName("price_tax");
            entity.Property(e => e.ProducterId)
                .HasComment("Nhà sản xuất")
                .HasColumnName("producter_id");
            entity.Property(e => e.RatingCoefficient)
                .HasComment("Hệ số định mức")
                .HasColumnName("rating_coefficient");
            entity.Property(e => e.ReceiptCode)
                .HasComment("mã phiếu lĩnh")
                .HasColumnName("receipt_code");
            entity.Property(e => e.Specifications)
                .HasComment("Quy cách")
                .HasColumnType("character varying")
                .HasColumnName("specifications");
            entity.Property(e => e.SupplierId)
                .HasComment("Nhà cung cấp")
                .HasColumnName("supplier_id");
            entity.Property(e => e.SuppliesCode)
                .HasComment("mã vật tư")
                .HasColumnType("character varying")
                .HasColumnName("supplies_code");
            entity.Property(e => e.SuppliesName)
                .HasComment("tên vật tư")
                .HasColumnType("character varying")
                .HasColumnName("supplies_name");
            entity.Property(e => e.Surcharge)
                .HasComment("Phụ thu")
                .HasColumnName("surcharge");
            entity.Property(e => e.SymbolCode)
                .HasComment("Mã ký hiệu - Tên thương mại")
                .HasColumnType("character varying")
                .HasColumnName("symbol_code");
            entity.Property(e => e.TechnicalSpecifications)
                .HasColumnType("character varying")
                .HasColumnName("technical_specifications");
            entity.Property(e => e.UnitLvl1)
                .HasComment("Đơn vị sơ cấp")
                .HasColumnName("unit_lvl1");
            entity.Property(e => e.UnitLvl2)
                .HasComment("Đơn vị thứ cấp")
                .HasColumnName("unit_lvl2");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategorySupplies)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_concept_id_fkey");

            entity.HasOne(d => d.CountriesSupplies).WithMany(p => p.CategorySupplies)
                .HasForeignKey(d => d.CountriesSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_countries_supplies_id_fkey");

            entity.HasOne(d => d.GroupMaterial).WithMany(p => p.CategorySupplies)
                .HasForeignKey(d => d.GroupMaterialId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_group_material_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategorySupplies)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategorySupplies)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategorySupplies)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_group_service_lvl3_fkey");

            entity.HasOne(d => d.Producter).WithMany(p => p.CategorySupplyProducters)
                .HasForeignKey(d => d.ProducterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_producter_id_fkey");

            entity.HasOne(d => d.ReceiptCodeNavigation).WithMany(p => p.CategorySupplies)
                .HasForeignKey(d => d.ReceiptCode)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_receipt_code_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.CategorySupplySuppliers)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_supplier_id_fkey");

            entity.HasOne(d => d.UnitLvl1Navigation).WithMany(p => p.CategorySupplyUnitLvl1Navigations)
                .HasForeignKey(d => d.UnitLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_unit_lvl1_fkey");

            entity.HasOne(d => d.UnitLvl2Navigation).WithMany(p => p.CategorySupplyUnitLvl2Navigations)
                .HasForeignKey(d => d.UnitLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySupplies_unit_lvl2_fkey");
        });

        modelBuilder.Entity<CategorySurgicalProceduresService>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceId).HasName("CategorySurgicalProceduresService_pkey");

            entity.ToTable("CategorySurgicalProceduresService", tb => tb.HasComment("Danh mục phẫu thuật thủ thuật"));

            entity.Property(e => e.SurgicalProceduresServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ClassificationSurgicalProceduresId)
                .HasComment("Phân loại PTTT")
                .HasColumnName("classification_surgical_procedures_id");
            entity.Property(e => e.ClsImplementUnitMedicalId)
                .HasComment("CSKCB thực hiện CLS")
                .HasColumnName("cls_implement_unit_medical_id");
            entity.Property(e => e.CodePrint)
                .HasColumnType("character varying")
                .HasColumnName("code_print");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DecisionCode)
                .HasComment("mã số quyết định")
                .HasColumnType("character varying")
                .HasColumnName("decision_code");
            entity.Property(e => e.DecisionDate)
                .HasDefaultValueSql("now()")
                .HasComment("ngày quyết định")
                .HasColumnName("decision_date");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasComment("tên tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.ExpiredWarningNumberDay)
                .HasComment("Số ngày cảnh báo HSD")
                .HasColumnName("expired_warning_number_day");
            entity.Property(e => e.FormId).HasColumnName("form_id");
            entity.Property(e => e.Gender)
                .HasComment("Giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.GroupServiceLvl2)
                .HasComment("nhóm dịch vụ cấp 2")
                .HasColumnName("group_service_lvl2");
            entity.Property(e => e.GroupServiceLvl3)
                .HasComment("nhóm dịch vụ cấp 3")
                .HasColumnName("group_service_lvl3");
            entity.Property(e => e.HealthInsurancePriceCode)
                .HasColumnType("character varying")
                .HasColumnName("health_insurance_price_code");
            entity.Property(e => e.InsuranceWarningNumberDay)
                .HasComment("Số ngày cảnh báo kê dịch vụ BHYT")
                .HasColumnName("insurance_warning_number_day");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsBookOnline)
                .HasComment("Đặt khám online")
                .HasColumnName("is_book_online");
            entity.Property(e => e.IsECrCl).HasColumnName("is_eCrCl");
            entity.Property(e => e.IsEGfr).HasColumnName("is_eGFR");
            entity.Property(e => e.IsEditService)
                .HasComment("Cho sửa đổi DV")
                .HasColumnName("is_edit_service");
            entity.Property(e => e.IsExternalPay)
                .HasComment("Thu ngoài")
                .HasColumnName("is_external_pay");
            entity.Property(e => e.IsInsurance).HasColumnName("is_insurance");
            entity.Property(e => e.IsKiosk).HasColumnName("is_kiosk");
            entity.Property(e => e.IsLaterPay)
                .HasComment("Thanh toán sau")
                .HasColumnName("is_later_pay");
            entity.Property(e => e.IsListQtySplit)
                .HasComment("Tách số lượng khi kê")
                .HasColumnName("is_list_qty_split");
            entity.Property(e => e.IsNoCharge)
                .HasComment("Không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsNotImplemnetQtyMutil)
                .HasComment("Không được thực hiện SL nhiều cùng lúc")
                .HasColumnName("is_not_implemnet_qty_mutil");
            entity.Property(e => e.IsRequestConsultation).HasColumnName("is_request_consultation");
            entity.Property(e => e.IsRequestService)
                .HasComment("DV theo yêu cầu")
                .HasColumnName("is_request_service");
            entity.Property(e => e.IsRetrictDepartment)
                .HasComment("Hạn chế khoa chỉ định")
                .HasColumnName("is_retrict_department");
            entity.Property(e => e.IsSplitVoteIndicationDupplicate).HasColumnName("is_split_vote_indication_dupplicate");
            entity.Property(e => e.IsTt35).HasColumnName("is_tt35");
            entity.Property(e => e.IsUseCovid)
                .HasComment("Dùng cho Covid")
                .HasColumnName("is_use_covid");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberTt37).HasColumnName("number_tt37");
            entity.Property(e => e.PaymentInsuranceRatio)
                .HasComment("Tỷ lệ BH thanh toán")
                .HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio)
                .HasComment("Tỷ lệ thanh toán DV")
                .HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceInsurance)
                .HasComment("giá bảo hiểm")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance)
                .HasComment("giá không bảo hiểm")
                .HasColumnName("price_non_insurance");
            entity.Property(e => e.ReportId)
                .HasComment("Tên báo cáo")
                .HasColumnName("report_id");
            entity.Property(e => e.SpecialistId).HasColumnName("specialist_id");
            entity.Property(e => e.Surcharge)
                .HasComment("phụ thu")
                .HasColumnName("surcharge");
            entity.Property(e => e.SurgicalProceduresDivisionId)
                .HasComment("phân tuyến PTTT")
                .HasColumnName("surgical_procedures_division_id");
            entity.Property(e => e.SurgicalProceduresServiceCode)
                .HasComment("mã dịch vụ phẫu thuật thủ thuật")
                .HasColumnType("character varying")
                .HasColumnName("surgical_procedures_service_code");
            entity.Property(e => e.SurgicalProceduresServiceName)
                .HasComment("tên dịch vụ phẫu thuật thủ thuật")
                .HasColumnType("character varying")
                .HasColumnName("surgical_procedures_service_name");
            entity.Property(e => e.TechServiceTranferUnitMedicalId)
                .HasComment("CSKCB chuyển giao DVKT")
                .HasColumnName("tech_service_tranfer_unit_medical_id");
            entity.Property(e => e.UnitConnectId)
                .HasComment("đơn vị kết nối")
                .HasColumnName("unit_connect_id");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vj tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ClassificationSurgicalProcedures).WithMany(p => p.CategorySurgicalProceduresServiceClassificationSurgicalProcedures)
                .HasForeignKey(d => d.ClassificationSurgicalProceduresId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_classification_surgical_pr");

            entity.HasOne(d => d.ClsImplementUnitMedical).WithMany(p => p.CategorySurgicalProceduresServiceClsImplementUnitMedicals)
                .HasForeignKey(d => d.ClsImplementUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_cls_implement_unit_medical");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategorySurgicalProceduresServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_concept_id_fkey");

            entity.HasOne(d => d.Form).WithMany(p => p.CategorySurgicalProceduresServiceForms)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_form_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategorySurgicalProceduresServices)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_group_service_lvl1_fkey");

            entity.HasOne(d => d.GroupServiceLvl2Navigation).WithMany(p => p.CategorySurgicalProceduresServices)
                .HasForeignKey(d => d.GroupServiceLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_group_service_lvl2_fkey");

            entity.HasOne(d => d.GroupServiceLvl3Navigation).WithMany(p => p.CategorySurgicalProceduresServices)
                .HasForeignKey(d => d.GroupServiceLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_group_service_lvl3_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.CategorySurgicalProceduresServices)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_report_id_fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.CategorySurgicalProceduresServices)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_specialist_id_fkey");

            entity.HasOne(d => d.SurgicalProceduresDivision).WithMany(p => p.CategorySurgicalProceduresServiceSurgicalProceduresDivisions)
                .HasForeignKey(d => d.SurgicalProceduresDivisionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_surgical_procedures_divisi");

            entity.HasOne(d => d.TechServiceTranferUnitMedical).WithMany(p => p.CategorySurgicalProceduresServiceTechServiceTranferUnitMedicals)
                .HasForeignKey(d => d.TechServiceTranferUnitMedicalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_tech_service_tranfer_unit_");

            entity.HasOne(d => d.UnitConnect).WithMany(p => p.CategorySurgicalProceduresServiceUnitConnects)
                .HasForeignKey(d => d.UnitConnectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_unit_connect_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategorySurgicalProceduresServices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategorySurgicalProceduresService_unit_id_fkey");
        });

        modelBuilder.Entity<CategorySurvivalIndex>(entity =>
        {
            entity.HasKey(e => e.SurvivalIndexId).HasName("CategorySurvivalIndex_pkey");

            entity.ToTable("CategorySurvivalIndex", tb => tb.HasComment("danh mục chỉ số sống"));

            entity.Property(e => e.SurvivalIndexId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("survival_index_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.MaxValue)
                .HasComment("giá trị tối đa")
                .HasColumnName("max_value");
            entity.Property(e => e.MinValue)
                .HasComment("giá trị tối thiểu")
                .HasColumnName("min_value");
            entity.Property(e => e.SurvivalIndexCode)
                .HasComment("mã chỉ số sống")
                .HasColumnType("character varying")
                .HasColumnName("survival_index_code");
            entity.Property(e => e.SurvivalIndexName)
                .HasComment("tên chỉ số sống")
                .HasColumnType("character varying")
                .HasColumnName("survival_index_name");
            entity.Property(e => e.Unit)
                .HasComment("đơn vị")
                .HasColumnType("character varying")
                .HasColumnName("unit");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryTabAccompanyingService>(entity =>
        {
            entity.HasKey(e => e.AccompanyingServicesId).HasName("CategoryAccompanyingServices_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục tab dịch vụ kèm theo"));

            entity.Property(e => e.AccompanyingServicesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("accompanying_services_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DesignatedTimeAttributeId)
                .HasComment("thời điểm chỉ định")
                .HasColumnName("designated_time_attribute_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            entity.Property(e => e.ValuableTime)
                .HasComment("thời gian có giá trị")
                .HasColumnType("time with time zone")
                .HasColumnName("valuable_time");

            entity.HasOne(d => d.DesignatedTimeAttribute).WithMany(p => p.CategoryTabAccompanyingServices)
                .HasForeignKey(d => d.DesignatedTimeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryAccompanyingServices_designated_time_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryTabChildIndex>(entity =>
        {
            entity.HasKey(e => e.TabChildIndexId).HasName("CategoryTabChildIndex_pkey");

            entity.ToTable("CategoryTabChildIndex", tb => tb.HasComment("Danh mục chỉ số con"));

            entity.Property(e => e.TabChildIndexId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_child_index_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ChildIndexCode)
                .HasColumnType("character varying")
                .HasColumnName("child_index_code");
            entity.Property(e => e.ChildIndexName)
                .HasColumnType("character varying")
                .HasColumnName("child_index_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EquivalentCode)
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.EquivalentName)
                .HasColumnType("character varying")
                .HasColumnName("equivalent_name");
            entity.Property(e => e.IndexFemaleHight)
                .HasColumnType("character varying")
                .HasColumnName("index_female_hight");
            entity.Property(e => e.IndexFemaleLow)
                .HasColumnType("character varying")
                .HasColumnName("index_female_low");
            entity.Property(e => e.IndexMaleHight)
                .HasColumnType("character varying")
                .HasColumnName("index_male_hight");
            entity.Property(e => e.IndexMaleLow)
                .HasColumnType("character varying")
                .HasColumnName("index_male_low");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.LisCode)
                .HasColumnType("character varying")
                .HasColumnName("lis_code");
            entity.Property(e => e.Note)
                .HasColumnType("character varying")
                .HasColumnName("note");
            entity.Property(e => e.OrderNumber)
                .HasColumnType("character varying")
                .HasColumnName("order_number");
            entity.Property(e => e.ResultReference)
                .HasColumnType("character varying")
                .HasColumnName("result_reference");
            entity.Property(e => e.ResultType).HasColumnName("result_type");
            entity.Property(e => e.Unit)
                .HasColumnType("character varying")
                .HasColumnName("unit");
            entity.Property(e => e.UnitId).HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.UnitNavigation).WithMany(p => p.CategoryTabChildIndices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTabChildIndex_unit_fkey");
        });

        modelBuilder.Entity<CategoryTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.TabCostGroupId).HasName("CategoryCostGroup_pkey");

            entity.ToTable("CategoryTabCostGroup", tb => tb.HasComment("Danh mục nhóm chi phí"));

            entity.Property(e => e.TabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_cost_group_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CostGroupId).HasColumnName("cost_group_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.TypeTimeAttributeId).HasColumnName("type_time_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.CostGroup).WithMany(p => p.CategoryTabCostGroups)
                .HasForeignKey(d => d.CostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTabCostGroup_cost_group_id_fkey");

            entity.HasOne(d => d.TypeTimeAttribute).WithMany(p => p.CategoryTabCostGroups)
                .HasForeignKey(d => d.TypeTimeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryCostGroup_type_time_attribute_id_fkey");
        });

        modelBuilder.Entity<CategoryTabHistoryChanged>(entity =>
        {
            entity.HasKey(e => e.TabHistoryChangedId).HasName("CategoryTabHistoryChanged_pkey");

            entity.ToTable("CategoryTabHistoryChanged", tb => tb.HasComment("Danh mục lịch sử chỉnh sửa"));

            entity.Property(e => e.TabHistoryChangedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_history_changed_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ChangedTime).HasColumnName("changed_time");
            entity.Property(e => e.Field).HasColumnName("field");
            entity.Property(e => e.IsActiive).HasColumnName("is_actiive");
            entity.Property(e => e.NewValue).HasColumnName("new_value");
            entity.Property(e => e.OldValue).HasColumnName("old_value");
        });

        modelBuilder.Entity<CategoryTabImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.TabImplementRoomId).HasName("CategoryTabImplementationRooms_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục tab Phòng thực hiện"));

            entity.Property(e => e.TabImplementRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_implement_room_id");
            entity.Property(e => e.AddressRoom).HasColumnName("address_room");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Gender).HasColumnName("gender");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryTabImplementationRooms)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTabImplementationRooms_department_id_fkey");
        });

        modelBuilder.Entity<CategoryTabInsurancePaymentCondition>(entity =>
        {
            entity.HasKey(e => e.TabInsurancePaymentConditionsId).HasName("CategoryTabInsurancePaymentCondition_pkey");

            entity.ToTable("CategoryTabInsurancePaymentCondition", tb => tb.HasComment("Danh mục điều kiện thanh toán bảo hiểm"));

            entity.Property(e => e.TabInsurancePaymentConditionsId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_insurance_payment_conditions_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.MaximumQuantityUsedPerDay)
                .HasComment("Số lượng tối đa sử dụng trong 1 ngày")
                .HasColumnName("maximum_quantity_used_per_day");
            entity.Property(e => e.MaximumQuantityUsedPerPatient)
                .HasComment("Số lượng tối đa sử dụng trong 1 MHS")
                .HasColumnName("maximum_quantity_used_per_patient");
            entity.Property(e => e.NumberDayImplementNextTime)
                .HasComment("Số ngày được thực hiện lần tiếp theo")
                .HasColumnName("number_day_implement_next_time");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryTabPriceOption>(entity =>
        {
            entity.HasKey(e => e.TabPriceOptionId).HasName("CategoryTabPriceOption_pkey");

            entity.ToTable("CategoryTabPriceOption", tb => tb.HasComment("Danh mục tab tùy chọn giá"));

            entity.Property(e => e.TabPriceOptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_price_option_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.FromDated).HasColumnName("from_dated");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.PaymentTypeId).HasColumnName("payment_type_id");
            entity.Property(e => e.PriceInsurance).HasColumnName("price_insurance");
            entity.Property(e => e.PriceNonInsurance).HasColumnName("price_non_insurance");
            entity.Property(e => e.Surcharge).HasColumnName("surcharge");
            entity.Property(e => e.ToDated).HasColumnName("to_dated");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryTabPriceOptions)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTabPriceOption_department_id_fkey");

            entity.HasOne(d => d.PaymentType).WithMany(p => p.CategoryTabPriceOptions)
                .HasForeignKey(d => d.PaymentTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTabPriceOption_payment_type_id_fkey");
        });

        modelBuilder.Entity<CategoryTemplateCdha>(entity =>
        {
            entity.HasKey(e => e.TemplateCdhaId).HasName("CategoryTemplateCDHA_pkey1");

            entity.ToTable("CategoryTemplateCDHA", tb => tb.HasComment("MẪu cdha"));

            entity.Property(e => e.TemplateCdhaId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_cdha_id");
            entity.Property(e => e.ContentTemplate).HasColumnName("content_template");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.TemplateCdhaLv1).HasColumnName("template_cdha_lv1");
            entity.Property(e => e.TemplateCdhaLv2).HasColumnName("template_cdha_lv2");
            entity.Property(e => e.TemplateCdhaLv3).HasColumnName("template_cdha_lv3");
            entity.Property(e => e.TitleTemplate).HasColumnName("title_template");

            entity.HasOne(d => d.TemplateCdhaLv1Navigation).WithMany(p => p.CategoryTemplateCdhas)
                .HasForeignKey(d => d.TemplateCdhaLv1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTemplateCDHA_template_cdha_lv1_fkey");

            entity.HasOne(d => d.TemplateCdhaLv2Navigation).WithMany(p => p.CategoryTemplateCdhas)
                .HasForeignKey(d => d.TemplateCdhaLv2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTemplateCDHA_template_cdha_lv2_fkey");

            entity.HasOne(d => d.TemplateCdhaLv3Navigation).WithMany(p => p.CategoryTemplateCdhas)
                .HasForeignKey(d => d.TemplateCdhaLv3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTemplateCDHA_template_cdha_lv3_fkey");
        });

        modelBuilder.Entity<CategoryTemplateCdhalvl1>(entity =>
        {
            entity.HasKey(e => e.TemplateCdhaLvl1Id).HasName("CategoryTemplateCDHA_pkey");

            entity.ToTable("CategoryTemplateCDHALvl1", tb => tb.HasComment("Danh mục mẫu cdha level1"));

            entity.Property(e => e.TemplateCdhaLvl1Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_cdha_lvl1_id");
            entity.Property(e => e.CategoryName)
                .HasColumnType("character varying")
                .HasColumnName("category_name");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
        });

        modelBuilder.Entity<CategoryTemplateCdhalvl2>(entity =>
        {
            entity.HasKey(e => e.TemplateCdhaLvl2Id).HasName("CategoryTemplateCDHALvl2_pkey");

            entity.ToTable("CategoryTemplateCDHALvl2", tb => tb.HasComment("danh mục cấp 2 template cdjha"));

            entity.Property(e => e.TemplateCdhaLvl2Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_cdha_lvl2_id");
            entity.Property(e => e.CategoryName)
                .HasColumnType("character varying")
                .HasColumnName("category_name");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.TemplateCdhaLvl1Id).HasColumnName("template_cdha_lvl1_id");

            entity.HasOne(d => d.TemplateCdhaLvl1).WithMany(p => p.CategoryTemplateCdhalvl2s)
                .HasForeignKey(d => d.TemplateCdhaLvl1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTemplateCDHALvl2_template_cdha_lvl1_id_fkey");
        });

        modelBuilder.Entity<CategoryTemplateCdhalvl3>(entity =>
        {
            entity.HasKey(e => e.TemplateCdhaLvl3Id).HasName("CategoryTemplateCDHALvl3_pkey");

            entity.ToTable("CategoryTemplateCDHALvl3", tb => tb.HasComment("Danh mục cấp 3 template cdha"));

            entity.Property(e => e.TemplateCdhaLvl3Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_cdha_lvl3_id");
            entity.Property(e => e.CategoryName)
                .HasColumnType("character varying")
                .HasColumnName("category_name");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.TemplateCdhaLvl2Id).HasColumnName("template_cdha_lvl2_id");

            entity.HasOne(d => d.TemplateCdhaLvl2).WithMany(p => p.CategoryTemplateCdhalvl3s)
                .HasForeignKey(d => d.TemplateCdhaLvl2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTemplateCDHALvl3_template_cdha_lvl2_id_fkey");
        });

        modelBuilder.Entity<CategoryTemplateOfDevelopment>(entity =>
        {
            entity.HasKey(e => e.TemplateOfDevelopmentsId).HasName("CategoryTemplateOfDevelopments_pkey");

            entity.ToTable(tb => tb.HasComment("Danh mục mẫu diễn biến"));

            entity.Property(e => e.TemplateOfDevelopmentsId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_of_developments_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.TemplateOfDevelopmentsCode)
                .HasComment("mã mẫu diễn biến")
                .HasColumnType("character varying")
                .HasColumnName("template_of_developments_code");
            entity.Property(e => e.TemplateOfDevelopmentsDesc)
                .HasComment("diễn biến")
                .HasColumnName("template_of_developments_desc");
            entity.Property(e => e.TemplateOfDevelopmentsName)
                .HasComment("tên mẫu diễn biến")
                .HasColumnType("character varying")
                .HasColumnName("template_of_developments_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryTemplateQm>(entity =>
        {
            entity.HasKey(e => e.TemplateQmsId).HasName("CategoryTemplateQMS_pkey");

            entity.ToTable("CategoryTemplateQMS", tb => tb.HasComment("Danh mục mẫu QMS"));

            entity.Property(e => e.TemplateQmsId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_qms_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.QmsLink)
                .HasColumnType("character varying")
                .HasColumnName("qms_link");
            entity.Property(e => e.QmsTypeId).HasColumnName("qms_type_id");
            entity.Property(e => e.TemplateQmsCode)
                .HasColumnType("character varying")
                .HasColumnName("template_qms_code");
            entity.Property(e => e.TemplateQmsName)
                .HasColumnType("character varying")
                .HasColumnName("template_qms_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.QmsType).WithMany(p => p.CategoryTemplateQms)
                .HasForeignKey(d => d.QmsTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTemplateQMS_qms_type_id_fkey");
        });

        modelBuilder.Entity<CategoryTestingProcedure>(entity =>
        {
            entity.HasKey(e => e.TestingProcedureId).HasName("CategoryTestingProcedure_pkey");

            entity.ToTable("CategoryTestingProcedure", tb => tb.HasComment("Danh mục quy trình xét nghiệm"));

            entity.Property(e => e.TestingProcedureId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("testing_procedure_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsIso).HasColumnName("is_iso");
            entity.Property(e => e.TestingProcedureCode)
                .HasComment("mã xét nghiệm")
                .HasColumnType("character varying")
                .HasColumnName("testing_procedure_code");
            entity.Property(e => e.TestingProcedureName)
                .HasComment("tên xét nghiệm")
                .HasColumnType("character varying")
                .HasColumnName("testing_procedure_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryTitleDegree>(entity =>
        {
            entity.HasKey(e => e.TitleDegreeId).HasName("CategoryTitleDegree_pkey");

            entity.ToTable("CategoryTitleDegree", tb => tb.HasComment("Danh mục học hàm học vị"));

            entity.Property(e => e.TitleDegreeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("title_degree_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.TitleDegreeCode)
                .HasComment("mã học hàm học vị")
                .HasColumnType("character varying")
                .HasColumnName("title_degree_code");
            entity.Property(e => e.TitleDegreeName)
                .HasComment("tên học hàm học vị")
                .HasColumnType("character varying")
                .HasColumnName("title_degree_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
        });

        modelBuilder.Entity<CategoryTrackingLabel>(entity =>
        {
            entity.HasKey(e => e.TrackingLabelId).HasName("CategoryTrackingLabel_pkey");

            entity.ToTable("CategoryTrackingLabel", tb => tb.HasComment("Danh mục nhãn theo dõi"));

            entity.Property(e => e.TrackingLabelId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tracking_label_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.TrackingLabelCode)
                .HasComment("mã nhãn theo dõi")
                .HasColumnType("character varying")
                .HasColumnName("tracking_label_code");
            entity.Property(e => e.TrackingLabelName)
                .HasComment("tên nhãn theo dõi")
                .HasColumnType("character varying")
                .HasColumnName("tracking_label_name");
            entity.Property(e => e.TrackingLabelSymbol)
                .HasComment("ký hiệu  nhãn theo dõi")
                .HasColumnType("character varying")
                .HasColumnName("tracking_label_symbol");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryTypeOfMedicalRecord>(entity =>
        {
            entity.HasKey(e => e.TypeOfMedicalRecordId).HasName("CategoryTypeOfMedicalRecord_pkey");

            entity.ToTable("CategoryTypeOfMedicalRecord", tb => tb.HasComment("Danh mục loại bệnh án"));

            entity.Property(e => e.TypeOfMedicalRecordId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("type_of_medical_record_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsLongTermMedicalRecord).HasColumnName("is_long_term_medical_record");
            entity.Property(e => e.TypeOfMedicalRecordCode)
                .HasComment("mã bệnh án")
                .HasColumnType("character varying")
                .HasColumnName("type_of_medical_record_code");
            entity.Property(e => e.TypeOfMedicalRecordName)
                .HasComment("tên bệnh án")
                .HasColumnType("character varying")
                .HasColumnName("type_of_medical_record_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<CategoryTypeScreeningForm>(entity =>
        {
            entity.HasKey(e => e.TypeScreeningFormId).HasName("CategoryTypeScreeningForm_pkey");

            entity.ToTable("CategoryTypeScreeningForm", tb => tb.HasComment("Loại phiếu sàng lọc"));

            entity.Property(e => e.TypeScreeningFormId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("type_screening_form_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ReportId)
                .HasComment("id  báo cáo")
                .HasColumnName("report_id");
            entity.Property(e => e.TypeScreeningFormCode)
                .HasComment("mã")
                .HasColumnType("character varying")
                .HasColumnName("type_screening_form_code");
            entity.Property(e => e.TypeScreeningFormName)
                .HasComment("tên")
                .HasColumnType("character varying")
                .HasColumnName("type_screening_form_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Report).WithMany(p => p.CategoryTypeScreeningForms)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTypeScreeningForm_report_id_fkey");
        });

        modelBuilder.Entity<CategoryUnit>(entity =>
        {
            entity.HasKey(e => e.UnitId).HasName("CategoryUnit_pkey");

            entity.ToTable("CategoryUnit", tb => tb.HasComment("Danh mục đơn vị tính"));

            entity.Property(e => e.UnitId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("unit_id");
            entity.Property(e => e.ChangeBy).HasColumnName("change_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.UnitCode)
                .HasComment("mã đơn vị tính")
                .HasColumnType("character varying")
                .HasColumnName("unit_code");
            entity.Property(e => e.UnitName)
                .HasComment("tên đơn vị tính")
                .HasColumnType("character varying")
                .HasColumnName("unit_name");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryUnits)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryUnit_concept_id_fkey");
        });

        modelBuilder.Entity<CategoryUserGuide>(entity =>
        {
            entity.HasKey(e => e.UserGuideId).HasName("CategoryUserGuide_pkey");

            entity.ToTable("CategoryUserGuide", tb => tb.HasComment("Danh sách tài liệu hướng dẫn"));

            entity.Property(e => e.UserGuideId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("user_guide_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UserGuideCode)
                .HasComment("mã tài liệu hd sd")
                .HasColumnType("character varying")
                .HasColumnName("user_guide_code");
            entity.Property(e => e.UserGuideFile)
                .HasComment("file hướng dẫn")
                .HasColumnName("user_guide_file");
            entity.Property(e => e.UserGuideImage)
                .HasComment("ảnh bìa")
                .HasColumnName("user_guide_image");
            entity.Property(e => e.UserGuideName)
                .HasComment("tên hướng dẫn sử dụng")
                .HasColumnType("character varying")
                .HasColumnName("user_guide_name");
            entity.Property(e => e.UserGuideVideo)
                .HasComment("video hướng dẫn")
                .HasColumnName("user_guide_video");
        });

        modelBuilder.Entity<CategoryVaccine>(entity =>
        {
            entity.HasKey(e => e.VaccineId).HasName("CategoryVaccine_pkey");

            entity.ToTable("CategoryVaccine", tb => tb.HasComment("danh mục vắc xin"));

            entity.Property(e => e.VaccineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("vaccine_id");
            entity.Property(e => e.AccountCostMaterials)
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountCostPrice)
                .HasColumnType("character varying")
                .HasColumnName("account_cost_price");
            entity.Property(e => e.AccountIncomplete)
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.Amount)
                .HasComment("liều lượng")
                .HasColumnType("character varying")
                .HasColumnName("amount");
            entity.Property(e => e.AntigenId)
                .HasComment("kháng nguyên")
                .HasColumnName("antigen_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.Content)
                .HasComment("hàm lượng")
                .HasColumnType("character varying")
                .HasColumnName("content");
            entity.Property(e => e.CountriesId)
                .HasComment("quốc gia")
                .HasColumnName("countries_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DrugClassificationId)
                .HasComment("phân loại thuốc")
                .HasColumnName("drug_classification_id");
            entity.Property(e => e.Gender)
                .HasComment("giới tính")
                .HasColumnName("gender");
            entity.Property(e => e.GroupServiceLvl1)
                .HasComment("nhóm dịch vụ cấp 1")
                .HasColumnName("group_service_lvl1");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsInsurance)
                .HasComment("1 bảo hiểm 0 không bảo hiểm")
                .HasColumnName("is_insurance");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.MaxAgeOfUse).HasColumnName("max_age_of_use");
            entity.Property(e => e.MinAgeOfUse).HasColumnName("min_age_of_use");
            entity.Property(e => e.NameOfDiseasePrevention)
                .HasComment("tên bệnh dự phòng")
                .HasColumnType("character varying")
                .HasColumnName("name_of_disease_prevention");
            entity.Property(e => e.NumberOfInjectionsRequired)
                .HasComment("số mũi cần tiêm")
                .HasColumnName("number_of_injections_required");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.PriceVat)
                .HasComment("giá sau vat")
                .HasColumnName("price_vat");
            entity.Property(e => e.ProducterId)
                .HasComment("nhà sản xuất")
                .HasColumnName("producter_id");
            entity.Property(e => e.RoutesId)
                .HasComment("đường dùng")
                .HasColumnName("routes_id");
            entity.Property(e => e.Specifications)
                .HasComment("quy cách")
                .HasColumnType("character varying")
                .HasColumnName("specifications");
            entity.Property(e => e.UnitId)
                .HasComment("đơn vị tính")
                .HasColumnName("unit_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VaccinationManagementCode)
                .HasComment("mã tiêm chủng quốc gia")
                .HasColumnType("character varying")
                .HasColumnName("vaccination_management_code");
            entity.Property(e => e.VaccineCode)
                .HasComment("mã vaccine")
                .HasColumnType("character varying")
                .HasColumnName("vaccine_code");
            entity.Property(e => e.VaccineName)
                .HasComment("tên vaccine")
                .HasColumnType("character varying")
                .HasColumnName("vaccine_name");

            entity.HasOne(d => d.Antigen).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.AntigenId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_antigen_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_concept_id_fkey");

            entity.HasOne(d => d.Countries).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.CountriesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_countries_id_fkey");

            entity.HasOne(d => d.DrugClassification).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.DrugClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_drug_classification_id_fkey");

            entity.HasOne(d => d.GroupServiceLvl1Navigation).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.GroupServiceLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_group_service_lvl1_fkey");

            entity.HasOne(d => d.Producter).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.ProducterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_producter_id_fkey");

            entity.HasOne(d => d.Routes).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.RoutesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_routes_id_fkey");

            entity.HasOne(d => d.Unit).WithMany(p => p.CategoryVaccines)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVaccine_unit_id_fkey");
        });

        modelBuilder.Entity<CategoryVotePrint>(entity =>
        {
            entity.HasKey(e => e.PrintId).HasName("CategoryVotePrint_pkey");

            entity.ToTable("CategoryVotePrint", tb => tb.HasComment("danh mục phiếu in"));

            entity.Property(e => e.PrintId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("print_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.NumberPrint)
                .HasComment("stt phiếu")
                .HasColumnName("number_print");
            entity.Property(e => e.PositionPrintId)
                .HasComment("vị trí")
                .HasColumnName("position_print_id");
            entity.Property(e => e.PrintCode)
                .HasComment("mã phiếu")
                .HasColumnType("character varying")
                .HasColumnName("print_code");
            entity.Property(e => e.PrintName)
                .HasComment("tên phiếu")
                .HasColumnType("character varying")
                .HasColumnName("print_name");
            entity.Property(e => e.ReportId)
                .HasComment("báo cáo")
                .HasColumnName("report_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.PositionPrint).WithMany(p => p.CategoryVotePrints)
                .HasForeignKey(d => d.PositionPrintId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVotePrint_position_print_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.CategoryVotePrints)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVotePrint_report_id_fkey");
        });

        modelBuilder.Entity<CategoryVoucher>(entity =>
        {
            entity.HasKey(e => e.VourcherId).HasName("CategoryVoucher_pkey");

            entity.ToTable("CategoryVoucher", tb => tb.HasComment("Dịch vụ Vourcher"));

            entity.Property(e => e.VourcherId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("vourcher_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.NumberOfRemain)
                .HasComment("số lượng còn lại")
                .HasColumnName("number_of_remain");
            entity.Property(e => e.NumberOfUsed)
                .HasComment("số lượng đã sử dụng")
                .HasColumnName("number_of_used");
            entity.Property(e => e.ProgramId)
                .HasComment("chương trình giảm giá")
                .HasColumnName("program_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VoucherCode)
                .HasComment("mã voucher")
                .HasColumnType("character varying")
                .HasColumnName("voucher_code");
            entity.Property(e => e.VoucherDesc)
                .HasComment("mô tả")
                .HasColumnName("voucher_desc");
            entity.Property(e => e.VoucherQty)
                .HasComment("số lượng voucher")
                .HasColumnName("voucher_qty");

            entity.HasOne(d => d.Program).WithMany(p => p.CategoryVouchers)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryVoucher_program_id_fkey");
        });

        modelBuilder.Entity<CategoryWard>(entity =>
        {
            entity.HasKey(e => e.WardId).HasName("CategoryWard_pkey");

            entity.ToTable("CategoryWard", tb => tb.HasComment("Danh mục xã phường"));

            entity.Property(e => e.WardId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("ward_id");
            entity.Property(e => e.Abbreviations)
                .HasComment("tên viết tắt")
                .HasColumnType("character varying")
                .HasColumnName("abbreviations");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CityId)
                .HasComment("id thành phố")
                .HasColumnName("city_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DistrictId)
                .HasComment("id quận huyện")
                .HasColumnName("district_id");
            entity.Property(e => e.EquivalentCode)
                .HasComment("mã tương đương")
                .HasColumnType("character varying")
                .HasColumnName("equivalent_code");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.NationalId)
                .HasComment("id quốc gia")
                .HasColumnName("national_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VaccinationNationalSyncCode)
                .HasComment("mã đồng bộ TCQG")
                .HasColumnType("character varying")
                .HasColumnName("vaccination_national_sync_code");
            entity.Property(e => e.WardCode)
                .HasComment("mã xã/phường")
                .HasColumnType("character varying")
                .HasColumnName("ward_code");
            entity.Property(e => e.WardName)
                .HasComment("tên xã/phường")
                .HasColumnType("character varying")
                .HasColumnName("ward_name");

            entity.HasOne(d => d.City).WithMany(p => p.CategoryWards)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWard_city_id_fkey");

            entity.HasOne(d => d.District).WithMany(p => p.CategoryWards)
                .HasForeignKey(d => d.DistrictId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWard_district_id_fkey");

            entity.HasOne(d => d.National).WithMany(p => p.CategoryWards)
                .HasForeignKey(d => d.NationalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWard_national_id_fkey");
        });

        modelBuilder.Entity<CategoryWarehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseId).HasName("CategoryWarehouse_pkey");

            entity.ToTable("CategoryWarehouse", tb => tb.HasComment("Thông tin kho"));

            entity.HasIndex(e => e.WarehouseCode, "CategoryWarehouse_warehouse_code_key").IsUnique();

            entity.HasIndex(e => e.WarehouseName, "CategoryWarehouse_warehouse_name_key").IsUnique();

            entity.Property(e => e.WarehouseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_id");
            entity.Property(e => e.AccountCost)
                .HasComment("tài khoản giá vốn")
                .HasColumnType("character varying")
                .HasColumnName("account_cost");
            entity.Property(e => e.AccountCostMaterials)
                .HasComment("tài khoản chi phí nguyên vật liệu")
                .HasColumnType("character varying")
                .HasColumnName("account_cost_materials");
            entity.Property(e => e.AccountIncomplete)
                .HasComment("tài khoản dở dang")
                .HasColumnType("character varying")
                .HasColumnName("account_incomplete");
            entity.Property(e => e.AccountRevenue)
                .HasComment("tài khoản doanh thu")
                .HasColumnType("character varying")
                .HasColumnName("account_revenue");
            entity.Property(e => e.AccountSupplies)
                .HasComment("tài khoản vật tư")
                .HasColumnType("character varying")
                .HasColumnName("account_supplies");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.GppAccount)
                .HasColumnType("character varying")
                .HasColumnName("gpp_account");
            entity.Property(e => e.GppCode)
                .HasColumnType("character varying")
                .HasColumnName("gpp_code");
            entity.Property(e => e.GppPassword)
                .HasColumnType("character varying")
                .HasColumnName("gpp_password");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsInsurance).HasColumnName("is_insurance");
            entity.Property(e => e.IsNoTax).HasColumnName("is_no_tax");
            entity.Property(e => e.IsNotUsed).HasColumnName("is_not_used");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseCode)
                .HasColumnType("character varying")
                .HasColumnName("warehouse_code");
            entity.Property(e => e.WarehouseName)
                .HasColumnType("character varying")
                .HasColumnName("warehouse_name");

            entity.HasOne(d => d.Department).WithMany(p => p.CategoryWarehouses)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWarehouse_department_id_fkey");
        });

        modelBuilder.Entity<CategoryWarehouseList>(entity =>
        {
            entity.HasKey(e => e.ReceiptWarehouseListId).HasName("CategoryWarehouseList_pkey");

            entity.ToTable("CategoryWarehouseList", tb => tb.HasComment("Danh sách kho"));

            entity.Property(e => e.ReceiptWarehouseListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_warehouse_list_id");
            entity.Property(e => e.CompensationSlipId).HasColumnName("compensation_slip_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.ReceiptCodeEstimateId).HasColumnName("receipt_code_estimate_id");
            entity.Property(e => e.ReceiptCodeSuppliesId).HasColumnName("receipt_code_supplies_id");

            entity.HasOne(d => d.CompensationSlip).WithMany(p => p.CategoryWarehouseLists)
                .HasForeignKey(d => d.CompensationSlipId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWarehouseList_compensation_slip_id_fkey2");

            entity.HasOne(d => d.ReceiptCodeEstimate).WithMany(p => p.CategoryWarehouseLists)
                .HasForeignKey(d => d.ReceiptCodeEstimateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWarehouseList_receipt_code_estimate_id_fkey");

            entity.HasOne(d => d.ReceiptCodeSupplies).WithMany(p => p.CategoryWarehouseLists)
                .HasForeignKey(d => d.ReceiptCodeSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWarehouseList_receipt_code_supplies_id_fkey");
        });

        modelBuilder.Entity<CategoryWarehouseSource>(entity =>
        {
            entity.HasKey(e => e.WarehouseSourceId).HasName("CategoryWarehouseSource_pkey");

            entity.ToTable("CategoryWarehouseSource", tb => tb.HasComment("Danh mục nguồn nhập kho"));

            entity.HasIndex(e => e.WarehouseSourceCode, "CategoryWarehouseSource_warehouse_source_code_key").IsUnique();

            entity.HasIndex(e => e.WarehouseSourceName, "CategoryWarehouseSource_warehouse_source_name_key").IsUnique();

            entity.Property(e => e.WarehouseSourceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_source_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsBid)
                .HasComment("thầu")
                .HasColumnName("is_bid");
            entity.Property(e => e.ServiceTypeAttributeId)
                .HasComment("id loại dịch vụ")
                .HasColumnName("service_type_attribute_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseSourceCode)
                .HasComment("mã nguồn nhập kho")
                .HasColumnType("character varying")
                .HasColumnName("warehouse_source_code");
            entity.Property(e => e.WarehouseSourceName)
                .HasComment("tên nguồn nhập kho")
                .HasColumnType("character varying")
                .HasColumnName("warehouse_source_name");

            entity.HasOne(d => d.Concept).WithMany(p => p.CategoryWarehouseSources)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWarehouseSource_concept_id_fkey");

            entity.HasOne(d => d.ServiceTypeAttribute).WithMany(p => p.CategoryWarehouseSources)
                .HasForeignKey(d => d.ServiceTypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryWarehouseSource_service_type_attribute_id_fkey");
        });

        modelBuilder.Entity<CdhaAttribute>(entity =>
        {
            entity.HasKey(e => e.CdhaAttributeId).HasName("CDHA_Attribute_pkey");

            entity.ToTable("CDHA_Attribute", tb => tb.HasComment("Thuộc tính - cdha"));

            entity.HasIndex(e => e.AttributeId, "CDHA_Attribute_attribute_id_key").IsUnique();

            entity.Property(e => e.CdhaAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_attribute_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.CdhaId).HasColumnName("cdha_id");

            entity.HasOne(d => d.Attribute).WithOne(p => p.CdhaAttribute)
                .HasForeignKey<CdhaAttribute>(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHA_Attribute_attribute_id_fkey");

            entity.HasOne(d => d.Cdha).WithMany(p => p.CdhaAttributes)
                .HasForeignKey(d => d.CdhaId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHA_Attribute_cdha_id_fkey");
        });

        modelBuilder.Entity<CdhaTdcnList>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnListId).HasName("CDHA_TDCN_List_pkey");

            entity.ToTable("CDHA_TDCN_List", tb => tb.HasComment("Chẩn đoán hình ảnh, thăm dò chức năng"));

            entity.Property(e => e.CdhaTdcnListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_list_id");
            entity.Property(e => e.AccountImplement)
                .HasComment("người thực hiện")
                .HasColumnName("account_implement");
            entity.Property(e => e.AccountReadResult)
                .HasComment("người đọc kết quả")
                .HasColumnName("account_read_result");
            entity.Property(e => e.AccountReception)
                .HasComment("người tiếp nhận")
                .HasColumnName("account_reception");
            entity.Property(e => e.CdhaTdcnnListCode)
                .HasComment("số phiếu")
                .HasColumnName("cdha_tdcnn_list_code");
            entity.Property(e => e.CdhaTdcnnListNumberConnect)
                .HasComment("số kết nối")
                .HasColumnName("cdha_tdcnn_list_number_connect");
            entity.Property(e => e.Conclude)
                .HasComment("kết luận")
                .HasColumnName("conclude");
            entity.Property(e => e.CreatedBy)
                .HasComment("người tạo")
                .HasColumnName("created_by");
            entity.Property(e => e.InterventionMethod)
                .HasComment("phương thức can thiệp")
                .HasColumnName("intervention_method");
            entity.Property(e => e.IsActice).HasColumnName("is_actice");
            entity.Property(e => e.IsPacs)
                .HasComment("đã gửi pacs")
                .HasColumnName("is_pacs");
            entity.Property(e => e.IsPayment)
                .HasComment("đã thanh toán")
                .HasColumnName("is_payment");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái")
                .HasColumnName("is_status");
            entity.Property(e => e.MethodOfIntervention)
                .HasComment("cách thức can thiệp")
                .HasColumnName("method_of_intervention");
            entity.Property(e => e.Nurse)
                .HasComment("điều dưỡng")
                .HasColumnName("nurse");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("dịch vụ chỉ định")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientId)
                .HasComment("mã bệnh nhân")
                .HasColumnName("patient_id");
            entity.Property(e => e.Result)
                .HasComment("kết quả")
                .HasColumnName("result");
            entity.Property(e => e.Suggestion)
                .HasComment("đề nghị")
                .HasColumnName("suggestion");
            entity.Property(e => e.TimeReception)
                .HasComment("thời gian tiếp nhận")
                .HasColumnName("time_reception");
            entity.Property(e => e.TimeResult)
                .HasComment("thời gian có kết quả")
                .HasColumnName("time_result");

            entity.HasOne(d => d.Patient).WithMany(p => p.CdhaTdcnLists)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHA_TDCN_List_patient_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnOtherSourcePay>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnOtherSourcePayId).HasName("CDHATDCN_OtherSourcePay_pkey");

            entity.ToTable("CDHATDCN_OtherSourcePay", tb => tb.HasComment("CDHATDCN- Nguồn chi trả khác"));

            entity.Property(e => e.CdhaTdcnOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_other_source_pay_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnOtherSourcePays)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_OtherSourcePay_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.CdhatdcnOtherSourcePays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_OtherSourcePay_other_source_pay_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnServiceList>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnServiceListId).HasName("CDHATDCN_ServiceList_pkey");

            entity.ToTable("CDHATDCN_ServiceList", tb => tb.HasComment("CDHATDCN - trường hợp kê dịch vụ"));

            entity.Property(e => e.CdhaTdcnServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_service_list_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.ServiceListId).HasColumnName("service_list_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnServiceLists)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_ServiceList_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.ServiceList).WithMany(p => p.CdhatdcnServiceLists)
                .HasForeignKey(d => d.ServiceListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_ServiceList_service_list_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnTabAccompanyingService>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnTabAccompanyingServiceId).HasName("CDHATDCN_TabAccompanyingServices_pkey");

            entity.ToTable("CDHATDCN_TabAccompanyingServices", tb => tb.HasComment("CDHATDCN -  Dịch vụ kèm theo"));

            entity.Property(e => e.CdhaTdcnTabAccompanyingServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_tab_accompanying_service_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.TabAccompanyingServiceId).HasColumnName("tab_accompanying_service_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnTabAccompanyingServices)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabAccompanyingServices_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.CdhatdcnTabAccompanyingServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabAccompanyingServices_product_id_fkey");

            entity.HasOne(d => d.TabAccompanyingService).WithMany(p => p.CdhatdcnTabAccompanyingServices)
                .HasForeignKey(d => d.TabAccompanyingServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabAccompanyingServic_tab_accompanying_service_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnTabCostGroupId).HasName("CDHATDCN_TabCostGroup_pkey");

            entity.ToTable("CDHATDCN_TabCostGroup", tb => tb.HasComment("CDHATDCN - Nhóm chi phí"));

            entity.Property(e => e.CdhaTdcnTabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_tab_cost_group_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnTabCostGroups)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabCostGroup_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.CdhatdcnTabCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabCostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnTabHistoryChanged>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnTabHistoryChangedId).HasName("CDHATDCN_TabHistoryChanged_pkey");

            entity.ToTable("CDHATDCN_TabHistoryChanged", tb => tb.HasComment("CDHATDCN - Lịch sử chỉnh sửa"));

            entity.Property(e => e.CdhaTdcnTabHistoryChangedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_tab_history_changed_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.TabHistoryChangedId).HasColumnName("tab_history_changed_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnTabHistoryChangeds)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabHistoryChanged_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.TabHistoryChanged).WithMany(p => p.CdhatdcnTabHistoryChangeds)
                .HasForeignKey(d => d.TabHistoryChangedId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabHistoryChanged_tab_history_changed_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnTabImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnTabImplementationRoomId).HasName("CDHATDCN_TabImplementationRooms_pkey");

            entity.ToTable("CDHATDCN_TabImplementationRooms", tb => tb.HasComment("CDHATDCN - Phòng thực hiện"));

            entity.Property(e => e.CdhaTdcnTabImplementationRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_tab_implementation_room_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.TabImplementRoomId).HasColumnName("tab_implement_room_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnTabImplementationRooms)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabImplementationRooms_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.TabImplementRoom).WithMany(p => p.CdhatdcnTabImplementationRooms)
                .HasForeignKey(d => d.TabImplementRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabImplementationRooms_tab_implement_room_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnTabInsurancePaymentCondition>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnTabInsurancePaymentCoditionId).HasName("CDHATDCN_TabInsurancePaymentCondition_pkey");

            entity.ToTable("CDHATDCN_TabInsurancePaymentCondition", tb => tb.HasComment("CDHATDCN-DK thanh toán bảo hiểm"));

            entity.Property(e => e.CdhaTdcnTabInsurancePaymentCoditionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_tab_insurance_payment_codition_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.TabInsurancePaymentCoditionId).HasColumnName("tab_insurance_payment_codition_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnTabInsurancePaymentConditions)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabInsurancePaymentCondition_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.TabInsurancePaymentCodition).WithMany(p => p.CdhatdcnTabInsurancePaymentConditions)
                .HasForeignKey(d => d.TabInsurancePaymentCoditionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabInsurancePaymentC_tab_insurance_payment_coditi_fkey");
        });

        modelBuilder.Entity<CdhatdcnTabPriceOption>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnTabPriceOptionId).HasName("CDHATDCN_TabPriceOption_pkey");

            entity.ToTable("CDHATDCN_TabPriceOption", tb => tb.HasComment("CDHATDCN - Tùy chọn giá"));

            entity.Property(e => e.CdhaTdcnTabPriceOptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_tab_price_option_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.TabPriceOptionId).HasColumnName("tab_price_option_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnTabPriceOptions)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabPriceOption_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.TabPriceOption).WithMany(p => p.CdhatdcnTabPriceOptions)
                .HasForeignKey(d => d.TabPriceOptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCN_TabPriceOption_tab_price_option_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnlistChangeService>(entity =>
        {
            entity.HasKey(e => e.CdhaTdcnListChangeServiceId).HasName("CDHATDCNList_ChangeService_pkey");

            entity.ToTable("CDHATDCNList_ChangeService", tb => tb.HasComment("Thay đổi dịch vụ"));

            entity.Property(e => e.CdhaTdcnListChangeServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("cdha_tdcn_list_change_service_id");
            entity.Property(e => e.CdhaTdcnListId).HasColumnName("cdha_tdcn_list_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ReasonForAdvanceId).HasColumnName("reason_for_advance_id");
            entity.Property(e => e.RoomId).HasColumnName("room_id");

            entity.HasOne(d => d.CdhaTdcnList).WithMany(p => p.CdhatdcnlistChangeServices)
                .HasForeignKey(d => d.CdhaTdcnListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCNList_ChangeService_cdha_tdcn_list_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.CdhatdcnlistChangeServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCNList_ChangeService_concept_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.CdhatdcnlistChangeServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCNList_ChangeService_product_id_fkey");

            entity.HasOne(d => d.ReasonForAdvance).WithMany(p => p.CdhatdcnlistChangeServices)
                .HasForeignKey(d => d.ReasonForAdvanceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCNList_ChangeService_reason_for_advance_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.CdhatdcnlistChangeServices)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCNList_ChangeService_room_id_fkey");
        });

        modelBuilder.Entity<CdhatdcnresultTemplateCdhatdcnservice>(entity =>
        {
            entity.HasKey(e => e.ResultTemplateCdhaTdcnServiceId).HasName("CDHATDCNResultTemplate_CDHATDCNService_pkey");

            entity.ToTable("CDHATDCNResultTemplate_CDHATDCNService", tb => tb.HasComment("Mẫu kết quả CDHA- Dịch vụ"));

            entity.Property(e => e.ResultTemplateCdhaTdcnServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("result_template_cdha_tdcn_service_id");
            entity.Property(e => e.CdhaTdcnId).HasColumnName("cdha_tdcn_id");
            entity.Property(e => e.CdhaTdcnResultTemplateId).HasColumnName("cdha_tdcn_result_template_id");

            entity.HasOne(d => d.CdhaTdcn).WithMany(p => p.CdhatdcnresultTemplateCdhatdcnservices)
                .HasForeignKey(d => d.CdhaTdcnId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCNResultTemplate_CDHATDCNService_cdha_tdcn_id_fkey");

            entity.HasOne(d => d.CdhaTdcnResultTemplate).WithMany(p => p.CdhatdcnresultTemplateCdhatdcnservices)
                .HasForeignKey(d => d.CdhaTdcnResultTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CDHATDCNResultTemplate_CDHATD_cdha_tdcn_result_template_id_fkey");
        });

        modelBuilder.Entity<ChemistryOtherSourcesPayAttribute>(entity =>
        {
            entity.HasKey(e => e.ChemistryOtherSourcePayAttributeId).HasName("Chemistry_OtherSourcesPayAttribute_pkey");

            entity.ToTable("Chemistry_OtherSourcesPayAttribute", tb => tb.HasComment("Hóa chất - Nguồn khác chi trả"));

            entity.Property(e => e.ChemistryOtherSourcePayAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("chemistry_other_source_pay_attribute_id");
            entity.Property(e => e.ChemistriesId).HasColumnName("chemistries_id");
            entity.Property(e => e.OtherSourcePayAttributeId).HasColumnName("other_source_pay_attribute_id");

            entity.HasOne(d => d.Chemistries).WithMany(p => p.ChemistryOtherSourcesPayAttributes)
                .HasForeignKey(d => d.ChemistriesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Chemistry_OtherSourcesPayAttribute_chemistries_id_fkey");

            entity.HasOne(d => d.OtherSourcePayAttribute).WithMany(p => p.ChemistryOtherSourcesPayAttributes)
                .HasForeignKey(d => d.OtherSourcePayAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Chemistry_OtherSourcesPayAttr_other_source_pay_attribute_i_fkey");
        });

        modelBuilder.Entity<ChemistryPurposeCodeAttribute>(entity =>
        {
            entity.HasKey(e => e.ChemistryPurposeCodeAttributeId).HasName("Chemistry_PurposeCodeAttribute_pkey");

            entity.ToTable("Chemistry_PurposeCodeAttribute", tb => tb.HasComment("Hóa chất - Mục đích sử dụng"));

            entity.Property(e => e.ChemistryPurposeCodeAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("chemistry_purpose_code_attribute_id");
            entity.Property(e => e.ChemistriesId).HasColumnName("chemistries_id");
            entity.Property(e => e.PurposeCodeAttributeId).HasColumnName("purpose_code_attribute_id");

            entity.HasOne(d => d.Chemistries).WithMany(p => p.ChemistryPurposeCodeAttributes)
                .HasForeignKey(d => d.ChemistriesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Chemistry_PurposeCodeAttribute_chemistries_id_fkey");

            entity.HasOne(d => d.PurposeCodeAttribute).WithMany(p => p.ChemistryPurposeCodeAttributes)
                .HasForeignKey(d => d.PurposeCodeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Chemistry_PurposeCodeAttribute_purpose_code_attribute_id_fkey");
        });

        modelBuilder.Entity<ChemistyCostGroup>(entity =>
        {
            entity.HasKey(e => e.ChemistryCostGroupId).HasName("Chemisty_CostGroup_pkey");

            entity.ToTable("Chemisty_CostGroup", tb => tb.HasComment("Hóa chất - nhóm chi phí"));

            entity.Property(e => e.ChemistryCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("chemistry_cost_group_id");
            entity.Property(e => e.ChemistriesId).HasColumnName("chemistries_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.Chemistries).WithMany(p => p.ChemistyCostGroups)
                .HasForeignKey(d => d.ChemistriesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Chemisty_CostGroup_chemistries_id_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.ChemistyCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Chemisty_CostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<ConferenceMinutesHistory>(entity =>
        {
            entity.HasKey(e => e.ConferenceMinutesHistoryId).HasName("ConferenceMinutesHistory_pkey");

            entity.ToTable("ConferenceMinutesHistory", tb => tb.HasComment("Lịch sử biên bản hội chẩn"));

            entity.Property(e => e.ConferenceMinutesHistoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("conference_minutes_history_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.Conclude)
                .HasComment("Kết luận")
                .HasColumnName("conclude");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DiseaseProgressionSummary)
                .HasComment("Tóm tắt quá trình diễn biến bệnh, quá trình điều trị và chăm sóc người bệnh")
                .HasColumnName("disease_progression_summary");
            entity.Property(e => e.DocumentTemplateResultId).HasColumnName("document_template_result_id");
            entity.Property(e => e.EndDate)
                .HasComment("Thời gian kết thúc hội chẩn")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.Participants)
                .HasComment("Thành viên tham gia")
                .HasColumnName("participants");
            entity.Property(e => e.Preside)
                .HasComment("Chủ tọa")
                .HasColumnName("preside");
            entity.Property(e => e.Secretary)
                .HasComment("Thư ký")
                .HasColumnName("secretary");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("now()")
                .HasComment("Thời gian kết thúc hội chẩn")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.SubName)
                .HasComment("Mô tả thêm của tên biên bản hội chẩn")
                .HasColumnType("character varying")
                .HasColumnName("sub_name");
            entity.Property(e => e.TreatmentDirection)
                .HasComment("Hướng điều trị")
                .HasColumnName("treatment_direction");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.ConferenceMinutesHistories)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ConferenceMinutesHistory_basic_information_patient_id_fkey");

            entity.HasOne(d => d.DocumentTemplateResult).WithMany(p => p.ConferenceMinutesHistories)
                .HasForeignKey(d => d.DocumentTemplateResultId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ConferenceMinutesHistory_document_template_result_id_fkey");
        });

        modelBuilder.Entity<CouncilDetailCouncil>(entity =>
        {
            entity.HasKey(e => e.CouncilDetailCouncilId).HasName("Council_DetailCouncil_pkey");

            entity.ToTable("Council_DetailCouncil", tb => tb.HasComment("Hội đồng - chi tiết hội đồng"));

            entity.Property(e => e.CouncilDetailCouncilId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("council_detail_council_id");
            entity.Property(e => e.CouncilDetailId).HasColumnName("council_detail_id");
            entity.Property(e => e.CouncilId).HasColumnName("council_id");

            entity.HasOne(d => d.CouncilDetail).WithMany(p => p.CouncilDetailCouncils)
                .HasForeignKey(d => d.CouncilDetailId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Council_DetailCouncil_council_detail_id_fkey");

            entity.HasOne(d => d.Council).WithMany(p => p.CouncilDetailCouncils)
                .HasForeignKey(d => d.CouncilId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Council_DetailCouncil_council_id_fkey");
        });

        modelBuilder.Entity<CounterCounterType>(entity =>
        {
            entity.HasKey(e => e.CounterCounterType1).HasName("Counter_CounterType_pkey");

            entity.ToTable("Counter_CounterType", tb => tb.HasComment("Quầy - Loại quầy"));

            entity.Property(e => e.CounterCounterType1)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("counter_counter_type");
            entity.Property(e => e.CounterId).HasColumnName("counter_id");
            entity.Property(e => e.CounterTypeId).HasColumnName("counter_type_id");

            entity.HasOne(d => d.Counter).WithMany(p => p.CounterCounterTypes)
                .HasForeignKey(d => d.CounterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Counter_CounterType_counter_id_fkey");

            entity.HasOne(d => d.CounterType).WithMany(p => p.CounterCounterTypes)
                .HasForeignKey(d => d.CounterTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Counter_CounterType_counter_type_id_fkey");
        });

        modelBuilder.Entity<CounterReceptionObject>(entity =>
        {
            entity.HasKey(e => e.CounterReceptionObjectId).HasName("Counter_ReceptionObject_pkey");

            entity.ToTable("Counter_ReceptionObject", tb => tb.HasComment("Quầy - Đối tượng tiếp đón"));

            entity.Property(e => e.CounterReceptionObjectId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("counter_reception_object_id");
            entity.Property(e => e.CounterId).HasColumnName("counter_id");
            entity.Property(e => e.IsInsurance)
                .HasComment("bảo hiểm")
                .HasColumnName("is_insurance");
            entity.Property(e => e.IsNonInsurance)
                .HasComment("không bảo hiểm")
                .HasColumnName("is_non_insurance");
            entity.Property(e => e.IsPriority)
                .HasComment("ưu tiên")
                .HasColumnName("is_priority");
            entity.Property(e => e.PriorityInsurance)
                .HasComment("mức độ ưu tiên bảo hiểm")
                .HasColumnName("priority_insurance");
            entity.Property(e => e.PriorityNonInsurance)
                .HasComment("mức độ ưu tiên không bảo hiểm")
                .HasColumnName("priority_non_insurance");
            entity.Property(e => e.PriorityPriorty)
                .HasComment("mức độ ưu tiên ưu tiên")
                .HasColumnName("priority_priorty");

            entity.HasOne(d => d.Counter).WithMany(p => p.CounterReceptionObjects)
                .HasForeignKey(d => d.CounterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Counter_ReceptionObject_counter_id_fkey");
        });

        modelBuilder.Entity<DepartmentBorrow>(entity =>
        {
            entity.HasKey(e => e.DepartmentBorrowId).HasName("Department_Borrow_pkey");

            entity.ToTable("Department_Borrow", tb => tb.HasComment("Khoa- Mượn giường tại khoa"));

            entity.Property(e => e.DepartmentBorrowId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("department_borrow_id");
            entity.Property(e => e.DepartBorrowId).HasColumnName("depart_borrow_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");

            entity.HasOne(d => d.DepartBorrow).WithMany(p => p.DepartmentBorrowDepartBorrows)
                .HasForeignKey(d => d.DepartBorrowId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_Borrow_depart_borrow_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.DepartmentBorrowDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_Borrow_department_id_fkey");
        });

        modelBuilder.Entity<DepartmentBuilding>(entity =>
        {
            entity.HasKey(e => e.DepartmentBuildingId).HasName("Department_Building_pkey");

            entity.ToTable("Department_Building", tb => tb.HasComment("Khoa - Nhà"));

            entity.Property(e => e.DepartmentBuildingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("department_building_id");
            entity.Property(e => e.BuildingId).HasColumnName("building_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");

            entity.HasOne(d => d.Building).WithMany(p => p.DepartmentBuildings)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_Building_building_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.DepartmentBuildings)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_Building_department_id_fkey");
        });

        modelBuilder.Entity<DepartmentBuildingMoney>(entity =>
        {
            entity.HasKey(e => e.DepartmentBuildingMoneyId).HasName("Department_BuildingMoney_pkey");

            entity.ToTable("Department_BuildingMoney", tb => tb.HasComment("Khoa - Nhà thu tiền"));

            entity.Property(e => e.DepartmentBuildingMoneyId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("department_building_money_id");
            entity.Property(e => e.BuildingId).HasColumnName("building_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");

            entity.HasOne(d => d.Building).WithMany(p => p.DepartmentBuildingMoneys)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_BuildingMoney_building_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.DepartmentBuildingMoneys)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_BuildingMoney_department_id_fkey");
        });

        modelBuilder.Entity<DepartmentFacultyNature>(entity =>
        {
            entity.HasKey(e => e.DepartmentFacultyNatureId).HasName("Department_FacultyNature_pkey");

            entity.ToTable("Department_FacultyNature", tb => tb.HasComment("Khoa - Tính chất khoa"));

            entity.Property(e => e.DepartmentFacultyNatureId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("department_faculty_nature_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.FacultyNatureId).HasColumnName("faculty_nature_id");

            entity.HasOne(d => d.Department).WithMany(p => p.DepartmentFacultyNatures)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_FacultyNature_department_id_fkey");

            entity.HasOne(d => d.FacultyNature).WithMany(p => p.DepartmentFacultyNatures)
                .HasForeignKey(d => d.FacultyNatureId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Department_FacultyNature_faculty_nature_id_fkey");
        });

        modelBuilder.Entity<DesignateServiceDiscountHistory>(entity =>
        {
            entity.HasKey(e => e.DesignateServiceDiscountHistoryId).HasName("DesignateService_Discount_History_pkey");

            entity.ToTable("DesignateService_Discount_History", tb => tb.HasComment("Lịch sử giảm giá"));

            entity.Property(e => e.DesignateServiceDiscountHistoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designate_service_discount_history_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.QtyNew).HasColumnName("qty_new");
            entity.Property(e => e.QtyOld).HasColumnName("qty_old");
            entity.Property(e => e.ReceiptCodeDesignateServiceDiscountId).HasColumnName("receipt_code_designate_service_discount_id");

            entity.HasOne(d => d.ReceiptCodeDesignateServiceDiscount).WithMany(p => p.DesignateServiceDiscountHistories)
                .HasForeignKey(d => d.ReceiptCodeDesignateServiceDiscountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateService_Discount_His_receipt_code_designate_servi_fkey");
        });

        modelBuilder.Entity<DesignateServicePrescription>(entity =>
        {
            entity.HasKey(e => e.DesignateServicePrescriptionId).HasName("DesignateService_Prescription_pkey");

            entity.ToTable("DesignateService_Prescription", tb => tb.HasComment("Chỉ địnhThông tin đơn thuốc"));

            entity.Property(e => e.DesignateServicePrescriptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designate_service_prescription_id");
            entity.Property(e => e.Advice)
                .HasComment("lời dặn")
                .HasColumnName("advice");
            entity.Property(e => e.AdviceId)
                .HasComment("lời dặn")
                .HasColumnName("advice_id");
            entity.Property(e => e.AppointmentDate).HasColumnName("appointment_date");
            entity.Property(e => e.BasicInformatonPatientId).HasColumnName("basic_informaton_patient_id");
            entity.Property(e => e.Batch).HasColumnName("batch");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.IsType).HasColumnName("is_type");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.NumberOfDay).HasColumnName("number_of_day");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.AdviceNavigation).WithMany(p => p.DesignateServicePrescriptions)
                .HasForeignKey(d => d.AdviceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateService_Prescription_advice_id_fkey");

            entity.HasOne(d => d.BasicInformatonPatient).WithMany(p => p.DesignateServicePrescriptions)
                .HasForeignKey(d => d.BasicInformatonPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateService_Prescription_basic_informaton_patient_id_fk");
        });

        modelBuilder.Entity<DesignateServicePrescriptionExamine>(entity =>
        {
            entity.HasKey(e => e.PrescriptionExamineId).HasName("DesignateServic_PrescriptionExamine_pkey");

            entity.ToTable("DesignateService_PrescriptionExamine", tb => tb.HasComment("Thông tin đơn thuốc khám bệnh"));

            entity.Property(e => e.PrescriptionExamineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("prescription_examine_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DesignateServicePrescriptionId).HasColumnName("designate_service_prescription_id");
            entity.Property(e => e.DosageId).HasColumnName("dosage_id");
            entity.Property(e => e.IsNocharge).HasColumnName("is_nocharge");
            entity.Property(e => e.IsPay).HasColumnName("is_pay");
            entity.Property(e => e.NumberDay).HasColumnName("number_day");
            entity.Property(e => e.PrescriptionType).HasColumnName("prescription_type");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.QtyPerTime).HasColumnName("qty_per_time");
            entity.Property(e => e.QtyPrimary).HasColumnName("qty_primary");
            entity.Property(e => e.TimePerDay).HasColumnName("time_per_day");
            entity.Property(e => e.TimeUse).HasColumnName("time_use");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.Use).HasColumnName("use");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.Account).WithMany(p => p.DesignateServicePrescriptionExamines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateServic_PrescriptionExamine_account_id_fkey");

            entity.HasOne(d => d.DesignateServicePrescription).WithMany(p => p.DesignateServicePrescriptionExamines)
                .HasForeignKey(d => d.DesignateServicePrescriptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateServic_PrescriptionE_designate_service_prescripti_fkey");

            entity.HasOne(d => d.Dosage).WithMany(p => p.DesignateServicePrescriptionExamines)
                .HasForeignKey(d => d.DosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateService_PrescriptionExamine_dosage_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.DesignateServicePrescriptionExamines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateServic_PrescriptionExamine_product_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.DesignateServicePrescriptionExamines)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateService_PrescriptionExamine_warehouse_id_fkey");
        });

        modelBuilder.Entity<DesignateServicePrescriptionIpd>(entity =>
        {
            entity.HasKey(e => e.DesignateServicePrescriptionIpdId).HasName("DesignateService_Prescription_IPD_pkey");

            entity.ToTable("DesignateService_Prescription_IPD", tb => tb.HasComment("Nội trú - Chi tiết dơn thuốc"));

            entity.Property(e => e.DesignateServicePrescriptionIpdId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designate_service_prescription_ipd_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DesignateServicePrescriptionId).HasColumnName("designate_service_prescription_id");
            entity.Property(e => e.IpdId).HasColumnName("ipd_id");

            entity.HasOne(d => d.DesignateServicePrescription).WithMany(p => p.DesignateServicePrescriptionIpds)
                .HasForeignKey(d => d.DesignateServicePrescriptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateService_Prescription_IPD_designate_service_prescrip");

            entity.HasOne(d => d.Ipd).WithMany(p => p.DesignateServicePrescriptionIpds)
                .HasForeignKey(d => d.IpdId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignateService_Prescription_IPD_ipd_id_fkey");
        });

        modelBuilder.Entity<DesignateServicePrescriptionMedical>(entity =>
        {
            entity.HasKey(e => e.DesignateServicePrescriptionMedicalId).HasName("DesignateService_PrescriptionMedical_pkey");

            entity.ToTable("DesignateService_PrescriptionMedical", tb => tb.HasComment("Chỉ địng thuốc kê ngoài"));

            entity.Property(e => e.DesignateServicePrescriptionMedicalId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designate_service_prescription_medical_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Data)
                .HasColumnType("jsonb")
                .HasColumnName("data");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.UpdateAt).HasColumnName("update_at");
        });

        modelBuilder.Entity<DesignationKitAccount>(entity =>
        {
            entity.HasKey(e => e.DesignationKitAccountId).HasName("DesignationKit_Account_pkey");

            entity.ToTable("DesignationKit_Account", tb => tb.HasComment("Bộ chỉ định -tài khoản"));

            entity.Property(e => e.DesignationKitAccountId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_account_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.DesignationKitId).HasColumnName("designation_kit_id");

            entity.HasOne(d => d.Account).WithMany(p => p.DesignationKitAccounts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_Account_account_id_fkey");

            entity.HasOne(d => d.DesignationKit).WithMany(p => p.DesignationKitAccounts)
                .HasForeignKey(d => d.DesignationKitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_Account_designation_kit_id_fkey");
        });

        modelBuilder.Entity<DesignationKitDesignatedFaculty>(entity =>
        {
            entity.HasKey(e => e.DesignationKitDesignatedFacultyId).HasName("DesignationKit_DesignatedFaculty_pkey");

            entity.ToTable("DesignationKit_DesignatedFaculty", tb => tb.HasComment("Bộ chỉ định - Khoa chỉ định dịch vụ"));

            entity.Property(e => e.DesignationKitDesignatedFacultyId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_designated_faculty_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DesignationKitId).HasColumnName("designation_kit_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Department).WithMany(p => p.DesignationKitDesignatedFaculties)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_DesignatedFaculty_department_id_fkey");

            entity.HasOne(d => d.DesignationKit).WithMany(p => p.DesignationKitDesignatedFaculties)
                .HasForeignKey(d => d.DesignationKitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_DesignatedFaculty_designation_kit_id_fkey");
        });

        modelBuilder.Entity<DesignationKitDesignationKitService>(entity =>
        {
            entity.HasKey(e => e.DesignationKitDesignationKitServiceId).HasName("DesignationKit_DesignationKitService_pkey");

            entity.ToTable("DesignationKit_DesignationKitService", tb => tb.HasComment("bộ chỉ định - dịch vụ trong bộ"));

            entity.Property(e => e.DesignationKitDesignationKitServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_designation_kit_service_id");
            entity.Property(e => e.DesignationKitId).HasColumnName("designation_kit_id");
            entity.Property(e => e.DesignationKitServiceId).HasColumnName("designation_kit_service_id");

            entity.HasOne(d => d.DesignationKit).WithMany(p => p.DesignationKitDesignationKitServices)
                .HasForeignKey(d => d.DesignationKitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_DesignationKitService_designation_kit_id_fkey");

            entity.HasOne(d => d.DesignationKitService).WithMany(p => p.DesignationKitDesignationKitServices)
                .HasForeignKey(d => d.DesignationKitServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_DesignationKitSe_designation_kit_service_id_fkey");
        });

        modelBuilder.Entity<DesignationKitDesignationKitServiceDetail>(entity =>
        {
            entity.HasKey(e => e.DesignationKitServiceDetailsId).HasName("DesignationKit_DesignationKitService_Detail_pkey");

            entity.ToTable("DesignationKit_DesignationKitService_Detail", tb => tb.HasComment("Chi tiết bộ chỉ định"));

            entity.Property(e => e.DesignationKitServiceDetailsId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_service_details_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DesignationKitId).HasColumnName("designation_kit_id");
            entity.Property(e => e.DesignationKitServiceId).HasColumnName("designation_kit_service_id");
            entity.Property(e => e.Total)
                .HasColumnType("money")
                .HasColumnName("total");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DesignationKit).WithMany(p => p.DesignationKitDesignationKitServiceDetails)
                .HasForeignKey(d => d.DesignationKitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_DesignationKitService_De_designation_kit_id_fkey");

            entity.HasOne(d => d.DesignationKitService).WithMany(p => p.DesignationKitDesignationKitServiceDetails)
                .HasForeignKey(d => d.DesignationKitServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_DesignationKitS_designation_kit_service_id_fkey1");
        });

        modelBuilder.Entity<DesignationKitServiceList>(entity =>
        {
            entity.HasKey(e => e.DesigntionKitServiceListId).HasName("DesignationKit_ServiceList_pkey");

            entity.ToTable("DesignationKit_ServiceList", tb => tb.HasComment("Bộ chỉ định - Trường hợp kê dịch vụ"));

            entity.Property(e => e.DesigntionKitServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designtion_kit_service_list_id");
            entity.Property(e => e.DesignationKitId).HasColumnName("designation_kit_id");
            entity.Property(e => e.ServiceListAttributeId).HasColumnName("service_list_attribute_id");

            entity.HasOne(d => d.DesignationKit).WithMany(p => p.DesignationKitServiceLists)
                .HasForeignKey(d => d.DesignationKitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_ServiceList_designtion_kit_id_fkey");

            entity.HasOne(d => d.ServiceListAttribute).WithMany(p => p.DesignationKitServiceLists)
                .HasForeignKey(d => d.ServiceListAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_ServiceList_service_list_attribute_id_fkey");
        });

        modelBuilder.Entity<DesignationKitServiceType>(entity =>
        {
            entity.HasKey(e => e.DesignationKitServiceTypeId).HasName("DesignationKit_ServiceType_pkey");

            entity.ToTable("DesignationKit_ServiceType", tb => tb.HasComment("Bộ chỉ định - Loại dịch vụ"));

            entity.Property(e => e.DesignationKitServiceTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_service_type_id");
            entity.Property(e => e.DesignationKitId).HasColumnName("designation_kit_id");
            entity.Property(e => e.ServiceTypeConceptId).HasColumnName("service_type_concept_id");

            entity.HasOne(d => d.DesignationKit).WithMany(p => p.DesignationKitServiceTypes)
                .HasForeignKey(d => d.DesignationKitId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_ServiceType_designation_kit_id_fkey");

            entity.HasOne(d => d.ServiceTypeConcept).WithMany(p => p.DesignationKitServiceTypes)
                .HasForeignKey(d => d.ServiceTypeConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKit_ServiceType_service_type_concept_id_fkey");
        });

        modelBuilder.Entity<DesignationKitServiceWarehouse>(entity =>
        {
            entity.HasKey(e => e.DesignationKitServiceWarehouseId).HasName("DesignationKitService_Warehouse_pkey");

            entity.ToTable("DesignationKitService_Warehouse", tb => tb.HasComment("Dịch vụ trong bộ - kho"));

            entity.Property(e => e.DesignationKitServiceWarehouseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("designation_kit_service_warehouse_id");
            entity.Property(e => e.DesignationKitServiceId).HasColumnName("designation_kit_service_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.DesignationKitService).WithMany(p => p.DesignationKitServiceWarehouses)
                .HasForeignKey(d => d.DesignationKitServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKitService_Warehouse_designation_kit_service_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.DesignationKitServiceWarehouses)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DesignationKitService_Warehouse_warehouse_id_fkey");
        });

        modelBuilder.Entity<DirectDepartment>(entity =>
        {
            entity.HasKey(e => e.DirectDepartmentId).HasName("DirectDepartment_pkey");

            entity.ToTable("DirectDepartment", tb => tb.HasComment("Chuyển khoa"));

            entity.Property(e => e.DirectDepartmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("direct_department_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DeparmentDirectionId)
                .HasComment("Khoa chuyển đến")
                .HasColumnName("deparment_direction_id");
            entity.Property(e => e.DepartmentLeaveId)
                .HasComment("Khoa chuyển đi")
                .HasColumnName("department_leave_id");
            entity.Property(e => e.SetupMedicalRecordId).HasColumnName("setup_medical_record_id");
            entity.Property(e => e.TimeDirection)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("time_direction");

            entity.HasOne(d => d.DeparmentDirection).WithMany(p => p.DirectDepartmentDeparmentDirections)
                .HasForeignKey(d => d.DeparmentDirectionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectDepartment_deparment_direction_id_fkey");

            entity.HasOne(d => d.DepartmentLeave).WithMany(p => p.DirectDepartmentDepartmentLeaves)
                .HasForeignKey(d => d.DepartmentLeaveId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectDepartment_department_leave_id_fkey");

            entity.HasOne(d => d.SetupMedicalRecord).WithMany(p => p.DirectDepartments)
                .HasForeignKey(d => d.SetupMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectDepartment_setup_medical_record_id_fkey");
        });

        modelBuilder.Entity<DirectHospitalize>(entity =>
        {
            entity.HasKey(e => e.DirectHospitalizeId).HasName("DirectHospitalize_pkey");

            entity.ToTable("DirectHospitalize", tb => tb.HasComment("Kết thúc khám - chuyển viện"));

            entity.Property(e => e.DirectHospitalizeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("direct_hospitalize_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.ClinicalSigns)
                .HasComment("dấu hiệu lâm sàng")
                .HasColumnName("clinical_signs");
            entity.Property(e => e.CreatedAt)
                .HasComment("chuyển tuyến hồi")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DirectExamine)
                .HasComment("hướng điều trị")
                .HasColumnName("direct_examine");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.FromDate1).HasColumnName("from_date1");
            entity.Property(e => e.FullName)
                .HasComment("người hộ tống")
                .HasColumnName("full_name");
            entity.Property(e => e.Hospital3).HasColumnName("hospital3");
            entity.Property(e => e.HospitalId)
                .HasComment("kính gửi")
                .HasColumnName("hospital_id");
            entity.Property(e => e.HospitalId2)
                .HasComment("bv đã khám và điều trị")
                .HasColumnName("hospital_id2");
            entity.Property(e => e.JobId)
                .HasComment("nghè nghiệp")
                .HasColumnName("job_id");
            entity.Property(e => e.MethodExamine)
                .HasComment("phương pháp điều trị")
                .HasColumnName("method_examine");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.ReasonDirect)
                .HasComment("lý do chuyên : 1 đủ điều kiện, 2 là không phù hợp với khả năng 3 là theo yêu cầu")
                .HasColumnName("reason_direct");
            entity.Property(e => e.ResultClinicalSigns)
                .HasComment("kết quả cận lâm sàng")
                .HasColumnName("result_clinical_signs");
            entity.Property(e => e.StatusExamine)
                .HasComment("trạng thái điều trị")
                .HasColumnName("status_examine");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.ToDate1).HasColumnName("to_date1");
            entity.Property(e => e.VehicleDirect)
                .HasComment("phương tiện vận chuyển")
                .HasColumnName("vehicle_direct");
            entity.Property(e => e.Workplace)
                .HasColumnType("character varying")
                .HasColumnName("workplace");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.DirectHospitalizes)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectHospitalize_basic_information_patient_id_fkey");

            entity.HasOne(d => d.Hospital3Navigation).WithMany(p => p.DirectHospitalizeHospital3Navigations)
                .HasForeignKey(d => d.Hospital3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectHospitalize_hospital3_fkey");

            entity.HasOne(d => d.Hospital).WithMany(p => p.DirectHospitalizeHospitals)
                .HasForeignKey(d => d.HospitalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectHospitalize_hospital_id_fkey");

            entity.HasOne(d => d.HospitalId2Navigation).WithMany(p => p.DirectHospitalizeHospitalId2Navigations)
                .HasForeignKey(d => d.HospitalId2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectHospitalize_hospital_id2_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.DirectHospitalizes)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectHospitalize_job_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.DirectHospitalizes)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectHospitalize_patient_id_fkey");
        });

        modelBuilder.Entity<DirectMedicalExamie>(entity =>
        {
            entity.HasKey(e => e.DirectMedicalExamineId).HasName("DirectMedicalExamie_pkey");

            entity.ToTable("DirectMedicalExamie", tb => tb.HasComment("Chuyển phòng khám"));

            entity.Property(e => e.DirectMedicalExamineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("direct_medical_examine_id");
            entity.Property(e => e.BasicInformationId)
                .HasComment("thông tin bệnh nhân")
                .HasColumnName("basic_information_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DirectPatientDesignateServiceId)
                .HasComment("chỉ định dịch vụ sau khi đổi")
                .HasColumnName("direct_patient_designate_service_id");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("chỉ định dịch vụ trước")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Reason)
                .HasComment("lý do")
                .HasColumnName("reason");
            entity.Property(e => e.RoomDirectId)
                .HasComment("phòng chuyển")
                .HasColumnName("room_direct_id");
            entity.Property(e => e.RoomId)
                .HasComment("phòng trước khi chuyển")
                .HasColumnName("room_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BasicInformation).WithMany(p => p.DirectMedicalExamies)
                .HasForeignKey(d => d.BasicInformationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectMedicalExamie_basic_information_id_fkey");

            entity.HasOne(d => d.DirectPatientDesignateService).WithMany(p => p.DirectMedicalExamieDirectPatientDesignateServices)
                .HasForeignKey(d => d.DirectPatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectMedicalExamie_direct_patient_designate_service_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.DirectMedicalExamiePatientDesignateServices)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectMedicalExamie_patient_designate_service_id_fkey");

            entity.HasOne(d => d.RoomDirect).WithMany(p => p.DirectMedicalExamieRoomDirects)
                .HasForeignKey(d => d.RoomDirectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectMedicalExamie_room_direct_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.DirectMedicalExamieRooms)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DirectMedicalExamie_room_id_fkey");
        });

        modelBuilder.Entity<DoctorDosageDrug>(entity =>
        {
            entity.HasKey(e => e.DoctorDosageDrugId).HasName("DoctorDosage_Medicine_pkey");

            entity.ToTable("DoctorDosage_Drug", tb => tb.HasComment("Liều dùng bác sĩ - Danh sách thuốc"));

            entity.Property(e => e.DoctorDosageDrugId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("doctor_dosage_drug_id");
            entity.Property(e => e.DoctorDosageId).HasColumnName("doctor_dosage_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");

            entity.HasOne(d => d.DoctorDosage).WithMany(p => p.DoctorDosageDrugs)
                .HasForeignKey(d => d.DoctorDosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DoctorDosage_Medicine_doctor_dosage_id_fkey");

            entity.HasOne(d => d.Drug).WithMany(p => p.DoctorDosageDrugs)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DoctorDosage_Drug_drug_id_fkey");
        });

        modelBuilder.Entity<DocumentResultPdf>(entity =>
        {
            entity.HasKey(e => e.DocumentResultPdfId).HasName("DocumentResultPDF_pkey");

            entity.ToTable("DocumentResultPDF", tb => tb.HasComment("Kết quả xét nghiệm pdf"));

            entity.Property(e => e.DocumentResultPdfId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("document_result_pdf_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.PdfData).HasColumnName("pdf_data");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.DocumentResultPdfs)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentResultPDF_patient_reception_id_fkey");
        });

        modelBuilder.Entity<DocumentTemplateResult>(entity =>
        {
            entity.HasKey(e => e.DocumentTemplateResultId).HasName("DocumentTemplateResult_pkey");

            entity.ToTable("DocumentTemplateResult", tb => tb.HasComment("Mẫu Kết quả phiếu in"));

            entity.HasIndex(e => new { e.BasicInformationPatientId, e.PatientReceptionId, e.PatientDesignateServiceId, e.ReportTypeId }, "documenttemplateresult_basic_information_patient_id_patient_key").IsUnique();

            entity.Property(e => e.DocumentTemplateResultId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("document_template_result_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.Data)
                .HasColumnType("jsonb")
                .HasColumnName("data");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DrugType)
                .HasDefaultValueSql("0")
                .HasColumnName("drug_type");
            entity.Property(e => e.IsIpd)
                .HasDefaultValueSql("1")
                .HasComment("1. ngoại trú 2 nội trú")
                .HasColumnName("is_ipd");
            entity.Property(e => e.NumberReceiptCode)
                .HasColumnType("character varying")
                .HasColumnName("number_receipt_code");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.ReportType).HasColumnName("report_type");
            entity.Property(e => e.ReportTypeId).HasColumnName("report_type_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.DocumentTemplateResults)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResult_basic_information_patient_id_fkey");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DocumentTemplateResults)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResult_created_by_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.DocumentTemplateResults)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResult_patient_designate_service_id_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.DocumentTemplateResults)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResult_patient_reception_id_fkey");

            entity.HasOne(d => d.ReportTypeNavigation).WithMany(p => p.DocumentTemplateResults)
                .HasForeignKey(d => d.ReportTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResult_report_type_id_fkey");
        });

        modelBuilder.Entity<DocumentTemplateResultCdha>(entity =>
        {
            entity.HasKey(e => e.DocumentTemplateResultCdhaId).HasName("DocumentTemplateResultCDHA_pkey");

            entity.ToTable("DocumentTemplateResultCDHA", tb => tb.HasComment("Kết quả cdha"));

            entity.Property(e => e.DocumentTemplateResultCdhaId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("document_template_result_cdha_id");
            entity.Property(e => e.AccountApprove).HasColumnName("account_approve");
            entity.Property(e => e.AccountRead).HasColumnName("account_read");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Data)
                .HasColumnType("jsonb")
                .HasColumnName("data");
            entity.Property(e => e.DatePicture)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_picture");
            entity.Property(e => e.IsIpd).HasColumnName("is_ipd");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.Pdf).HasColumnName("pdf");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TemplateCdhaLvl1).HasColumnName("template_cdha_lvl1");
            entity.Property(e => e.TemplateCdhaLvl2).HasColumnName("template_cdha_lvl2");
            entity.Property(e => e.TemplateCdhaLvl3).HasColumnName("template_cdha_lvl3");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.AccountApproveNavigation).WithMany(p => p.DocumentTemplateResultCdhaAccountApproveNavigations)
                .HasForeignKey(d => d.AccountApprove)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_account_approve_fkey");

            entity.HasOne(d => d.AccountReadNavigation).WithMany(p => p.DocumentTemplateResultCdhaAccountReadNavigations)
                .HasForeignKey(d => d.AccountRead)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_account_read_fkey");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.DocumentTemplateResultCdhas)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_basic_information_patient_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.DocumentTemplateResultCdhas)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_patient_designate_service_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.DocumentTemplateResultCdhas)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_patient_id_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.DocumentTemplateResultCdhas)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_patient_reception_id_fkey");

            entity.HasOne(d => d.TemplateCdhaLvl1Navigation).WithMany(p => p.DocumentTemplateResultCdhas)
                .HasForeignKey(d => d.TemplateCdhaLvl1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_template_cdha_lvl1_fkey");

            entity.HasOne(d => d.TemplateCdhaLvl2Navigation).WithMany(p => p.DocumentTemplateResultCdhas)
                .HasForeignKey(d => d.TemplateCdhaLvl2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_template_cdha_lvl2_fkey");

            entity.HasOne(d => d.TemplateCdhaLvl3Navigation).WithMany(p => p.DocumentTemplateResultCdhas)
                .HasForeignKey(d => d.TemplateCdhaLvl3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultCDHA_template_cdha_lvl3_fkey");
        });

        modelBuilder.Entity<DocumentTemplateResultLi>(entity =>
        {
            entity.HasKey(e => e.DocumentTemplateResultLisId).HasName("DocumentTemplateResultLis_pkey");

            entity.ToTable(tb => tb.HasComment("Mẫu Kết quả phiếu in"));

            entity.HasIndex(e => new { e.PatientReceptionId, e.PatientDesignateServiceId }, "DocumentTemplateResultLis_basic_information_patient_id_patient_").IsUnique();

            entity.Property(e => e.DocumentTemplateResultLisId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("document_template_result_lis_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.Data)
                .HasColumnType("jsonb")
                .HasColumnName("data");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsIpd)
                .HasDefaultValueSql("1")
                .HasComment("1. ngoại trú 2 nội trú")
                .HasColumnName("is_ipd");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.Pdf).HasColumnName("pdf");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.DocumentTemplateResultLis)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultLis_basic_information_patient_id_fkey");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.DocumentTemplateResultLis)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultLis_created_by_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.DocumentTemplateResultLis)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultLis_patient_designate_service_id_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.DocumentTemplateResultLis)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResultLis_patient_reception_id_fkey");
        });

        modelBuilder.Entity<DocumentTemplateResultMedical>(entity =>
        {
            entity.HasKey(e => e.DocumentTemplateResultMedicalId).HasName("DocumentTemplateResult_Medical_pkey");

            entity.ToTable("DocumentTemplateResult_Medical", tb => tb.HasComment("Template thuốc"));

            entity.Property(e => e.DocumentTemplateResultMedicalId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("document_template_result_medical_id");
            entity.Property(e => e.DocumentTemplateResultId).HasColumnName("document_template_result_id");
            entity.Property(e => e.Title).HasColumnName("title");

            entity.HasOne(d => d.DocumentTemplateResult).WithMany(p => p.DocumentTemplateResultMedicals)
                .HasForeignKey(d => d.DocumentTemplateResultId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DocumentTemplateResult_Medical_document_template_result_id_fkey");
        });

        modelBuilder.Entity<DrugCostGroup>(entity =>
        {
            entity.HasKey(e => e.DrugCostGroupId).HasName("Drug_CostGroup_pkey");

            entity.ToTable("Drug_CostGroup", tb => tb.HasComment("Thuốc  - nhóm chi phí"));

            entity.Property(e => e.DrugCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drug_cost_group_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.Drug).WithMany(p => p.DrugCostGroups)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_CostGroup_drug_id_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.DrugCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_CostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<DrugDepartment>(entity =>
        {
            entity.HasKey(e => e.DrupElementId).HasName("Drug_Department_pkey");

            entity.ToTable("Drug_Department", tb => tb.HasComment("Thuốc - khoa chỉ định"));

            entity.Property(e => e.DrupElementId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drup_element_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");

            entity.HasOne(d => d.Department).WithMany(p => p.DrugDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_Department_department_id_fkey");

            entity.HasOne(d => d.Drug).WithMany(p => p.DrugDepartments)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_Department_drug_id_fkey");
        });

        modelBuilder.Entity<DrugOtherSourcesPay>(entity =>
        {
            entity.HasKey(e => e.DrugOtherSourcePayId).HasName("Drug_OtherSourcesPay_pkey");

            entity.ToTable("Drug_OtherSourcesPay", tb => tb.HasComment("Thuốc - nguồn chi trả khác"));

            entity.Property(e => e.DrugOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drug_other_source_pay_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.OtherSourcePayAttributeId).HasColumnName("other_source_pay_attribute_id");

            entity.HasOne(d => d.Drug).WithMany(p => p.DrugOtherSourcesPays)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_OtherSourcesPay_drug_id_fkey");

            entity.HasOne(d => d.OtherSourcePayAttribute).WithMany(p => p.DrugOtherSourcesPays)
                .HasForeignKey(d => d.OtherSourcePayAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_OtherSourcesPay_other_source_pay_attribute_id_fkey");
        });

        modelBuilder.Entity<DrugPurposeUsed>(entity =>
        {
            entity.HasKey(e => e.DrugPurposeUsedId).HasName("Drug_PurposeUsed_pkey");

            entity.ToTable("Drug_PurposeUsed", tb => tb.HasComment("Thuốc - mục đích sử dụng"));

            entity.Property(e => e.DrugPurposeUsedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drug_purpose_used_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.PurposeUsedAttributeId).HasColumnName("purpose_used_attribute_id");

            entity.HasOne(d => d.Drug).WithMany(p => p.DrugPurposeUseds)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_PurposeUsed_drug_id_fkey");

            entity.HasOne(d => d.PurposeUsedAttribute).WithMany(p => p.DrugPurposeUseds)
                .HasForeignKey(d => d.PurposeUsedAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Drug_PurposeUsed_purpose_used_attribute_id_fkey");
        });

        modelBuilder.Entity<DrugTabDosage>(entity =>
        {
            entity.HasKey(e => e.DrugDosageId).HasName("CategoryTabDosage_pkey");

            entity.ToTable("Drug_TabDosage", tb => tb.HasComment("Danh mục Thuốc  tab liều dùng"));

            entity.Property(e => e.DrugDosageId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drug_dosage_id");
            entity.Property(e => e.DosageId).HasColumnName("dosage_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");

            entity.HasOne(d => d.Dosage).WithMany(p => p.DrugTabDosages)
                .HasForeignKey(d => d.DosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTabDosage_dosage_id_fkey");

            entity.HasOne(d => d.Drug).WithMany(p => p.DrugTabDosages)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryTabDosage_drug_id_fkey");
        });

        modelBuilder.Entity<DryingCostSupply>(entity =>
        {
            entity.HasKey(e => e.DryingCostSuppliesId).HasName("DryingCost_Supplies_pkey");

            entity.ToTable("DryingCost_Supplies", tb => tb.HasComment("Chi phí hấp sấy - vật tư"));

            entity.Property(e => e.DryingCostSuppliesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("drying_cost_supplies_id");
            entity.Property(e => e.DryingCostId).HasColumnName("drying_cost_id");
            entity.Property(e => e.SuppliesId).HasColumnName("supplies_id");

            entity.HasOne(d => d.DryingCost).WithMany(p => p.DryingCostSupplies)
                .HasForeignKey(d => d.DryingCostId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DryingCost_Supplies_drying_cost_id_fkey");

            entity.HasOne(d => d.Supplies).WithMany(p => p.DryingCostSupplies)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("DryingCost_Supplies_supplies_id_fkey");
        });

        modelBuilder.Entity<EmployeeDepartment>(entity =>
        {
            entity.HasKey(e => e.EmployeeDepartmentId).HasName("Employee_DepartmentRoom_pkey");

            entity.ToTable("Employee_Department", tb => tb.HasComment("nhân viên - thông tinkhoa phòng - nhà"));

            entity.Property(e => e.EmployeeDepartmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("employee_department_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");

            entity.HasOne(d => d.Department).WithMany(p => p.EmployeeDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_DepartmentRoom_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeDepartments)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_DepartmentRoom_employee_id_fkey");
        });

        modelBuilder.Entity<EmployeeDepartmentBuilding>(entity =>
        {
            entity.HasKey(e => e.EmployeeDepartmentBuildingId).HasName("Employee_Department_Building_pkey");

            entity.ToTable("Employee_Department_Building", tb => tb.HasComment("Thông tin phòng - nhà"));

            entity.Property(e => e.EmployeeDepartmentBuildingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("employee_department_building_id");
            entity.Property(e => e.BuildingId).HasColumnName("building_id");
            entity.Property(e => e.EmployeeDepartmentId).HasColumnName("employee_department_id");

            entity.HasOne(d => d.Building).WithMany(p => p.EmployeeDepartmentBuildings)
                .HasForeignKey(d => d.BuildingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_Department_Building_building_id_fkey");

            entity.HasOne(d => d.EmployeeDepartment).WithMany(p => p.EmployeeDepartmentBuildings)
                .HasForeignKey(d => d.EmployeeDepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_Department_Building_employee_department_id_fkey");
        });

        modelBuilder.Entity<EmployeeDepartmentRoom>(entity =>
        {
            entity.HasKey(e => e.EmployeeDepartmentRoomId).HasName("Employee_Department_Room_pkey");

            entity.ToTable("Employee_Department_Room", tb => tb.HasComment("nhân viên thông tin khoa phòng phòng"));

            entity.Property(e => e.EmployeeDepartmentRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("employee_department_room_id");
            entity.Property(e => e.EmployeeDepartmentId).HasColumnName("employee_department_id");
            entity.Property(e => e.RoomId).HasColumnName("room_id");

            entity.HasOne(d => d.EmployeeDepartment).WithMany(p => p.EmployeeDepartmentRooms)
                .HasForeignKey(d => d.EmployeeDepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_Department_Room_employee_department_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.EmployeeDepartmentRooms)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_Department_Room_room_id_fkey");
        });

        modelBuilder.Entity<EmployeeSpecialist>(entity =>
        {
            entity.HasKey(e => e.EmployeeSpecialistId).HasName("Employee_Specialist_pkey");

            entity.ToTable("Employee_Specialist", tb => tb.HasComment("Nhân viên - chuyên khoa"));

            entity.Property(e => e.EmployeeSpecialistId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("employee_specialist_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.SpecialistId).HasColumnName("specialist_id");

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeSpecialists)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_Specialist_employee_id_fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.EmployeeSpecialists)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Employee_Specialist_specialist_id_fkey");
        });

        modelBuilder.Entity<EventInvocationLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_invocation_logs_pkey");

            entity.ToTable("event_invocation_logs", "hdb_catalog");

            entity.HasIndex(e => e.EventId, "event_invocation_logs_event_id_idx");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Request)
                .HasColumnType("json")
                .HasColumnName("request");
            entity.Property(e => e.Response)
                .HasColumnType("json")
                .HasColumnName("response");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TriggerName).HasColumnName("trigger_name");
        });

        modelBuilder.Entity<EventLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("event_log_pkey");

            entity.ToTable("event_log", "hdb_catalog");

            entity.HasIndex(e => new { e.Locked, e.NextRetryAt, e.CreatedAt }, "event_log_fetch_events")
                .HasFilter("((delivered = false) AND (error = false) AND (archived = false))")
                .HasNullSortOrder(new[] { NullSortOrder.NullsFirst, NullSortOrder.NullsFirst, NullSortOrder.NullsLast });

            entity.HasIndex(e => e.TriggerName, "event_log_trigger_name_idx");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Archived).HasColumnName("archived");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Delivered).HasColumnName("delivered");
            entity.Property(e => e.Error).HasColumnName("error");
            entity.Property(e => e.Locked).HasColumnName("locked");
            entity.Property(e => e.NextRetryAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("next_retry_at");
            entity.Property(e => e.Payload)
                .HasColumnType("jsonb")
                .HasColumnName("payload");
            entity.Property(e => e.SchemaName).HasColumnName("schema_name");
            entity.Property(e => e.TableName).HasColumnName("table_name");
            entity.Property(e => e.Tries).HasColumnName("tries");
            entity.Property(e => e.TriggerName).HasColumnName("trigger_name");
        });

        modelBuilder.Entity<GroupServiceLevel1ServiceUnCompleteStatus>(entity =>
        {
            entity.HasKey(e => e.GroupServiceLvl1ServiceUncompleteStatusId).HasName("GroupServiceLevel1_ServiceUnCompleteStatus_pkey");

            entity.ToTable("GroupServiceLevel1_ServiceUnCompleteStatus", tb => tb.HasComment("Nhóm dịch vụ cấp 1 - Tạng thái không hoàn thành dịch vụ"));

            entity.Property(e => e.GroupServiceLvl1ServiceUncompleteStatusId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_service_lvl1_service_uncomplete_status_id");
            entity.Property(e => e.GroupServiceLevel1Id).HasColumnName("group_service_level1_id");
            entity.Property(e => e.ServiceUncompleteStatusId).HasColumnName("service_uncomplete_status_id");

            entity.HasOne(d => d.GroupServiceLevel1).WithMany(p => p.GroupServiceLevel1ServiceUnCompleteStatuses)
                .HasForeignKey(d => d.GroupServiceLevel1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("GroupServiceLevel1_ServiceUnComple_group_service_level1_id_fkey");

            entity.HasOne(d => d.ServiceUncompleteStatus).WithMany(p => p.GroupServiceLevel1ServiceUnCompleteStatuses)
                .HasForeignKey(d => d.ServiceUncompleteStatusId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("GroupServiceLevel1_ServiceUnC_service_uncomplete_status_id_fkey");
        });

        modelBuilder.Entity<GroupServiceLevel2ServiceUnCompleteStatus>(entity =>
        {
            entity.HasKey(e => e.GroupServiceLevel2ServiceUncompletedStatusId).HasName("GroupServiceLevel2_ServiceUnCompleteStatus_pkey");

            entity.ToTable("GroupServiceLevel2_ServiceUnCompleteStatus", tb => tb.HasComment("Nhóm dịch vụ cấp 2 - Trạng thái không hoàn thành dv"));

            entity.Property(e => e.GroupServiceLevel2ServiceUncompletedStatusId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_service_level2_service_uncompleted_status_id");
            entity.Property(e => e.GroupServiceLevel2Id).HasColumnName("group_service_level2_id");
            entity.Property(e => e.ServiceUncompleteStatusAttributeId).HasColumnName("service_uncomplete_status_attribute_id");

            entity.HasOne(d => d.GroupServiceLevel2).WithMany(p => p.GroupServiceLevel2ServiceUnCompleteStatuses)
                .HasForeignKey(d => d.GroupServiceLevel2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("GroupServiceLevel2_ServiceUnComple_group_service_level2_id_fkey");

            entity.HasOne(d => d.ServiceUncompleteStatusAttribute).WithMany(p => p.GroupServiceLevel2ServiceUnCompleteStatuses)
                .HasForeignKey(d => d.ServiceUncompleteStatusAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("GroupServiceLevel2_ServiceUnC_service_uncomplete_status_at_fkey");
        });

        modelBuilder.Entity<GroupServiceLevel3ServiceUnCompleteStatus>(entity =>
        {
            entity.HasKey(e => e.GroupServiceLevel3ServiceUncompleteStatusId).HasName("GroupServiceLevel3_ServiceUnCompleteStatus_pkey");

            entity.ToTable("GroupServiceLevel3_ServiceUnCompleteStatus", tb => tb.HasComment("Nhóm dịch vụ cấp 3 - Trạng thái không hoàn thành dv"));

            entity.Property(e => e.GroupServiceLevel3ServiceUncompleteStatusId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("group_service_level3_service_uncomplete_status_id");
            entity.Property(e => e.GroupServiceLevel3Id).HasColumnName("group_service_level3_id");
            entity.Property(e => e.ServiceUncompleteStatusAttributeId).HasColumnName("service_uncomplete_status_attribute_id");

            entity.HasOne(d => d.GroupServiceLevel3).WithMany(p => p.GroupServiceLevel3ServiceUnCompleteStatuses)
                .HasForeignKey(d => d.GroupServiceLevel3Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("GroupServiceLevel3_ServiceUnComple_group_service_level3_id_fkey");

            entity.HasOne(d => d.ServiceUncompleteStatusAttribute).WithMany(p => p.GroupServiceLevel3ServiceUnCompleteStatuses)
                .HasForeignKey(d => d.ServiceUncompleteStatusAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("GroupServiceLevel3_ServiceUnC_service_uncomplete_status_at_fkey");
        });

        modelBuilder.Entity<HdbActionLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_action_log_pkey");

            entity.ToTable("hdb_action_log", "hdb_catalog");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActionName).HasColumnName("action_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Errors)
                .HasColumnType("jsonb")
                .HasColumnName("errors");
            entity.Property(e => e.InputPayload)
                .HasColumnType("jsonb")
                .HasColumnName("input_payload");
            entity.Property(e => e.RequestHeaders)
                .HasColumnType("jsonb")
                .HasColumnName("request_headers");
            entity.Property(e => e.ResponsePayload)
                .HasColumnType("jsonb")
                .HasColumnName("response_payload");
            entity.Property(e => e.ResponseReceivedAt).HasColumnName("response_received_at");
            entity.Property(e => e.SessionVariables)
                .HasColumnType("jsonb")
                .HasColumnName("session_variables");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<HdbCronEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_cron_events_pkey");

            entity.ToTable("hdb_cron_events", "hdb_catalog");

            entity.HasIndex(e => e.Status, "hdb_cron_event_status");

            entity.HasIndex(e => new { e.TriggerName, e.ScheduledTime }, "hdb_cron_events_unique_scheduled")
                .IsUnique()
                .HasFilter("(status = 'scheduled'::text)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.NextRetryAt).HasColumnName("next_retry_at");
            entity.Property(e => e.ScheduledTime).HasColumnName("scheduled_time");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'scheduled'::text")
                .HasColumnName("status");
            entity.Property(e => e.Tries).HasColumnName("tries");
            entity.Property(e => e.TriggerName).HasColumnName("trigger_name");
        });

        modelBuilder.Entity<HdbCronEventInvocationLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_cron_event_invocation_logs_pkey");

            entity.ToTable("hdb_cron_event_invocation_logs", "hdb_catalog");

            entity.HasIndex(e => e.EventId, "hdb_cron_event_invocation_event_id");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Request)
                .HasColumnType("json")
                .HasColumnName("request");
            entity.Property(e => e.Response)
                .HasColumnType("json")
                .HasColumnName("response");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Event).WithMany(p => p.HdbCronEventInvocationLogs)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hdb_cron_event_invocation_logs_event_id_fkey");
        });

        modelBuilder.Entity<HdbEventLogCleanup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_event_log_cleanups_pkey");

            entity.ToTable("hdb_event_log_cleanups", "hdb_catalog");

            entity.HasIndex(e => new { e.TriggerName, e.ScheduledAt }, "hdb_event_log_cleanups_trigger_name_scheduled_at_key").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.DeletedEventInvocationLogs).HasColumnName("deleted_event_invocation_logs");
            entity.Property(e => e.DeletedEventLogs).HasColumnName("deleted_event_logs");
            entity.Property(e => e.ScheduledAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_at");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TriggerName).HasColumnName("trigger_name");
        });

        modelBuilder.Entity<HdbMetadatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_metadata_pkey");

            entity.ToTable("hdb_metadata", "hdb_catalog");

            entity.HasIndex(e => e.ResourceVersion, "hdb_metadata_resource_version_key").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Metadata)
                .HasColumnType("json")
                .HasColumnName("metadata");
            entity.Property(e => e.ResourceVersion)
                .HasDefaultValueSql("1")
                .HasColumnName("resource_version");
        });

        modelBuilder.Entity<HdbScheduledEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_scheduled_events_pkey");

            entity.ToTable("hdb_scheduled_events", "hdb_catalog");

            entity.HasIndex(e => e.Status, "hdb_scheduled_event_status");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.HeaderConf)
                .HasColumnType("json")
                .HasColumnName("header_conf");
            entity.Property(e => e.NextRetryAt).HasColumnName("next_retry_at");
            entity.Property(e => e.Payload)
                .HasColumnType("json")
                .HasColumnName("payload");
            entity.Property(e => e.RetryConf)
                .HasColumnType("json")
                .HasColumnName("retry_conf");
            entity.Property(e => e.ScheduledTime).HasColumnName("scheduled_time");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'scheduled'::text")
                .HasColumnName("status");
            entity.Property(e => e.Tries).HasColumnName("tries");
            entity.Property(e => e.WebhookConf)
                .HasColumnType("json")
                .HasColumnName("webhook_conf");
        });

        modelBuilder.Entity<HdbScheduledEventInvocationLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_scheduled_event_invocation_logs_pkey");

            entity.ToTable("hdb_scheduled_event_invocation_logs", "hdb_catalog");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Request)
                .HasColumnType("json")
                .HasColumnName("request");
            entity.Property(e => e.Response)
                .HasColumnType("json")
                .HasColumnName("response");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Event).WithMany(p => p.HdbScheduledEventInvocationLogs)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hdb_scheduled_event_invocation_logs_event_id_fkey");
        });

        modelBuilder.Entity<HdbSchemaNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hdb_schema_notifications_pkey");

            entity.ToTable("hdb_schema_notifications", "hdb_catalog");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.InstanceId).HasColumnName("instance_id");
            entity.Property(e => e.Notification)
                .HasColumnType("json")
                .HasColumnName("notification");
            entity.Property(e => e.ResourceVersion)
                .HasDefaultValueSql("1")
                .HasColumnName("resource_version");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<HdbSourceCatalogVersion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("hdb_source_catalog_version", "hdb_catalog");

            entity.Property(e => e.UpgradedOn).HasColumnName("upgraded_on");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<HdbVersion>(entity =>
        {
            entity.HasKey(e => e.HasuraUuid).HasName("hdb_version_pkey");

            entity.ToTable("hdb_version", "hdb_catalog");

            entity.Property(e => e.HasuraUuid)
                .HasDefaultValueSql("hdb_catalog.gen_hasura_uuid()")
                .HasColumnName("hasura_uuid");
            entity.Property(e => e.CliState)
                .HasDefaultValueSql("'{}'::jsonb")
                .HasColumnType("jsonb")
                .HasColumnName("cli_state");
            entity.Property(e => e.ConsoleState)
                .HasDefaultValueSql("'{}'::jsonb")
                .HasColumnType("jsonb")
                .HasColumnName("console_state");
            entity.Property(e => e.EeClientId).HasColumnName("ee_client_id");
            entity.Property(e => e.EeClientSecret).HasColumnName("ee_client_secret");
            entity.Property(e => e.UpgradedOn).HasColumnName("upgraded_on");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<HistoryPartnerGroupService>(entity =>
        {
            entity.HasKey(e => e.HistoryPartnerGroupServiceId).HasName("PartnerHistory_GroupService_pkey");

            entity.ToTable("HistoryPartner_GroupService", tb => tb.HasComment("Lịch sử Đối tác - Nhóm dịch vụ"));

            entity.Property(e => e.HistoryPartnerGroupServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("history_partner_group_service_id");
            entity.Property(e => e.GroupServiceId).HasColumnName("group_service_id");
            entity.Property(e => e.HistoryPartnerId).HasColumnName("history_partner_id");

            entity.HasOne(d => d.GroupService).WithMany(p => p.HistoryPartnerGroupServices)
                .HasForeignKey(d => d.GroupServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_GroupService_group_service_id_fkey");

            entity.HasOne(d => d.HistoryPartner).WithMany(p => p.HistoryPartnerGroupServices)
                .HasForeignKey(d => d.HistoryPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_GroupService_partner_id_fkey");
        });

        modelBuilder.Entity<HistoryPartnerTypeAtrribute>(entity =>
        {
            entity.HasKey(e => e.HistoryPartnerTypeAttributeId).HasName("HistoryPartner_TypeAtrribute_pkey");

            entity.ToTable("HistoryPartner_TypeAtrribute", tb => tb.HasComment("Lịch sử Đối tác - Loại đối tác"));

            entity.Property(e => e.HistoryPartnerTypeAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("history_partner_type_attribute_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.HistoryPartnerId).HasColumnName("history_partner_id");
            entity.Property(e => e.TypeAttributeId).HasColumnName("type_attribute_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.HistoryPartnerTypeAtrributes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_TypeAtrribute_concept_id_fkey");

            entity.HasOne(d => d.HistoryPartner).WithMany(p => p.HistoryPartnerTypeAtrributes)
                .HasForeignKey(d => d.HistoryPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_TypeAtrribute_partner_id_fkey");

            entity.HasOne(d => d.TypeAttribute).WithMany(p => p.HistoryPartnerTypeAtrributes)
                .HasForeignKey(d => d.TypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_TypeAtrribute_type_attribute_id_fkey");
        });

        modelBuilder.Entity<HistoryPartnerTypeServiceAttribute>(entity =>
        {
            entity.HasKey(e => e.HistoryPartnerTypeServiceId).HasName("HistoryPartner_TypeServiceAttribute_pkey");

            entity.ToTable("HistoryPartner_TypeServiceAttribute", tb => tb.HasComment("Lịch sử Đối tác - Loại dịch vụ"));

            entity.Property(e => e.HistoryPartnerTypeServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("history_partner_type_service_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.HistoryPartnerId).HasColumnName("history_partner_id");
            entity.Property(e => e.TypeServiceAttributeId).HasColumnName("type_service_attribute_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.HistoryPartnerTypeServiceAttributes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_TypeServiceAttribute_concept_id_fkey");

            entity.HasOne(d => d.HistoryPartner).WithMany(p => p.HistoryPartnerTypeServiceAttributes)
                .HasForeignKey(d => d.HistoryPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_TypeServiceAttribute_history_partner_id_fkey");

            entity.HasOne(d => d.TypeServiceAttribute).WithMany(p => p.HistoryPartnerTypeServiceAttributes)
                .HasForeignKey(d => d.TypeServiceAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HistoryPartner_TypeServiceAttribute_type_service_attribute_i");
        });

        modelBuilder.Entity<HopitalizeDentomaxillofacial>(entity =>
        {
            entity.HasKey(e => e.HopitalizeDentomaxillofacialId).HasName("Hopitalize_Dentomaxillofacial_pkey");

            entity.ToTable("Hopitalize_Dentomaxillofacial", tb => tb.HasComment("Nhập viện răng hàm mặt"));

            entity.Property(e => e.HopitalizeDentomaxillofacialId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("hopitalize_dentomaxillofacial_id");
            entity.Property(e => e.Dentomaxillofacial).HasColumnName("dentomaxillofacial");
            entity.Property(e => e.HopitalizeId).HasColumnName("hopitalize_id");

            entity.HasOne(d => d.Hopitalize).WithMany(p => p.HopitalizeDentomaxillofacials)
                .HasForeignKey(d => d.HopitalizeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hopitalize_Dentomaxillofacial_hopitalize_id_fkey");
        });

        modelBuilder.Entity<HospitalDischargeInfomationCompanying>(entity =>
        {
            entity.HasKey(e => e.HospitalDischargeInfomationCompanyingId).HasName("HospitalDischargeInfomation_Companying_pkey");

            entity.ToTable("HospitalDischargeInfomation_Companying", tb => tb.HasComment("thông tin ra viện - chẩn đoán kèm theo"));

            entity.Property(e => e.HospitalDischargeInfomationCompanyingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("hospital_discharge_infomation_companying_id");
            entity.Property(e => e.DiagnoseId).HasColumnName("diagnose_id");
            entity.Property(e => e.DiagnoseNote).HasColumnName("diagnose_note");
            entity.Property(e => e.HospitalDischargeInfomationId).HasColumnName("hospital_discharge_infomation_id");

            entity.HasOne(d => d.Diagnose).WithMany(p => p.HospitalDischargeInfomationCompanyings)
                .HasForeignKey(d => d.DiagnoseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HospitalDischargeInfomation_Companying_diagnose_id_fkey");

            entity.HasOne(d => d.HospitalDischargeInfomation).WithMany(p => p.HospitalDischargeInfomationCompanyings)
                .HasForeignKey(d => d.HospitalDischargeInfomationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("HospitalDischargeInfomation_C_hospital_discharge_infomatio_fkey");
        });

        modelBuilder.Entity<Hospitalize>(entity =>
        {
            entity.HasKey(e => e.HospitalizeId).HasName("Hospitalize_pkey");

            entity.ToTable("Hospitalize", tb => tb.HasComment("Kết luận khám - Nhập viện"));

            entity.Property(e => e.HospitalizeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("hospitalize_id");
            entity.Property(e => e.BasicInformationPatientId)
                .HasComment("thông tin cơ bản bệnh nhân")
                .HasColumnName("basic_information_patient_id");
            entity.Property(e => e.ConceptId)
                .HasComment("loại đối tượng nội trú,ngoại trú")
                .HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.FullName)
                .HasComment("Họ tên người nhà")
                .HasColumnType("character varying")
                .HasColumnName("full_name");
            entity.Property(e => e.HospitalName)
                .HasComment("tên bệnh viện")
                .HasColumnName("hospital_name");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.NumberOfHospitalizeId)
                .ValueGeneratedOnAdd()
                .HasComment("số vào viện")
                .HasColumnName("number_of_hospitalize_id");
            entity.Property(e => e.PatientId)
                .HasComment("thông tin bệnh nhân")
                .HasColumnName("patient_id");
            entity.Property(e => e.Phone)
                .HasComment("só điện thoại")
                .HasColumnName("phone");
            entity.Property(e => e.Processed)
                .HasComment("đã xử lý")
                .HasColumnName("processed");
            entity.Property(e => e.RoomId)
                .HasComment("buồng khám bệnh")
                .HasColumnName("room_id");
            entity.Property(e => e.SumaryClinic)
                .HasComment("tóm tắt lâm sàng")
                .HasColumnName("sumary_clinic");
            entity.Property(e => e.Workplace)
                .HasComment("nơi làm việc")
                .HasColumnName("workplace");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.Hospitalizes)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hospitalize_basic_information_patient_id_fkey");

            entity.HasOne(d => d.Concept).WithMany(p => p.Hospitalizes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hospitalize_concept_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.Hospitalizes)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hospitalize_department_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.Hospitalizes)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hospitalize_patient_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.Hospitalizes)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hospitalize_room_id_fkey");
        });

        modelBuilder.Entity<HospitalizeEye>(entity =>
        {
            entity.HasKey(e => e.HospitalizeEyeId).HasName("Hospitalize_eye_pkey");

            entity.ToTable("Hospitalize_eye", tb => tb.HasComment("Nhập viện -khoa mắt"));

            entity.Property(e => e.HospitalizeEyeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("hospitalize_eye_id");
            entity.Property(e => e.EyeLeftTension)
                .HasComment("nhãn áp mắt trái")
                .HasColumnType("character varying")
                .HasColumnName("eye_left_tension");
            entity.Property(e => e.EyeRightTension)
                .HasComment("nhãn áo mắt phải")
                .HasColumnType("character varying")
                .HasColumnName("eye_right_tension");
            entity.Property(e => e.EyesightGlassesLeftEye)
                .HasComment("thị lực có kính mắt trái")
                .HasColumnType("character varying")
                .HasColumnName("eyesight_glasses_left_eye");
            entity.Property(e => e.EyesightGlassesRightEye)
                .HasComment("thị lực có kính mắt phải")
                .HasColumnType("character varying")
                .HasColumnName("eyesight_glasses_right_eye");
            entity.Property(e => e.EyesightWithoutGlassesLeftEye)
                .HasComment("thị lực không kính mắt trái")
                .HasColumnType("character varying")
                .HasColumnName("eyesight_without_glasses_left_eye");
            entity.Property(e => e.EyesightWithoutGlassesRightEye)
                .HasComment("thị lực không kính mắt phải")
                .HasColumnType("character varying")
                .HasColumnName("eyesight_without_glasses_right_eye");
            entity.Property(e => e.HospitalizeId).HasColumnName("hospitalize_id");

            entity.HasOne(d => d.Hospitalize).WithMany(p => p.HospitalizeEyes)
                .HasForeignKey(d => d.HospitalizeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hospitalize_eye_hospitalize_id_fkey");
        });

        modelBuilder.Entity<HospitalizeOtorhinolaryngology>(entity =>
        {
            entity.HasKey(e => e.HospitalizeOtorhinolaryngologyId).HasName("Hospitalize_Otorhinolaryngology_pkey");

            entity.ToTable("Hospitalize_Otorhinolaryngology", tb => tb.HasComment("nhập viện - Tai mũi họng"));

            entity.Property(e => e.HospitalizeOtorhinolaryngologyId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("hospitalize_otorhinolaryngology_id");
            entity.Property(e => e.Ears).HasColumnName("ears");
            entity.Property(e => e.HopitalizeId).HasColumnName("hopitalize_id");
            entity.Property(e => e.Nose).HasColumnName("nose");
            entity.Property(e => e.Throat).HasColumnName("throat");

            entity.HasOne(d => d.Hopitalize).WithMany(p => p.HospitalizeOtorhinolaryngologies)
                .HasForeignKey(d => d.HopitalizeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Hospitalize_Otorhinolaryngology_hospitalize_id_fkey");
        });

        modelBuilder.Entity<InfomationDrugSupply>(entity =>
        {
            entity.HasKey(e => e.InfomationDrugId).HasName("Infomation_Drug_pkey");

            entity.ToTable("Infomation_Drug_Supplies", tb => tb.HasComment("Thông tin đơn thuốc"));

            entity.Property(e => e.InfomationDrugId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("infomation_drug_id");
            entity.Property(e => e.ApproveDate)
                .HasComment("ngày duyệt")
                .HasColumnName("approve_date");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("ngày tạo")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.FinishedDate)
                .HasComment("ngày phát")
                .HasColumnName("finished_date");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái 0 tạo mới,2  đã duyệt, 3 đã phát(hoàn thành)")
                .HasColumnName("is_status");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnType("character varying")
                .HasColumnName("note");
            entity.Property(e => e.PatientDesignateServiceDrugId)
                .HasComment("chỉ đinh thuốc")
                .HasColumnName("patient_designate_service_drug_id");
            entity.Property(e => e.PatientDesignateSuppliesServiceId).HasColumnName("patient_designate_supplies_service_id");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("money")
                .HasColumnName("total_price");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InfomationDrugSupplies)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Infomation_Drug_created_by_fkey");

            entity.HasOne(d => d.PatientDesignateServiceDrug).WithMany(p => p.InfomationDrugSupplies)
                .HasForeignKey(d => d.PatientDesignateServiceDrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Infomation_Drug_patient_designate_service_drug_id_fkey");

            entity.HasOne(d => d.PatientDesignateSuppliesService).WithMany(p => p.InfomationDrugSupplies)
                .HasForeignKey(d => d.PatientDesignateSuppliesServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Infomation_Drug_Supplies_patient_designate_supplies_service_");
        });

        modelBuilder.Entity<InputOrOutputTypeMethod>(entity =>
        {
            entity.HasKey(e => e.InputOrOutputTypeMethodId).HasName("InputOrOutputType_Method_pkey");

            entity.ToTable("InputOrOutputType_Method", tb => tb.HasComment("Hình thức nhập xuất "));

            entity.Property(e => e.InputOrOutputTypeMethodId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("input_or_output_type_method_id");
            entity.Property(e => e.InputOrOutputTypeId).HasColumnName("input_or_output_type_id");
            entity.Property(e => e.MethodAttributeId).HasColumnName("method_attribute_id");

            entity.HasOne(d => d.InputOrOutputType).WithMany(p => p.InputOrOutputTypeMethods)
                .HasForeignKey(d => d.InputOrOutputTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("InputOrOutputType_Method_input_or_output_type_id_fkey");

            entity.HasOne(d => d.MethodAttribute).WithMany(p => p.InputOrOutputTypeMethods)
                .HasForeignKey(d => d.MethodAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("InputOrOutputType_Method_method_attribute_id_fkey");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("Jobs_pkey");

            entity.ToTable("Jobs", "hdb_catalog");

            entity.Property(e => e.JobId)
                .ValueGeneratedNever()
                .HasColumnName("job_id");
            entity.Property(e => e.IsActive)
                .HasColumnType("character varying")
                .HasColumnName("is_active");
            entity.Property(e => e.JobCode)
                .HasColumnType("character varying")
                .HasColumnName("job_code");
            entity.Property(e => e.JobTitle)
                .HasColumnType("character varying")
                .HasColumnName("job_title");
        });

        modelBuilder.Entity<KioskKioskClinicDoctor>(entity =>
        {
            entity.HasKey(e => e.KioskKioskClinicDoctorId).HasName("Kiosk_KioskClinicDoctor_pkey");

            entity.ToTable("Kiosk_KioskClinicDoctor", tb => tb.HasComment("Kios-Màn hình bác sĩ"));

            entity.Property(e => e.KioskKioskClinicDoctorId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("kiosk_kiosk_clinic_doctor_id");
            entity.Property(e => e.KioskClinicDoctorId).HasColumnName("kiosk_clinic_doctor_id");
            entity.Property(e => e.KioskId).HasColumnName("kiosk_id");

            entity.HasOne(d => d.KioskClinicDoctor).WithMany(p => p.KioskKioskClinicDoctors)
                .HasForeignKey(d => d.KioskClinicDoctorId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Kiosk_KioskClinicDoctor_kiosk_clinic_doctor_id_fkey");

            entity.HasOne(d => d.Kiosk).WithMany(p => p.KioskKioskClinicDoctors)
                .HasForeignKey(d => d.KioskId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Kiosk_KioskClinicDoctor_kiosk_id_fkey");
        });

        modelBuilder.Entity<KioskScreenKiosk>(entity =>
        {
            entity.HasKey(e => e.KioskScreenKioskId).HasName("Kiosk_ScreenKiosk_pkey");

            entity.ToTable("Kiosk_ScreenKiosk", tb => tb.HasComment("kiosk - màn hình kiosk"));

            entity.Property(e => e.KioskScreenKioskId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("kiosk_screen_kiosk_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.KioskId).HasColumnName("kiosk_id");
            entity.Property(e => e.ScreenKioskId).HasColumnName("screen_kiosk_id");

            entity.HasOne(d => d.Kiosk).WithMany(p => p.KioskScreenKiosks)
                .HasForeignKey(d => d.KioskId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Kiosk_ScreenKiosk_kiosk_id_fkey");

            entity.HasOne(d => d.ScreenKiosk).WithMany(p => p.KioskScreenKiosks)
                .HasForeignKey(d => d.ScreenKioskId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Kiosk_ScreenKiosk_screen_kiosk_id_fkey");
        });

        modelBuilder.Entity<LaboratoryAttribute>(entity =>
        {
            entity.HasKey(e => e.LaboratoryAttributeId).HasName("Laboratory_Attribute_pkey");

            entity.ToTable("Laboratory_Attribute", tb => tb.HasComment("Xét nghiệm - Thuộc tính"));

            entity.Property(e => e.LaboratoryAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_attribute_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.LaboratoryId).HasColumnName("laboratory_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.LaboratoryAttributes)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Laboratory_Attribute_attribute_id_fkey");

            entity.HasOne(d => d.Laboratory).WithMany(p => p.LaboratoryAttributes)
                .HasForeignKey(d => d.LaboratoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Laboratory_Attribute_laboratory_id_fkey");
        });

        modelBuilder.Entity<LaboratoryResultTemplateLaboratoryService>(entity =>
        {
            entity.HasKey(e => e.LaboratoryResultTeamplateLaboratoryId).HasName("LaboratoryResultTemplate_LaboratoryService_pkey");

            entity.ToTable("LaboratoryResultTemplate_LaboratoryService", tb => tb.HasComment("mẫu kết quả khám - dịch vụ"));

            entity.Property(e => e.LaboratoryResultTeamplateLaboratoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_result_teamplate_laboratory_id");
            entity.Property(e => e.LaboratoryResultTeamplateId).HasColumnName("laboratory_result_teamplate_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");

            entity.HasOne(d => d.LaboratoryResultTeamplate).WithMany(p => p.LaboratoryResultTemplateLaboratoryServices)
                .HasForeignKey(d => d.LaboratoryResultTeamplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryResultTemplate_Labo_laboratory_result_teamplate__fkey");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryResultTemplateLaboratoryServices)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryResultTemplate_LaboratoryS_laboratory_service_id_fkey");
        });

        modelBuilder.Entity<LaboratoryResultTemplateTabChildIndex>(entity =>
        {
            entity.HasKey(e => e.LaboratoryResultTemplateChildIndexId).HasName("LaboratoryResultTemplate_TabChildIndex_pkey");

            entity.ToTable("LaboratoryResultTemplate_TabChildIndex", tb => tb.HasComment("chỉ số con"));

            entity.Property(e => e.LaboratoryResultTemplateChildIndexId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_result_template_child_index_id");
            entity.Property(e => e.LaboratoryResultTemplateId).HasColumnName("laboratory_result_template_id");
            entity.Property(e => e.TabChildIndexId).HasColumnName("tab_child_index_id");

            entity.HasOne(d => d.LaboratoryResultTemplate).WithMany(p => p.LaboratoryResultTemplateTabChildIndices)
                .HasForeignKey(d => d.LaboratoryResultTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryResultTemplate_TabC_laboratory_result_template_i_fkey");

            entity.HasOne(d => d.TabChildIndex).WithMany(p => p.LaboratoryResultTemplateTabChildIndices)
                .HasForeignKey(d => d.TabChildIndexId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryResultTemplate_TabChildIndex_tab_child_index_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceOtherSourcePay>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceOtherSourcePayId).HasName("LaboratoryService_OtherSourcePay_pkey");

            entity.ToTable("LaboratoryService_OtherSourcePay", tb => tb.HasComment("Dịch vụ xét nghiệm - nguồn chi trả khác"));

            entity.Property(e => e.LaboratoryServiceOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_other_source_pay_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceOtherSourcePays)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_OtherSourcePay_laboratory_service_id_fkey");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.LaboratoryServiceOtherSourcePays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_OtherSourcePay_other_source_pay_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceServiceList>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceServiceListId).HasName("LaboratoryService_ServiceList_pkey");

            entity.ToTable("LaboratoryService_ServiceList", tb => tb.HasComment("Dịch vụ xét nghiệm - trường hợp kê dịch vụ"));

            entity.Property(e => e.LaboratoryServiceServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_service_list_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.ServiceListId).HasColumnName("service_list_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceServiceLists)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_ServiceList_laboratory_service_id_fkey");

            entity.HasOne(d => d.ServiceList).WithMany(p => p.LaboratoryServiceServiceLists)
                .HasForeignKey(d => d.ServiceListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_ServiceList_service_list_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceTabAccompanyingService>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceTabAccompanyingServiceId).HasName("LaboratoryService_TabAccompanyingService_pkey");

            entity.ToTable("LaboratoryService_TabAccompanyingService", tb => tb.HasComment("Xét nghiệm - dịch vụ kèm theo"));

            entity.Property(e => e.LaboratoryServiceTabAccompanyingServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_tab_accompanying_service_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.TabAccompanyingServiceId).HasColumnName("tab_accompanying_service_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceTabAccompanyingServices)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabAccompanyingSer_laboratory_service_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.LaboratoryServiceTabAccompanyingServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabAccompanyingService_product_id_fkey");

            entity.HasOne(d => d.TabAccompanyingService).WithMany(p => p.LaboratoryServiceTabAccompanyingServices)
                .HasForeignKey(d => d.TabAccompanyingServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabAccompany_tab_accompanying_service_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceTabChildIndex>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceTabChildIndexId).HasName("LaboratoryService_TabChildIndex_pkey");

            entity.ToTable("LaboratoryService_TabChildIndex", tb => tb.HasComment("Xét nghiệm - chỉ số con"));

            entity.Property(e => e.LaboratoryServiceTabChildIndexId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_tab_child_index_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.TabChildIndexId).HasColumnName("tab_child_index_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceTabChildIndices)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabChildIndex_laboratory_service_id_fkey");

            entity.HasOne(d => d.TabChildIndex).WithMany(p => p.LaboratoryServiceTabChildIndices)
                .HasForeignKey(d => d.TabChildIndexId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabChildIndex_tab_child_index_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceTabCostGroupId).HasName("LaboratoryService_TabCostGroup_pkey");

            entity.ToTable("LaboratoryService_TabCostGroup", tb => tb.HasComment("xét nghiệm - nhóm chi phí"));

            entity.Property(e => e.LaboratoryServiceTabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_tab_cost_group_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceTabCostGroups)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabCostGroup_laboratory_service_id_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.LaboratoryServiceTabCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabCostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceTabHistoryChanged>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceTabHistoryChangedId).HasName("LaboratoryService_TabHistoryChanged_pkey");

            entity.ToTable("LaboratoryService_TabHistoryChanged", tb => tb.HasComment("Xét nghiệm - lích sửa chỉnh sửa"));

            entity.Property(e => e.LaboratoryServiceTabHistoryChangedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_tab_history_changed_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.TabHistoryChangedId).HasColumnName("tab_history_changed_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceTabHistoryChangeds)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabHistoryChanged_laboratory_service_id_fkey");

            entity.HasOne(d => d.TabHistoryChanged).WithMany(p => p.LaboratoryServiceTabHistoryChangeds)
                .HasForeignKey(d => d.TabHistoryChangedId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabHistoryChanged_tab_history_changed_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceTabImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceTabImplementRoomId).HasName("LaboratoryService_TabImplementationRoom_pkey");

            entity.ToTable("LaboratoryService_TabImplementationRoom", tb => tb.HasComment("Xét nghiệm - phòng thực hiện"));

            entity.Property(e => e.LaboratoryServiceTabImplementRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_tab_implement_room_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.TabImplementRoomId).HasColumnName("tab_implement_room_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceTabImplementationRooms)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabImplementationR_laboratory_service_id_fkey");

            entity.HasOne(d => d.TabImplementRoom).WithMany(p => p.LaboratoryServiceTabImplementationRooms)
                .HasForeignKey(d => d.TabImplementRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabImplementationR_tab_implement_room_id_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceTabInsurancePaymentConditon>(entity =>
        {
            entity.HasKey(e => e.LaboratoryServiceTabInsurancePaymentConditionId).HasName("LaboratoryService_TabInsurancePaymentConditon_pkey");

            entity.ToTable("LaboratoryService_TabInsurancePaymentConditon", tb => tb.HasComment("Xét nghiệm - điều kiện thanh toán bh"));

            entity.Property(e => e.LaboratoryServiceTabInsurancePaymentConditionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("laboratory_service_tab_insurance_payment_condition_id");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.TabInsurancePaymentConditionId).HasColumnName("tab_insurance_payment_condition_id");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.LaboratoryServiceTabInsurancePaymentConditons)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabInsurancePaymen_laboratory_service_id_fkey");

            entity.HasOne(d => d.TabInsurancePaymentCondition).WithMany(p => p.LaboratoryServiceTabInsurancePaymentConditons)
                .HasForeignKey(d => d.TabInsurancePaymentConditionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabInsuranc_tab_insurance_payment_condit_fkey");
        });

        modelBuilder.Entity<LaboratoryServiceTabPriceOption>(entity =>
        {
            entity.HasKey(e => e.LabaratoryServiceTabPriceOptionId).HasName("LaboratoryService_TabPriceOption_pkey");

            entity.ToTable("LaboratoryService_TabPriceOption", tb => tb.HasComment("Xét nghiệm - Tùy chọn giá"));

            entity.Property(e => e.LabaratoryServiceTabPriceOptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("labaratory_service_tab_price_option_id");
            entity.Property(e => e.LabaratoryServiceId).HasColumnName("labaratory_service_id");
            entity.Property(e => e.TabPriceOptionId).HasColumnName("tab_price_option_id");

            entity.HasOne(d => d.LabaratoryService).WithMany(p => p.LaboratoryServiceTabPriceOptions)
                .HasForeignKey(d => d.LabaratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabPriceOption_labaratory_service_id_fkey");

            entity.HasOne(d => d.TabPriceOption).WithMany(p => p.LaboratoryServiceTabPriceOptions)
                .HasForeignKey(d => d.TabPriceOptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("LaboratoryService_TabPriceOption_tab_price_option_id_fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceDepartmentAssign>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceDepartmentAssignId).HasName("MedicalExaminationService_DepartmentAssigns_pkey");

            entity.ToTable("MedicalExaminationService_DepartmentAssigns", tb => tb.HasComment("Dịch vụ khám bệnh - Khoa chỉ định dịch vụ"));

            entity.Property(e => e.MedicalExaminationServiceDepartmentAssignId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_department_assign_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");

            entity.HasOne(d => d.Department).WithMany(p => p.MedicalExaminationServiceDepartmentAssigns)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_DepartmentAssigns_department_id_fkey");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceDepartmentAssigns)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Dep_medical_examination_service__fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceOtherSourcePay>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceOtherSourcePayId).HasName("MedicalExaminationService_OtherSourcePay_pkey");

            entity.ToTable("MedicalExaminationService_OtherSourcePay", tb => tb.HasComment("Dịch vụ khám bệnh - Nguồn khác chi trả"));

            entity.Property(e => e.MedicalExaminationServiceOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_other_source_pay_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceOtherSourcePays)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Oth_medical_examination_service__fkey");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.MedicalExaminationServiceOtherSourcePays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_OtherSourceP_other_source_pay_id_fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceServiceList>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceServiceListId).HasName("MedicalExaminationService_ServiceList_pkey");

            entity.ToTable("MedicalExaminationService_ServiceList", tb => tb.HasComment("Danh mục ngoài điều trị - trường hợp kê dv"));

            entity.Property(e => e.MedicalExaminationServiceServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_service_list_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.ServiceListId).HasColumnName("service_list_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceServiceLists)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Ser_medical_examination_service__fkey");

            entity.HasOne(d => d.ServiceList).WithMany(p => p.MedicalExaminationServiceServiceLists)
                .HasForeignKey(d => d.ServiceListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_ServiceList_service_list_id_fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceSpecialist>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceSpecialistId).HasName("MedicalExaminationService_Specialist_pkey");

            entity.ToTable("MedicalExaminationService_Specialist", tb => tb.HasComment("Khám bệnh chuyên khoa"));

            entity.Property(e => e.MedicalExaminationServiceSpecialistId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_specialist_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.SpecialistId).HasColumnName("specialist_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceSpecialists)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Spe_medical_examination_service__fkey");

            entity.HasOne(d => d.Specialist).WithMany(p => p.MedicalExaminationServiceSpecialists)
                .HasForeignKey(d => d.SpecialistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Specialist_specialist_id_fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceTabAccompanyingService>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceTabAccompanyingServiceId).HasName("MedicalExaminationService_TabAccompanyingService_pkey");

            entity.ToTable("MedicalExaminationService_TabAccompanyingService", tb => tb.HasComment("Dịch vụ khám bệnh - dịch vụ kèm theo"));

            entity.Property(e => e.MedicalExaminationServiceTabAccompanyingServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_tab_accompanying_service_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.TabAccompanyingServiceId).HasColumnName("tab_accompanying_service_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceTabAccompanyingServices)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Ta_medical_examination_service__fkey4");

            entity.HasOne(d => d.Product).WithMany(p => p.MedicalExaminationServiceTabAccompanyingServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_TabAccompanyingService_product_id_");

            entity.HasOne(d => d.TabAccompanyingService).WithMany(p => p.MedicalExaminationServiceTabAccompanyingServices)
                .HasForeignKey(d => d.TabAccompanyingServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_TabA_tab_accompanying_service_id_fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceTabCostGroupId).HasName("MedicalExaminationService_TabCostGroup_pkey");

            entity.ToTable("MedicalExaminationService_TabCostGroup", tb => tb.HasComment("Dịch vụ khám bệnh - Nhóm chi phí"));

            entity.Property(e => e.MedicalExaminationServiceTabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_tab_cost_group_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceTabCostGroups)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Ta_medical_examination_service__fkey3");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.MedicalExaminationServiceTabCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_TabCostGroup_tab_cost_group_id_fke");
        });

        modelBuilder.Entity<MedicalExaminationServiceTabHistoryChange>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceTabHistoryChangedId).HasName("MedicalExaminationService_TabHistoryChange_pkey");

            entity.ToTable("MedicalExaminationService_TabHistoryChange", tb => tb.HasComment("Dịch vụ khám bệnh - Lịch sử thay đổi"));

            entity.Property(e => e.MedicalExaminationServiceTabHistoryChangedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_tab_history_changed_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.TabHistoryChangeId).HasColumnName("tab_history_change_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceTabHistoryChanges)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Ta_medical_examination_service__fkey5");

            entity.HasOne(d => d.TabHistoryChange).WithMany(p => p.MedicalExaminationServiceTabHistoryChanges)
                .HasForeignKey(d => d.TabHistoryChangeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_TabHistory_tab_history_change_id_fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceTabImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceImplementRoomId).HasName("MedicalExaminationService_TabImplementationRoom_pkey");

            entity.ToTable("MedicalExaminationService_TabImplementationRoom", tb => tb.HasComment("Dịch vụ khám - phòng thực hiện"));

            entity.Property(e => e.MedicalExaminationServiceImplementRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_implement_room_id");
            entity.Property(e => e.ImplementationRoomId).HasColumnName("implementation_room_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");

            entity.HasOne(d => d.ImplementationRoom).WithMany(p => p.MedicalExaminationServiceTabImplementationRooms)
                .HasForeignKey(d => d.ImplementationRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_TabImplem_implementation_room_id_fkey");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceTabImplementationRooms)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Ta_medical_examination_service__fkey1");
        });

        modelBuilder.Entity<MedicalExaminationServiceTabInsurancePaymentCondition>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceTabInsurancePaymentConditionId).HasName("MedicalExaminationService_TabInsurancePaymentCondition_pkey");

            entity.ToTable("MedicalExaminationService_TabInsurancePaymentCondition", tb => tb.HasComment("Dịch vụ khám bệnh - Đk thanh toán bảo hiểm"));

            entity.Property(e => e.MedicalExaminationServiceTabInsurancePaymentConditionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_tab_insurance_payment_condition_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.TabInsurancePaymentConditionId).HasColumnName("tab_insurance_payment_condition_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceTabInsurancePaymentConditions)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Ta_medical_examination_service__fkey2");

            entity.HasOne(d => d.TabInsurancePaymentCondition).WithMany(p => p.MedicalExaminationServiceTabInsurancePaymentConditions)
                .HasForeignKey(d => d.TabInsurancePaymentConditionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Tab_tab_insurance_payment_condit_fkey");
        });

        modelBuilder.Entity<MedicalExaminationServiceTabPriceOption>(entity =>
        {
            entity.HasKey(e => e.MedicalExaminationServiceTabPriceOptionId).HasName("MedicalExaminationService_TabPriceOption_pkey");

            entity.ToTable("MedicalExaminationService_TabPriceOption", tb => tb.HasComment("Dịch vụ khám bệnh - Tùy chọn giá"));

            entity.Property(e => e.MedicalExaminationServiceTabPriceOptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_examination_service_tab_price_option_id");
            entity.Property(e => e.MedicalExaminationServiceId).HasColumnName("medical_examination_service_id");
            entity.Property(e => e.TabPriceOptionId).HasColumnName("tab_price_option_id");

            entity.HasOne(d => d.MedicalExaminationService).WithMany(p => p.MedicalExaminationServiceTabPriceOptions)
                .HasForeignKey(d => d.MedicalExaminationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_Tab_medical_examination_service__fkey");

            entity.HasOne(d => d.TabPriceOption).WithMany(p => p.MedicalExaminationServiceTabPriceOptions)
                .HasForeignKey(d => d.TabPriceOptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalExaminationService_TabPriceOpti_tab_price_option_id_fkey");
        });

        modelBuilder.Entity<MedicalRecordRoomBed>(entity =>
        {
            entity.HasKey(e => e.MedicalRecordRoomBedId).HasName("MedicalRecord_RoomBed_pkey");

            entity.ToTable("MedicalRecord_RoomBed", tb => tb.HasComment("Nội trú - Phòng giường"));

            entity.Property(e => e.MedicalRecordRoomBedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_record_room_bed_id");
            entity.Property(e => e.BedNumber).HasColumnName("bed_number");
            entity.Property(e => e.BedNumberId).HasColumnName("bed_number_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.FromDate).HasColumnName("from_date");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.SetupMedicalRecordId).HasColumnName("setup_medical_record_id");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.BedNumberNavigation).WithMany(p => p.MedicalRecordRoomBeds)
                .HasForeignKey(d => d.BedNumberId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_RoomBed_bed_number_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.MedicalRecordRoomBeds)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_RoomBed_room_id_fkey");

            entity.HasOne(d => d.SetupMedicalRecord).WithMany(p => p.MedicalRecordRoomBeds)
                .HasForeignKey(d => d.SetupMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_RoomBed_setup_medical_record_id_fkey");
        });

        modelBuilder.Entity<ObjectTypePaymentMethod>(entity =>
        {
            entity.HasKey(e => e.ObjectTypePaymentMethodId).HasName("ObjectType_PaymentMethod_pkey");

            entity.ToTable("ObjectType_PaymentMethod", tb => tb.HasComment("Loại đối tượng - phương thức thanh toán"));

            entity.Property(e => e.ObjectTypePaymentMethodId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("object_type_payment_method_id");
            entity.Property(e => e.AdvanceThreshold)
                .HasColumnType("money")
                .HasColumnName("advance_threshold");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ObjectTypeId).HasColumnName("object_type_id");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ObjectType).WithMany(p => p.ObjectTypePaymentMethods)
                .HasForeignKey(d => d.ObjectTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ObjectType_PaymentMethod_object_type_id_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.ObjectTypePaymentMethods)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ObjectType_PaymentMethod_payment_method_id_fkey");
        });

        modelBuilder.Entity<ObjectTypePaymentType>(entity =>
        {
            entity.HasKey(e => e.ObjectTypePaymentTypeId).HasName("ObjectType_PaymentType_pkey");

            entity.ToTable("ObjectType_PaymentType", tb => tb.HasComment("Loại đối tượng - loại hình thanh toán"));

            entity.Property(e => e.ObjectTypePaymentTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("object_type_payment_type_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ObjectTypeId).HasColumnName("object_type_id");
            entity.Property(e => e.PaymentTypeId).HasColumnName("payment_type_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ObjectType).WithMany(p => p.ObjectTypePaymentTypes)
                .HasForeignKey(d => d.ObjectTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ObjectType_PaymentType_object_type_id_fkey");

            entity.HasOne(d => d.PaymentType).WithMany(p => p.ObjectTypePaymentTypes)
                .HasForeignKey(d => d.PaymentTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ObjectType_PaymentType_payment_type_id_fkey");
        });

        modelBuilder.Entity<OrderPackageServiceUsed>(entity =>
        {
            entity.HasKey(e => e.OrderPackageServiceUsedId).HasName("OrderPackageService_PackageService_pkey");

            entity.ToTable("OrderPackageServiceUsed", tb => tb.HasComment("chi tiêt người bệnh sử dụng"));

            entity.Property(e => e.OrderPackageServiceUsedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("order_package_service_used_id");
            entity.Property(e => e.DiscountPercent)
                .HasComment("phần trăm giảm giá")
                .HasColumnName("discount_percent");
            entity.Property(e => e.IsCancel)
                .HasComment("hủy")
                .HasColumnName("is_cancel");
            entity.Property(e => e.IsFinish)
                .HasComment("kết thúc")
                .HasColumnName("is_finish");
            entity.Property(e => e.IsNoCharge)
                .HasComment("ko tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsPackageDiscount).HasColumnName("is_package_discount");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái")
                .HasColumnName("is_status");
            entity.Property(e => e.PackageDiscount)
                .HasComment("gói giảm giá")
                .HasColumnType("money")
                .HasColumnName("package_discount");
            entity.Property(e => e.PatientPackageServiceId).HasColumnName("patient_package_service_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Qty)
                .HasComment("số lượng")
                .HasColumnName("qty");
            entity.Property(e => e.QtyRemain)
                .HasComment("số lượng còn lại")
                .HasColumnName("qty_remain");
            entity.Property(e => e.QtyReturn)
                .HasComment("số lượng trả về")
                .HasColumnName("qty_return");
            entity.Property(e => e.QtyUsed)
                .HasComment("số lượng đã sử dụng")
                .HasColumnName("qty_used");
            entity.Property(e => e.ServiceDiscount)
                .HasComment("dịch vụ giảm giá")
                .HasColumnType("money")
                .HasColumnName("service_discount");
            entity.Property(e => e.VoucherDiscount)
                .HasComment("voucher giảm giá")
                .HasColumnType("money")
                .HasColumnName("voucher_discount");

            entity.HasOne(d => d.PatientPackageService).WithMany(p => p.OrderPackageServiceUseds)
                .HasForeignKey(d => d.PatientPackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OrderPackageServiceUsed_patient_package_service_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderPackageServiceUseds)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OrderPackageServiceUsed_product_id_fkey");
        });

        modelBuilder.Entity<OutsiteOfTreatmentServiceImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.OutSiteOfTreatmentServiceImplementRoom).HasName("OutsiteOfTreatmentService_ImplementationRoom_pkey");

            entity.ToTable("OutsiteOfTreatmentService_ImplementationRoom", tb => tb.HasComment("Dịch vụ ngoài điều trị - phòng thực hiện"));

            entity.Property(e => e.OutSiteOfTreatmentServiceImplementRoom)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("out_site_of_treatment_service_implement_room");
            entity.Property(e => e.OutSiteOfTreatmentServiceId).HasColumnName("out_site_of_treatment_service_id");
            entity.Property(e => e.TabImplementRoomId).HasColumnName("tab_implement_room_id");

            entity.HasOne(d => d.OutSiteOfTreatmentService).WithMany(p => p.OutsiteOfTreatmentServiceImplementationRooms)
                .HasForeignKey(d => d.OutSiteOfTreatmentServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_Imp_out_site_of_treatment_servic_fkey");

            entity.HasOne(d => d.TabImplementRoom).WithMany(p => p.OutsiteOfTreatmentServiceImplementationRooms)
                .HasForeignKey(d => d.TabImplementRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_Implementa_tab_implement_room_id_fkey");
        });

        modelBuilder.Entity<OutsiteOfTreatmentServiceInsurancePaymentCondition>(entity =>
        {
            entity.HasKey(e => e.OutSiteOfTreatmentServiceInsurancePaymentConditionId).HasName("OutsiteOfTreatmentService_InsurancePaymentCondition_pkey");

            entity.ToTable("OutsiteOfTreatmentService_InsurancePaymentCondition", tb => tb.HasComment("Dịch vụ ngoài điều trị - dk thanh toán bảo hiểm"));

            entity.Property(e => e.OutSiteOfTreatmentServiceInsurancePaymentConditionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("out_site_of_treatment_service_insurance_payment_condition_id");
            entity.Property(e => e.OutSiteOfTreatmentServiceId).HasColumnName("out_site_of_treatment_service_id");
            entity.Property(e => e.TabInsurancePaymentConditionId).HasColumnName("tab_insurance_payment_condition_id");

            entity.HasOne(d => d.OutSiteOfTreatmentService).WithMany(p => p.OutsiteOfTreatmentServiceInsurancePaymentConditions)
                .HasForeignKey(d => d.OutSiteOfTreatmentServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_Ins_out_site_of_treatment_servic_fkey");

            entity.HasOne(d => d.TabInsurancePaymentCondition).WithMany(p => p.OutsiteOfTreatmentServiceInsurancePaymentConditions)
                .HasForeignKey(d => d.TabInsurancePaymentConditionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_Ins_tab_insurance_payment_condit_fkey");
        });

        modelBuilder.Entity<OutsiteOfTreatmentServiceOtherSourcePay>(entity =>
        {
            entity.HasKey(e => e.OutsiteOfTreatmentServiceOtherSourcePayId).HasName("OutsiteOfTreatmentService_OtherSourcePay_pkey");

            entity.ToTable("OutsiteOfTreatmentService_OtherSourcePay", tb => tb.HasComment("Dịch vụ ngoài điều trị - Nguồn khác chi trả"));

            entity.Property(e => e.OutsiteOfTreatmentServiceOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("outsite_of_treatment_service_other_source_pay_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");
            entity.Property(e => e.OutsiteOfTreatmentServiceId).HasColumnName("outsite_of_treatment_service_id");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.OutsiteOfTreatmentServiceOtherSourcePays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_OtherSourcePay_other_source_pay_id");

            entity.HasOne(d => d.OutsiteOfTreatmentService).WithMany(p => p.OutsiteOfTreatmentServiceOtherSourcePays)
                .HasForeignKey(d => d.OutsiteOfTreatmentServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_OtherSourcePay_outsite_of_treatmen");
        });

        modelBuilder.Entity<OutsiteOfTreatmentServiceServiceList>(entity =>
        {
            entity.HasKey(e => e.OutsiteOfTreatmentServiceServiceListId).HasName("CategoryOutsiteOfTreatmentService_ServiceList_pkey");

            entity.ToTable("OutsiteOfTreatmentService_ServiceList", tb => tb.HasComment("ngoài điều trị - Th kê dịch vụ"));

            entity.Property(e => e.OutsiteOfTreatmentServiceServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("outsite_of_treatment_service_service_list_id");
            entity.Property(e => e.OutsiteOfTreatmentServiceId).HasColumnName("outsite_of_treatment_service_id");
            entity.Property(e => e.ServiceListId).HasColumnName("service_list_id");

            entity.HasOne(d => d.OutsiteOfTreatmentService).WithMany(p => p.OutsiteOfTreatmentServiceServiceLists)
                .HasForeignKey(d => d.OutsiteOfTreatmentServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_ServiceList_outsite_of_treatment_s");

            entity.HasOne(d => d.ServiceList).WithMany(p => p.OutsiteOfTreatmentServiceServiceLists)
                .HasForeignKey(d => d.ServiceListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_ServiceList_service_list_id_fkey");
        });

        modelBuilder.Entity<OutsiteOfTreatmentServiceTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.OutSiteOfTreatmentServiceTabCostGroupId).HasName("OutsiteOfTreatmentService_TabCostGroup_pkey");

            entity.ToTable("OutsiteOfTreatmentService_TabCostGroup", tb => tb.HasComment("Dịch vụ ngoài điều trị - Nhóm chi phí"));

            entity.Property(e => e.OutSiteOfTreatmentServiceTabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("out_site_of_treatment_service_tab_cost_group_id");
            entity.Property(e => e.OutSiteOfTreatmentServiceId).HasColumnName("out_site_of_treatment_service_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.OutSiteOfTreatmentService).WithMany(p => p.OutsiteOfTreatmentServiceTabCostGroups)
                .HasForeignKey(d => d.OutSiteOfTreatmentServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_Tab_out_site_of_treatment_servic_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.OutsiteOfTreatmentServiceTabCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_TabCostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<OutsiteOfTreatmentServiceTabOptionPrice>(entity =>
        {
            entity.HasKey(e => e.OutSiteOfTreatmentTabOptionPriceId).HasName("OutsiteOfTreatmentService_TabOptionPrice_pkey");

            entity.ToTable("OutsiteOfTreatmentService_TabOptionPrice", tb => tb.HasComment("Dịch vụ ngoài điều trị - Tùy chọn giá"));

            entity.Property(e => e.OutSiteOfTreatmentTabOptionPriceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("out_site_of_treatment_tab_option_price_id");
            entity.Property(e => e.OutSiteOfTreatmentId).HasColumnName("out_site_of_treatment_id");
            entity.Property(e => e.TabOptionPriceId).HasColumnName("tab_option_price_id");

            entity.HasOne(d => d.OutSiteOfTreatment).WithMany(p => p.OutsiteOfTreatmentServiceTabOptionPrices)
                .HasForeignKey(d => d.OutSiteOfTreatmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_TabOpti_out_site_of_treatment_id_fkey");

            entity.HasOne(d => d.TabOptionPrice).WithMany(p => p.OutsiteOfTreatmentServiceTabOptionPrices)
                .HasForeignKey(d => d.TabOptionPriceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("OutsiteOfTreatmentService_TabOptionPrice_tab_option_price_id");
        });

        modelBuilder.Entity<PackageServiceConcept>(entity =>
        {
            entity.HasKey(e => e.PackageServiceConceptId).HasName("PackageService_Concept_pkey");

            entity.ToTable("PackageService_Concept", tb => tb.HasComment("Gói dịch vụ - Loại Dịch vụ"));

            entity.Property(e => e.PackageServiceConceptId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("package_service_concept_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.PackageServiceId).HasColumnName("package_service_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.PackageServiceConcepts)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageService_Concept_concept_id_fkey");

            entity.HasOne(d => d.PackageService).WithMany(p => p.PackageServiceConcepts)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageService_Concept_package_service_id_fkey");
        });

        modelBuilder.Entity<PackageServiceDepartment>(entity =>
        {
            entity.HasKey(e => e.PackageServiceDepartmentId).HasName("PackageService_Department_pkey");

            entity.ToTable("PackageService_Department", tb => tb.HasComment("gói dịch vụ - khoa chỉ định"));

            entity.Property(e => e.PackageServiceDepartmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("package_service_department_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PackageServiceId).HasColumnName("package_service_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Department).WithMany(p => p.PackageServiceDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageService_Department_department_id_fkey");

            entity.HasOne(d => d.PackageService).WithMany(p => p.PackageServiceDepartments)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageService_Department_package_service_id_fkey");
        });

        modelBuilder.Entity<PackageServiceServiceOfPackage>(entity =>
        {
            entity.HasKey(e => e.PackageServiceServiceOfPackageId).HasName("PackageService_ServiceOfPackage_pkey");

            entity.ToTable("PackageService_ServiceOfPackage", tb => tb.HasComment("Thông tin gói -  dịch vụ trong gói"));

            entity.Property(e => e.PackageServiceServiceOfPackageId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("package_service_service_of_package_id");
            entity.Property(e => e.PackageServiceId).HasColumnName("package_service_id");
            entity.Property(e => e.ServiceOfPackageId).HasColumnName("service_of_package_id");

            entity.HasOne(d => d.PackageService).WithMany(p => p.PackageServiceServiceOfPackages)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageService_ServiceOfPackage_package_service_id_fkey");

            entity.HasOne(d => d.ServiceOfPackage).WithMany(p => p.PackageServiceServiceOfPackages)
                .HasForeignKey(d => d.ServiceOfPackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageService_ServiceOfPackage_service_of_package_id_fkey");
        });

        modelBuilder.Entity<PackageServiceUsedPayment>(entity =>
        {
            entity.HasKey(e => e.PackageServiceUserPaymentId).HasName("PackageServiceUsedPayment_pkey");

            entity.ToTable("PackageServiceUsedPayment", tb => tb.HasComment("Thanh toán gói"));

            entity.Property(e => e.PackageServiceUserPaymentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("package_service_user_payment_id");
            entity.Property(e => e.CodeBase)
                .HasColumnType("character varying")
                .HasColumnName("code_base");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.PackageReceiptCode)
                .HasComment("số phiếu đối ứng")
                .HasColumnType("character varying")
                .HasColumnName("package_receipt_code");
            entity.Property(e => e.PackageReceiptSymbol)
                .HasComment("ký hiệu")
                .HasColumnType("character varying")
                .HasColumnName("package_receipt_symbol");
            entity.Property(e => e.PackageServiceId).HasColumnName("package_service_id");
            entity.Property(e => e.PatientPackageServiceId).HasColumnName("patient_package_service_id");
            entity.Property(e => e.Reason)
                .HasComment("lý do")
                .HasColumnName("reason");
            entity.Property(e => e.Total)
                .HasComment("tổng tiền")
                .HasColumnType("money")
                .HasColumnName("total");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.PackageService).WithMany(p => p.PackageServiceUsedPayments)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageServiceUsedPayment_package_service_id_fkey");

            entity.HasOne(d => d.PatientPackageService).WithMany(p => p.PackageServiceUsedPayments)
                .HasForeignKey(d => d.PatientPackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PackageServiceUsedPayment_patient_package_service_id_fkey");
        });

        modelBuilder.Entity<PageTreamentDiagnoseCompanying>(entity =>
        {
            entity.HasKey(e => e.PageTreatmentDiagnoseCompanyingId).HasName("PageTreament_DiagnoseCompanying_pkey");

            entity.ToTable("PageTreament_DiagnoseCompanying", tb => tb.HasComment("Tờ điều trị - chẩn đoán kèm theo"));

            entity.Property(e => e.PageTreatmentDiagnoseCompanyingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("page_treatment_diagnose_companying_id");
            entity.Property(e => e.DiagnoseId).HasColumnName("diagnose_id");
            entity.Property(e => e.DiagnoseText).HasColumnName("diagnose_text");
            entity.Property(e => e.MedicalTreatmentPageTreatmentId).HasColumnName("medical_treatment_page_treatment_id");

            entity.HasOne(d => d.Diagnose).WithMany(p => p.PageTreamentDiagnoseCompanyings)
                .HasForeignKey(d => d.DiagnoseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreament_DiagnoseCompanying_diagnose_id_fkey");

            entity.HasOne(d => d.MedicalTreatmentPageTreatment).WithMany(p => p.PageTreamentDiagnoseCompanyings)
                .HasForeignKey(d => d.MedicalTreatmentPageTreatmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreament_DiagnoseCompanyi_medical_treatment_page_treat_fkey");
        });

        modelBuilder.Entity<PageTreamentPatientDesignateService>(entity =>
        {
            entity.HasKey(e => e.PageTreatmentPatientDesignateServiceId).HasName("PageTreament_PatientDesignateService_pkey");

            entity.ToTable("PageTreament_PatientDesignateService", tb => tb.HasComment("Tờ điều trị - chỉ định dịch vụ"));

            entity.Property(e => e.PageTreatmentPatientDesignateServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("page_treatment_patient_designate_service_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.MedicalTreatmentPageTreatmentId).HasColumnName("medical_treatment_page_treatment_id");
            entity.Property(e => e.PackageServiceId).HasColumnName("package_service_id");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.MedicalTreatmentPageTreatment).WithMany(p => p.PageTreamentPatientDesignateServices)
                .HasForeignKey(d => d.MedicalTreatmentPageTreatmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreament_PatientDesignate_medical_treatment_page_treat_fkey");

            entity.HasOne(d => d.PackageService).WithMany(p => p.PageTreamentPatientDesignateServices)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreament_PatientDesignateService_package_service_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PageTreamentPatientDesignateServices)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreament_PatientDesignateService_patient_designate_servi");
        });

        modelBuilder.Entity<PageTreatmentMedicalRecord>(entity =>
        {
            entity.HasKey(e => e.MedicalRecordPageTreatmentId).HasName("MedicalRecord_PageTreatment_pkey");

            entity.ToTable("PageTreatment_MedicalRecord", tb => tb.HasComment("Thông tin Tờ điều trị"));

            entity.Property(e => e.MedicalRecordPageTreatmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("medical_record_page_treatment_id");
            entity.Property(e => e.AdditionalInformation)
                .HasComment("thông tin bổ sung")
                .HasColumnName("additional_information");
            entity.Property(e => e.CareStage)
                .HasComment("chế độ chăm sóc")
                .HasColumnName("care_stage");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.DiagnoseDetail)
                .HasComment("chẩn đoán chi tiết")
                .HasColumnName("diagnose_detail");
            entity.Property(e => e.DiagnoseId)
                .HasComment("chẩn đoán bệnh")
                .HasColumnName("diagnose_id");
            entity.Property(e => e.DiagnoseText).HasColumnName("diagnose_text");
            entity.Property(e => e.Diet)
                .HasComment("chế độ ăn")
                .HasColumnName("diet");
            entity.Property(e => e.DiseaseStage)
                .HasComment("giai đoạn bệnh")
                .HasColumnName("disease_stage");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.OnlineDoctor)
                .HasComment("bác sĩ online")
                .HasColumnName("online_doctor");
            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("now()")
                .HasComment("ngày y lệnh")
                .HasColumnName("order_date");
            entity.Property(e => e.TemplateOfDevelopmentsId)
                .HasComment("diễn biến bệnh")
                .HasColumnName("template_of_developments_id");
            entity.Property(e => e.TreatmentDate)
                .HasComment("ngày khám")
                .HasColumnName("treatment_date");
            entity.Property(e => e.TreatmentDoctor)
                .HasComment("bác sĩ trực")
                .HasColumnName("treatment_doctor");

            entity.HasOne(d => d.CareStageNavigation).WithMany(p => p.PageTreatmentMedicalRecords)
                .HasForeignKey(d => d.CareStage)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_MedicalRecord_care_stage_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.PageTreatmentMedicalRecords)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_PageTreatment_department_id_fkey");

            entity.HasOne(d => d.Diagnose).WithMany(p => p.PageTreatmentMedicalRecords)
                .HasForeignKey(d => d.DiagnoseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_PageTreatment_diagnose_id_fkey");

            entity.HasOne(d => d.OnlineDoctorNavigation).WithMany(p => p.PageTreatmentMedicalRecordOnlineDoctorNavigations)
                .HasForeignKey(d => d.OnlineDoctor)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_PageTreatment_online_doctor_fkey");

            entity.HasOne(d => d.TemplateOfDevelopments).WithMany(p => p.PageTreatmentMedicalRecords)
                .HasForeignKey(d => d.TemplateOfDevelopmentsId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_PageTreatment_template_of_developments_id_fkey");

            entity.HasOne(d => d.TreatmentDoctorNavigation).WithMany(p => p.PageTreatmentMedicalRecordTreatmentDoctorNavigations)
                .HasForeignKey(d => d.TreatmentDoctor)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("MedicalRecord_PageTreatment_treatment_doctor_fkey");
        });

        modelBuilder.Entity<PageTreatmentPatientDesignateServiceChemistry>(entity =>
        {
            entity.HasKey(e => e.PageTreatmentPatientDesignateServiceChemistryId).HasName("PageTreatment_PatientDesignateService_Chemistry_pkey");

            entity.ToTable("PageTreatment_PatientDesignateService_Chemistry", tb => tb.HasComment("Tờ chỉ định - hóa chất"));

            entity.Property(e => e.PageTreatmentPatientDesignateServiceChemistryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("page_treatment_patient_designate_service_chemistry_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.PageTreatmentMedicalRecordId).HasColumnName("page_treatment_medical_record_id");
            entity.Property(e => e.PatientDesignateServiceChemistryId).HasColumnName("patient_designate_service_chemistry_id");

            entity.HasOne(d => d.PageTreatmentMedicalRecord).WithMany(p => p.PageTreatmentPatientDesignateServiceChemistries)
                .HasForeignKey(d => d.PageTreatmentMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesigna_page_treatment_medical_recor_fkey1");

            entity.HasOne(d => d.PatientDesignateServiceChemistry).WithMany(p => p.PageTreatmentPatientDesignateServiceChemistries)
                .HasForeignKey(d => d.PatientDesignateServiceChemistryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesignat_patient_designate_service_ch_fkey");
        });

        modelBuilder.Entity<PageTreatmentPatientDesignateServiceDinner>(entity =>
        {
            entity.HasKey(e => e.PageTreatmentPatientDesignateServiceDinnerId).HasName("PageTreatment_PatientDesignateService_Dinner_pkey");

            entity.ToTable("PageTreatment_PatientDesignateService_Dinner", tb => tb.HasComment("Tờ điều trị  - suất ăn"));

            entity.Property(e => e.PageTreatmentPatientDesignateServiceDinnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("page_treatment_patient_designate_service_dinner_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.PageTreatmentMedicalRecordId).HasColumnName("page_treatment_medical_record_id");
            entity.Property(e => e.PatientDesignateServiceDinnerId).HasColumnName("patient_designate_service_dinner_id");

            entity.HasOne(d => d.PageTreatmentMedicalRecord).WithMany(p => p.PageTreatmentPatientDesignateServiceDinners)
                .HasForeignKey(d => d.PageTreatmentMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesigna_page_treatment_medical_recor_fkey2");

            entity.HasOne(d => d.PatientDesignateServiceDinner).WithMany(p => p.PageTreatmentPatientDesignateServiceDinners)
                .HasForeignKey(d => d.PatientDesignateServiceDinnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesignat_patient_designate_service_di_fkey");
        });

        modelBuilder.Entity<PageTreatmentPatientDesignateServiceDrug>(entity =>
        {
            entity.HasKey(e => e.PageTreatmentPatientDesignateServiceDrugId).HasName("PageTreatment_PatientDesignateService_Drug_pkey");

            entity.ToTable("PageTreatment_PatientDesignateService_Drug", tb => tb.HasComment("Tờ điều trị - Chỉ định thuốc"));

            entity.Property(e => e.PageTreatmentPatientDesignateServiceDrugId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("page_treatment_patient_designate_service_drug_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.PageTreatmentMedicalRecordId).HasColumnName("page_treatment_medical_record_id");
            entity.Property(e => e.PatientDesignateServiceDrugId).HasColumnName("patient_designate_service_drug_id");

            entity.HasOne(d => d.PageTreatmentMedicalRecord).WithMany(p => p.PageTreatmentPatientDesignateServiceDrugs)
                .HasForeignKey(d => d.PageTreatmentMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesignat_page_treatment_medical_recor_fkey");

            entity.HasOne(d => d.PatientDesignateServiceDrug).WithMany(p => p.PageTreatmentPatientDesignateServiceDrugs)
                .HasForeignKey(d => d.PatientDesignateServiceDrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesignat_patient_designate_service_dr_fkey");
        });

        modelBuilder.Entity<PageTreatmentPatientDesignateServiceSupply>(entity =>
        {
            entity.HasKey(e => e.PageTreatmentPatientDesignateServiceSuppliesId).HasName("PageTreatment_PatientDesig_Supplies_pkey");

            entity.ToTable("PageTreatment_PatientDesignateService_Supplies", tb => tb.HasComment("Tờ điều trị - Chỉ định vât tư"));

            entity.Property(e => e.PageTreatmentPatientDesignateServiceSuppliesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("page_treatment_patient_designate_service_supplies_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.PageTreatmentMedicalRecordId).HasColumnName("page_treatment_medical_record_id");
            entity.Property(e => e.PatientDesignateServiceSuppliesId).HasColumnName("patient_designate_service_supplies_id");

            entity.HasOne(d => d.PageTreatmentMedicalRecord).WithMany(p => p.PageTreatmentPatientDesignateServiceSupplies)
                .HasForeignKey(d => d.PageTreatmentMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesignateService_Supplies_page_treatmen");

            entity.HasOne(d => d.PatientDesignateServiceSupplies).WithMany(p => p.PageTreatmentPatientDesignateServiceSupplies)
                .HasForeignKey(d => d.PatientDesignateServiceSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PageTreatment_PatientDesignateService_Supplies_patient_desig");
        });

        modelBuilder.Entity<PartnerChildPartner>(entity =>
        {
            entity.HasKey(e => e.PartnerChildPartnerId).HasName("Partner_ChildPartner_pkey");

            entity.ToTable("Partner_ChildPartner", tb => tb.HasComment("Đối tác Đối tác con"));

            entity.Property(e => e.PartnerChildPartnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("partner_child_partner_id");
            entity.Property(e => e.ChildPartnerId).HasColumnName("child_partner_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");

            entity.HasOne(d => d.ChildPartner).WithMany(p => p.PartnerChildPartners)
                .HasForeignKey(d => d.ChildPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_ChildPartner_child_partner_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PartnerChildPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_ChildPartner_partner_id_fkey");
        });

        modelBuilder.Entity<PartnerGroupService>(entity =>
        {
            entity.HasKey(e => e.PartnerGroupService1).HasName("Partner_GroupService_pkey");

            entity.ToTable("Partner_GroupService", tb => tb.HasComment("Đối tác - Nhóm dịch vụ"));

            entity.Property(e => e.PartnerGroupService1)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("partner_group_service");
            entity.Property(e => e.GroupServiceId).HasColumnName("group_service_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");

            entity.HasOne(d => d.GroupService).WithMany(p => p.PartnerGroupServices)
                .HasForeignKey(d => d.GroupServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_GroupService_group_service_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PartnerGroupServices)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_GroupService_partner_id_fkey");
        });

        modelBuilder.Entity<PartnerHistoyPartner>(entity =>
        {
            entity.HasKey(e => e.PartnerHistoryPartnerId).HasName("Partner_HistoyPartner_pkey");

            entity.ToTable("Partner_HistoyPartner", tb => tb.HasComment("Đối tác - Lịch sử thay đổi"));

            entity.Property(e => e.PartnerHistoryPartnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("partner_history_partner_id");
            entity.Property(e => e.HistoryPartnerId).HasColumnName("history_partner_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");

            entity.HasOne(d => d.HistoryPartner).WithMany(p => p.PartnerHistoyPartners)
                .HasForeignKey(d => d.HistoryPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_HistoyPartner_history_partner_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PartnerHistoyPartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_HistoyPartner_partner_id_fkey");
        });

        modelBuilder.Entity<PartnerTypeAtrribute>(entity =>
        {
            entity.HasKey(e => e.PartnerTypeAttributeId).HasName("Partner_TypeAtrribute_pkey");

            entity.ToTable("Partner_TypeAtrribute", tb => tb.HasComment("Đối tác - Loại đối tác"));

            entity.Property(e => e.PartnerTypeAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("partner_type_attribute_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.TypeAttributeId).HasColumnName("type_attribute_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.PartnerTypeAtrributes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_TypeAtrribute_concept_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PartnerTypeAtrributes)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_TypeAtrribute_partner_id_fkey");

            entity.HasOne(d => d.TypeAttribute).WithMany(p => p.PartnerTypeAtrributes)
                .HasForeignKey(d => d.TypeAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_TypeAtrribute_type_attribute_id_fkey");
        });

        modelBuilder.Entity<PartnerTypeServiceAttribute>(entity =>
        {
            entity.HasKey(e => e.PartnerTypeServiceId).HasName("Partner_TypeServiceAttribute_pkey");

            entity.ToTable("Partner_TypeServiceAttribute", tb => tb.HasComment("Đối tác - Loại dịch vụ"));

            entity.Property(e => e.PartnerTypeServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("partner_type_service_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.TypeServiceAttributeId).HasColumnName("type_service_attribute_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.PartnerTypeServiceAttributes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_TypeServiceAttribute_concept_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.PartnerTypeServiceAttributes)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_TypeServiceAttribute_partner_id_fkey");

            entity.HasOne(d => d.TypeServiceAttribute).WithMany(p => p.PartnerTypeServiceAttributes)
                .HasForeignKey(d => d.TypeServiceAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Partner_TypeServiceAttribute_type_service_attribute_id_fkey");
        });

        modelBuilder.Entity<PatientAdvanceReceipt>(entity =>
        {
            entity.HasKey(e => e.PatientAdvanceReceiptId).HasName("Patient_AdvanceReceipt_pkey");

            entity.ToTable("Patient_AdvanceReceipt", tb => tb.HasComment("bệnh nhân - Phiếu thu tạm ứng"));

            entity.Property(e => e.PatientAdvanceReceiptId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_advance_receipt_id");
            entity.Property(e => e.AdvanceReceiptCode)
                .HasComment("mã phiếu")
                .HasColumnType("character varying")
                .HasColumnName("advance_receipt_code");
            entity.Property(e => e.AdvanceReceiptSymbol)
                .HasColumnType("character varying")
                .HasColumnName("advance_receipt_symbol");
            entity.Property(e => e.CounterId)
                .HasComment("quầy")
                .HasColumnName("counter_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy)
                .HasComment("thu ngân")
                .HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.DepartmentStatus)
                .HasComment("trạng thái khoa")
                .HasColumnName("department_status");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsConfirm)
                .HasDefaultValueSql("0")
                .HasComment("0: chưa duyệt 1 duyệt")
                .HasColumnName("is_confirm");
            entity.Property(e => e.IsStatus)
                .HasComment("0: đề nghị 1: đã tạm ứng 2 hoàn tạm ứng 3 hủy tạm ứng")
                .HasColumnName("is_status");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ObjectTypeId)
                .HasComment("loại đối tượng")
                .HasColumnName("object_type_id");
            entity.Property(e => e.PatientId)
                .HasComment("thông tin bệnh nhân")
                .HasColumnName("patient_id");
            entity.Property(e => e.PaymentMethodId)
                .HasComment("phương thức thanh toán")
                .HasColumnName("payment_method_id");
            entity.Property(e => e.Price)
                .HasComment("số tiền tạm ứng")
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.PriceRemain)
                .HasColumnType("money")
                .HasColumnName("price_remain");
            entity.Property(e => e.ReasonForAdvanceId)
                .HasComment("lý do tạm ứng")
                .HasColumnName("reason_for_advance_id");
            entity.Property(e => e.ShiftId)
                .HasComment("ca làm việc")
                .HasColumnName("shift_id");
            entity.Property(e => e.Times)
                .HasComment("số lần tạm ứng của bệnh nhân")
                .HasColumnName("times");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Counter).WithMany(p => p.PatientAdvanceReceipts)
                .HasForeignKey(d => d.CounterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_AdvanceReceipt_counter_id_fkey");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PatientAdvanceReceipts)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_AdvanceReceipt_created_by_fkey");

            entity.HasOne(d => d.ObjectType).WithMany(p => p.PatientAdvanceReceipts)
                .HasForeignKey(d => d.ObjectTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_AdvanceReceipt_object_type_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientAdvanceReceipts)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_AdvanceReceipt_patient_id_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PatientAdvanceReceipts)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_AdvanceReceipt_payment_method_id_fkey");

            entity.HasOne(d => d.ReasonForAdvance).WithMany(p => p.PatientAdvanceReceipts)
                .HasForeignKey(d => d.ReasonForAdvanceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_AdvanceReceipt_reason_for_advance_id_fkey");

            entity.HasOne(d => d.Shift).WithMany(p => p.PatientAdvanceReceipts)
                .HasForeignKey(d => d.ShiftId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_AdvanceReceipt_shift_id_fkey");
        });

        modelBuilder.Entity<PatientAppointment>(entity =>
        {
            entity.HasKey(e => e.PatientAppoinmentId).HasName("Patient_Appointment_pkey");

            entity.ToTable("Patient_Appointment", tb => tb.HasComment("Hẹn lịch điều trị"));

            entity.Property(e => e.PatientAppoinmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_appoinment_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AppoimentDate).HasColumnName("appoiment_date");
            entity.Property(e => e.AppoimentType).HasColumnName("appoiment_type");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.AppoimentTypeNavigation).WithMany(p => p.PatientAppointments)
                .HasForeignKey(d => d.AppoimentType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Appointment_appoiment_type_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientAppointments)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Appointment_patient_designate_service_id_fkey");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.PatientAppointments)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Appointment_patient_reception_id_fkey");
        });

        modelBuilder.Entity<PatientAppointmentService>(entity =>
        {
            entity.HasKey(e => e.PatientAppoimentServiceId).HasName("PatientAppointment_Service_pkey");

            entity.ToTable("PatientAppointment_Service", tb => tb.HasComment("Lịch hẹn -dịch vụ"));

            entity.Property(e => e.PatientAppoimentServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_appoiment_service_id");
            entity.Property(e => e.PatientAppoinmentId).HasColumnName("patient_appoinment_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");

            entity.HasOne(d => d.PatientAppoinment).WithMany(p => p.PatientAppointmentServices)
                .HasForeignKey(d => d.PatientAppoinmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientAppointment_Service_patient_appoiment_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.PatientAppointmentServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientAppointment_Service_product_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceBasicInformationPatient>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateBasicPatientId).HasName("PatientDesignateService_BasicInformationPatient_pkey");

            entity.ToTable("PatientDesignateService_BasicInformationPatient", tb => tb.HasComment("Chỉ định dịch vụ thông tin cơ bản"));

            entity.Property(e => e.PatientDesignateBasicPatientId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_basic_patient_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.PatientDesignateServiceBasicInformationPatients)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Basic_basic_information_patient_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceBasicInformationPatients)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Basic_patient_designate_patient_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceCdha>(entity =>
        {
            entity.HasKey(e => e.PatientDesginateServiceCdhaId).HasName("PatientDesignateService_CDHA_pkey");

            entity.ToTable("PatientDesignateService_CDHA", tb => tb.HasComment("chi tiết cdha"));

            entity.Property(e => e.PatientDesginateServiceCdhaId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_desginate_service_cdha_id");
            entity.Property(e => e.AccountCreated).HasColumnName("account_created");
            entity.Property(e => e.AccountEpresentative).HasColumnName("account_epresentative");
            entity.Property(e => e.AccountImplement).HasColumnName("account_implement");
            entity.Property(e => e.AccountRead).HasColumnName("account_read");
            entity.Property(e => e.AccountReception).HasColumnName("account_reception");
            entity.Property(e => e.CdhdTemplateId).HasColumnName("cdhd_template_id");
            entity.Property(e => e.CodePrint).HasColumnName("code_print");
            entity.Property(e => e.Conclude)
                .HasComment("thời gian có kết quả")
                .HasColumnName("conclude");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("now()")
                .HasComment("thời gian tạo")
                .HasColumnName("created_time");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId)
                .HasComment("khoa")
                .HasColumnName("department_id");
            entity.Property(e => e.IcdCode).HasColumnName("icd_code");
            entity.Property(e => e.IsIpd).HasColumnName("is_ipd");
            entity.Property(e => e.IsPacs)
                .HasComment("1: đã gửi, 0: chưa gửi")
                .HasColumnName("is_pacs");
            entity.Property(e => e.IsPayment).HasColumnName("is_payment");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.MachineId).HasColumnName("machine_id");
            entity.Property(e => e.MethodIntervention).HasColumnName("method_intervention");
            entity.Property(e => e.MethodOfIntervention).HasColumnName("method_of_intervention");
            entity.Property(e => e.Nurse).HasColumnName("nurse");
            entity.Property(e => e.ParenttId).HasColumnName("parentt_id");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.RoomId)
                .HasComment("phòng")
                .HasColumnName("room_id");
            entity.Property(e => e.Suggest).HasColumnName("suggest");
            entity.Property(e => e.TimeImplement)
                .HasComment("thời gian thực hiện")
                .HasColumnName("time_implement");
            entity.Property(e => e.TimeReception)
                .HasComment("thời gian tiếp nhận")
                .HasColumnName("time_reception");
            entity.Property(e => e.TimeResult).HasColumnName("time_result");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.AccountCreatedNavigation).WithMany(p => p.PatientDesignateServiceCdhaAccountCreatedNavigations)
                .HasForeignKey(d => d.AccountCreated)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_account_created_fkey");

            entity.HasOne(d => d.AccountEpresentativeNavigation).WithMany(p => p.PatientDesignateServiceCdhaAccountEpresentativeNavigations)
                .HasForeignKey(d => d.AccountEpresentative)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_account_epresentative_fkey");

            entity.HasOne(d => d.AccountImplementNavigation).WithMany(p => p.PatientDesignateServiceCdhaAccountImplementNavigations)
                .HasForeignKey(d => d.AccountImplement)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_account_implement_fkey");

            entity.HasOne(d => d.AccountReadNavigation).WithMany(p => p.PatientDesignateServiceCdhaAccountReadNavigations)
                .HasForeignKey(d => d.AccountRead)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_account_read_fkey");

            entity.HasOne(d => d.AccountReceptionNavigation).WithMany(p => p.PatientDesignateServiceCdhaAccountReceptionNavigations)
                .HasForeignKey(d => d.AccountReception)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_account_reception_fkey");

            entity.HasOne(d => d.CdhdTemplate).WithMany(p => p.PatientDesignateServiceCdhas)
                .HasForeignKey(d => d.CdhdTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_cdhd_template_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.PatientDesignateServiceCdhas)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_department_id_fkey");

            entity.HasOne(d => d.IcdCodeNavigation).WithMany(p => p.PatientDesignateServiceCdhas)
                .HasForeignKey(d => d.IcdCode)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_icd_code_fkey");

            entity.HasOne(d => d.Machine).WithMany(p => p.PatientDesignateServiceCdhas)
                .HasForeignKey(d => d.MachineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_machine_id_fkey");

            entity.HasOne(d => d.NurseNavigation).WithMany(p => p.PatientDesignateServiceCdhaNurseNavigations)
                .HasForeignKey(d => d.Nurse)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_nurse_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceCdhas)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_patient_designate_service_id_fk");

            entity.HasOne(d => d.Room).WithMany(p => p.PatientDesignateServiceCdhas)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_CDHA_room_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceChemistry>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateServiceChemistryId).HasName("PatientDesignateService_Chemistry_pkey");

            entity.ToTable("PatientDesignateService_Chemistry", tb => tb.HasComment("chỉ định dịch vụ hóa chất"));

            entity.Property(e => e.PatientDesignateServiceChemistryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_service_chemistry_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsIpd)
                .HasDefaultValueSql("0")
                .HasColumnName("is_ipd");
            entity.Property(e => e.IsNoCharge)
                .HasComment("không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsPayment)
                .HasComment("tự trả")
                .HasColumnName("is_payment");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("chỉ định dịch vụ")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Qty)
                .HasComment("số lượng kê")
                .HasColumnName("qty");
            entity.Property(e => e.QtyPrimary)
                .HasComment("số lượng phát")
                .HasColumnName("qty_primary");
            entity.Property(e => e.ReceiptCodeId)
                .HasComment("mã phiếu lĩnh")
                .HasColumnName("receipt_code_id");
            entity.Property(e => e.TimeImplement)
                .HasComment("thời gian thực hiện")
                .HasColumnName("time_implement");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseId)
                .HasComment("kho")
                .HasColumnName("warehouse_id");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceChemistries)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Chemi_patient_designate_service_id_fkey");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.PatientDesignateServiceChemistries)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Chemistry_receipt_code_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.PatientDesignateServiceChemistries)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Chemistry_warehouse_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceDetailSurgicalProceduce>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateServiceDetailSurgicalProceduresId).HasName("PatientDesignateService_DetailSurgicalProceduces_pkey");

            entity.ToTable("PatientDesignateService_DetailSurgicalProceduces", tb => tb.HasComment("Phẫu thuật thủ thuật - chỉ định dịch vụ"));

            entity.Property(e => e.PatientDesignateServiceDetailSurgicalProceduresId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_service_detail_surgical_procedures_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("id chỉ định dịch vụ")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientDesignateServiceSurgicalProceduresId)
                .HasComment("id của phẫu thuật thủ thuật")
                .HasColumnName("patient_designate_service_surgical_procedures_id");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceDetailSurgicalProceduces)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Detai_patient_designate_service_id_fkey");

            entity.HasOne(d => d.PatientDesignateServiceSurgicalProcedures).WithMany(p => p.PatientDesignateServiceDetailSurgicalProceduces)
                .HasForeignKey(d => d.PatientDesignateServiceSurgicalProceduresId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Detai_patient_designate_service_su_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceDinner>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateServiceDinnerId).HasName("PatientDesignateService_Dinner_pkey");

            entity.ToTable("PatientDesignateService_Dinner", tb => tb.HasComment("Chỉ định suất ăn"));

            entity.Property(e => e.PatientDesignateServiceDinnerId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_service_dinner_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("time with time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.DinnerType).HasColumnName("dinner_type");
            entity.Property(e => e.IsNoCharge)
                .HasComment("không tính tiền")
                .HasColumnName("is_no_charge");
            entity.Property(e => e.IsPayment)
                .HasComment("tự trả")
                .HasColumnName("is_payment");
            entity.Property(e => e.IsUnexpected)
                .HasComment("đột xuất")
                .HasColumnName("is_unexpected");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Qty)
                .HasComment("số lượng")
                .HasColumnName("qty");
            entity.Property(e => e.ReceiptCode2Id)
                .HasComment("mã phiếu trả")
                .HasColumnName("receipt_code2_id");
            entity.Property(e => e.ReceiptCodeId)
                .HasComment("mã phiếu lĩnh")
                .HasColumnName("receipt_code_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TimeImplement)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("time_implement");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DinnerTypeNavigation).WithMany(p => p.PatientDesignateServiceDinners)
                .HasForeignKey(d => d.DinnerType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Dinner_dinner_type_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceDinners)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Dinne_patient_designate_service_id_fkey");

            entity.HasOne(d => d.ReceiptCode2).WithMany(p => p.PatientDesignateServiceDinnerReceiptCode2s)
                .HasForeignKey(d => d.ReceiptCode2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Dinner_receipt_code2_id_fkey");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.PatientDesignateServiceDinnerReceiptCodes)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Dinner_receipt_code_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceDiseaseExplanationMicrobiology>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateServiceDiseaseExplanationMicrobiologyId).HasName("PatientDesignateService_DiseaseExplanationMicrobiology_pkey");

            entity.ToTable("PatientDesignateService_DiseaseExplanationMicrobiology", tb => tb.HasComment("Chỉ định dịch vụ - giải phãu bệnh và vi sinh"));

            entity.Property(e => e.PatientDesignateServiceDiseaseExplanationMicrobiologyId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_service_disease_explanation_microbiology_id");
            entity.Property(e => e.CodePrint).HasColumnName("code_print");
            entity.Property(e => e.Conclude)
                .HasComment("kết luận")
                .HasColumnName("conclude");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("thời gian tiếp nhận")
                .HasColumnName("created_at");
            entity.Property(e => e.IsIpd).HasColumnName("is_ipd");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái")
                .HasColumnName("is_status");
            entity.Property(e => e.MachineId)
                .HasComment("mã máy")
                .HasColumnName("machine_id");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Result)
                .HasComment("kết quả")
                .HasColumnName("result");
            entity.Property(e => e.SpecimenProperties)
                .HasComment("tính chất bệnh phẩm 1:đạt 0 không đạt")
                .HasColumnName("specimen_properties");
            entity.Property(e => e.Suggest)
                .HasComment("bàn luận")
                .HasColumnName("suggest");
            entity.Property(e => e.UpdatedAt)
                .HasComment("thời gian có kết quả")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Machine).WithMany(p => p.PatientDesignateServiceDiseaseExplanationMicrobiologies)
                .HasForeignKey(d => d.MachineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_DiseaseExplanationMicro_machine_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceDiseaseExplanationMicrobiologies)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_DiseaseExplanationMicrobiology_patie");
        });

        modelBuilder.Entity<PatientDesignateServiceDrug>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateMedicalServiceId).HasName("CategoryPatientDesignateDrugService_pkey");

            entity.ToTable("PatientDesignateService_Drug", tb => tb.HasComment("Chỉ định dịch vụ thuốc"));

            entity.Property(e => e.PatientDesignateMedicalServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_medical_service_id");
            entity.Property(e => e.CancelOfReason)
                .HasComment("lý do hủy")
                .HasColumnName("cancel_of_reason");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DayNumber).HasColumnName("day_number");
            entity.Property(e => e.DesignateServiceDate)
                .HasComment("thời gian chỉ đinh")
                .HasColumnName("designate_service_date");
            entity.Property(e => e.DosageId)
                .HasComment("liều dùng")
                .HasColumnName("dosage_id");
            entity.Property(e => e.DrugType)
                .HasComment("phân loại thuốc thuốc kê ngoài, thuốc tủ trực nhà thuốc")
                .HasColumnName("drug_type");
            entity.Property(e => e.DrugUseDay)
                .HasComment("ngày sử dụng thuốc")
                .HasColumnName("drug_use_day");
            entity.Property(e => e.ImplementDate)
                .HasComment("thời gian thực hiện")
                .HasColumnName("implement_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsCharge).HasColumnName("is_charge");
            entity.Property(e => e.IsIpd)
                .HasDefaultValueSql("0")
                .HasComment("0: ngoại trú 1  nội trú")
                .HasColumnName("is_ipd");
            entity.Property(e => e.IsPay).HasColumnName("is_pay");
            entity.Property(e => e.IsType).HasColumnName("is_type");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NumberOfDrop)
                .HasComment("số giọt/ml")
                .HasColumnName("number_of_drop");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("thuốc")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Qty)
                .HasComment("số lượng")
                .HasColumnName("qty");
            entity.Property(e => e.QtyAfternoon)
                .HasComment("sl trưa")
                .HasColumnName("qty_afternoon");
            entity.Property(e => e.QtyCancel)
                .HasComment("số lượng hủy")
                .HasColumnName("qty_cancel");
            entity.Property(e => e.QtyEvening)
                .HasComment("sl chiều")
                .HasColumnName("qty_evening");
            entity.Property(e => e.QtyMorning)
                .HasComment("sl sáng")
                .HasColumnName("qty_morning");
            entity.Property(e => e.QtyNight)
                .HasComment("sl tối")
                .HasColumnName("qty_night");
            entity.Property(e => e.QtyPerTime)
                .HasComment("Số lượng/ lần")
                .HasColumnName("qty_per_time");
            entity.Property(e => e.QtyPrimary)
                .HasComment("số lượng phát")
                .HasColumnName("qty_primary");
            entity.Property(e => e.ReceiptSlipCode).HasColumnName("receipt_slip_code");
            entity.Property(e => e.RouterId).HasColumnName("router_id");
            entity.Property(e => e.StartTime)
                .HasComment("giờ bắt đầu")
                .HasColumnType("character varying")
                .HasColumnName("start_time");
            entity.Property(e => e.TimeAway)
                .HasComment("cách giờ")
                .HasColumnName("time_away");
            entity.Property(e => e.TimeOfUse)
                .HasComment("thời điểm dùng")
                .HasColumnName("time_of_use");
            entity.Property(e => e.TimePerDay)
                .HasComment("lần/ngày")
                .HasColumnName("time_per_day");
            entity.Property(e => e.TimeUseFrom)
                .HasComment("thời gian dùng từ ngày")
                .HasColumnName("time_use_from");
            entity.Property(e => e.TimeUseTo)
                .HasComment("thời gian dùng đến ngày")
                .HasColumnName("time_use_to");
            entity.Property(e => e.TranferRate)
                .HasComment("tốc đọ truyền")
                .HasColumnName("tranfer_rate");
            entity.Property(e => e.UnitTranferRate)
                .HasComment("đơn vị truyền 1: giọt/phut 2 ml/h")
                .HasColumnName("unit_tranfer_rate");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.Use)
                .HasComment("đợt dùng")
                .HasColumnType("character varying")
                .HasColumnName("use");
            entity.Property(e => e.Used)
                .HasComment("cách dùng")
                .HasColumnName("used");
            entity.Property(e => e.WarehourseId)
                .HasComment("kho")
                .HasColumnName("warehourse_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PatientDesignateServiceDrugs)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Drug_created_by_fkey");

            entity.HasOne(d => d.Dosage).WithMany(p => p.PatientDesignateServiceDrugs)
                .HasForeignKey(d => d.DosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateDrugService_dosage_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceDrugs)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Drug_patient_designate_service_id_fk");

            entity.HasOne(d => d.Router).WithMany(p => p.PatientDesignateServiceDrugs)
                .HasForeignKey(d => d.RouterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateDrugService_router_id_fkey");

            entity.HasOne(d => d.Warehourse).WithMany(p => p.PatientDesignateServiceDrugs)
                .HasForeignKey(d => d.WarehourseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateDrugService_warehourse_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceLaboratory>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateServiceLaboratoryId).HasName("Laboratory_Biochemistry_Hematology_Result_pkey");

            entity.ToTable("PatientDesignateService_Laboratory", tb => tb.HasComment("Chỉ định dịch vụ xét nghiệm"));

            entity.Property(e => e.PatientDesignateServiceLaboratoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_service_laboratory_id");
            entity.Property(e => e.CodePrint).HasColumnName("code_print");
            entity.Property(e => e.Conclude).HasColumnName("conclude");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("thời gian tiếp nhận")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Discuss).HasColumnName("discuss");
            entity.Property(e => e.IsIpd).HasColumnName("is_ipd");
            entity.Property(e => e.IsStatus)
                .HasDefaultValueSql("0")
                .HasColumnName("is_status");
            entity.Property(e => e.MachineCodeId).HasColumnName("machine_code_id");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("chỉ định dịch vụ")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.UpdatedAt)
                .HasComment("thời gian có kết quả")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.MachineCode).WithMany(p => p.PatientDesignateServiceLaboratories)
                .HasForeignKey(d => d.MachineCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Laboratory_machine_code_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceLaboratories)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Laboratory_patient_designate_service");
        });

        modelBuilder.Entity<PatientDesignateServiceMoney>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateServiceMoneyId).HasName("PatientDesignateService_Money_pkey");

            entity.ToTable("PatientDesignateService_Money", tb => tb.HasComment("Số tiền từng chỉ định dịch vụ"));

            entity.Property(e => e.PatientDesignateServiceMoneyId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_service_money_id");
            entity.Property(e => e.Discount)
                .HasComment("Chính sách miễn giảm")
                .HasColumnName("discount");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientTotal)
                .HasComment("nb thanh toán")
                .HasColumnName("patient_total");
            entity.Property(e => e.PaymentInsuranceRatio).HasColumnName("payment_insurance_ratio");
            entity.Property(e => e.PaymentServiceRatio).HasColumnName("payment_service_ratio");
            entity.Property(e => e.PriceInsurancePay)
                .HasComment("tiền bh thanh toán")
                .HasColumnName("price_insurance_pay");
            entity.Property(e => e.Subtotal)
                .HasComment("thành tiền")
                .HasColumnName("subtotal");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceMoneys)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Money_patient_designate_service_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceRehabilitation>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateRehabilitationId).HasName("CategoryPatientDesignateRehabilitationService_pkey");

            entity.ToTable("PatientDesignateService_Rehabilitation", tb => tb.HasComment("chỉ định dịch vụ phục hồi chức năng"));

            entity.Property(e => e.PatientDesignateRehabilitationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_rehabilitation_id");
            entity.Property(e => e.AccountCreated)
                .HasComment("Bác sĩ chỉ định")
                .HasColumnName("account_created");
            entity.Property(e => e.AccountOther)
                .HasComment("nhân viên phụ")
                .HasColumnName("account_other");
            entity.Property(e => e.AccountRehabilitation)
                .HasComment("bác sĩ điều trị PHCN")
                .HasColumnName("account_rehabilitation");
            entity.Property(e => e.BasicInfomationPatientId)
                .HasComment("chẩn đoán vào viện")
                .HasColumnName("basic_infomation_patient_id");
            entity.Property(e => e.Batch)
                .HasComment("đợt")
                .HasColumnName("batch");
            entity.Property(e => e.CodePrint)
                .HasColumnType("character varying")
                .HasColumnName("code_print");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DiagnoseNameAccompanyingId)
                .HasComment("chẩn đoán khác")
                .HasColumnName("diagnose_name_accompanying_id");
            entity.Property(e => e.DiagnoseNameId)
                .HasComment("chẩn đoán phcn")
                .HasColumnName("diagnose_name_id");
            entity.Property(e => e.IsIpd).HasColumnName("is_ipd");
            entity.Property(e => e.IsRehabilitation)
                .HasDefaultValueSql("0")
                .HasComment("không phẫu thuật")
                .HasColumnName("is_rehabilitation");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("phục hồi chức năng")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PreliminaryDiagnosis)
                .HasComment("chẩn đoán chi tiết")
                .HasColumnName("preliminary_diagnosis");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.AccountCreatedNavigation).WithMany(p => p.PatientDesignateServiceRehabilitationAccountCreatedNavigations)
                .HasForeignKey(d => d.AccountCreated)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_account_created_fkey");

            entity.HasOne(d => d.AccountOtherNavigation).WithMany(p => p.PatientDesignateServiceRehabilitationAccountOtherNavigations)
                .HasForeignKey(d => d.AccountOther)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_account_other_fkey");

            entity.HasOne(d => d.AccountRehabilitationNavigation).WithMany(p => p.PatientDesignateServiceRehabilitationAccountRehabilitationNavigations)
                .HasForeignKey(d => d.AccountRehabilitation)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_account_rehabilitatio");

            entity.HasOne(d => d.BasicInfomationPatient).WithMany(p => p.PatientDesignateServiceRehabilitations)
                .HasForeignKey(d => d.BasicInfomationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_basic_infomation_pati");

            entity.HasOne(d => d.Department).WithMany(p => p.PatientDesignateServiceRehabilitations)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_department_id_fkey");

            entity.HasOne(d => d.DiagnoseNameAccompanying).WithMany(p => p.PatientDesignateServiceRehabilitationDiagnoseNameAccompanyings)
                .HasForeignKey(d => d.DiagnoseNameAccompanyingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_diagnose_name_accompa");

            entity.HasOne(d => d.DiagnoseName).WithMany(p => p.PatientDesignateServiceRehabilitationDiagnoseNames)
                .HasForeignKey(d => d.DiagnoseNameId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_diagnose_name_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceRehabilitations)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Rehabilitation_patient_designate");
        });

        modelBuilder.Entity<PatientDesignateServiceSupply>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateSuppliesServiceId).HasName("CategoryPatientDesignateSuppliesService_pkey");

            entity.ToTable("PatientDesignateService_Supplies", tb => tb.HasComment("Chỉ định dịch vụ vật tư"));

            entity.Property(e => e.PatientDesignateSuppliesServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_supplies_service_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsIpd).HasColumnName("is_ipd");
            entity.Property(e => e.IsNoCharge).HasColumnName("is_no_charge");
            entity.Property(e => e.IsPayment).HasColumnName("is_payment");
            entity.Property(e => e.Note)
                .HasColumnType("char")
                .HasColumnName("note");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.QtyPrimary)
                .HasComment("so luong phat")
                .HasColumnName("qty_primary");
            entity.Property(e => e.SizeId).HasColumnName("size_id");
            entity.Property(e => e.SuppliesType)
                .HasComment("phân biệt vật tư ở nhà thuốc, CDHA, ...")
                .HasColumnName("supplies_type");
            entity.Property(e => e.Type)
                .HasComment("phân biệt vật tư bảo hiểm hoặc vật tư nhà thuốc")
                .HasColumnName("type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PatientDesignateServiceSupplies)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Supplies_created_by_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceSupplies)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Supplies_patient_designate_service_i");

            entity.HasOne(d => d.Size).WithMany(p => p.PatientDesignateServiceSupplies)
                .HasForeignKey(d => d.SizeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateSuppliesService_size_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.PatientDesignateServiceSupplies)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("CategoryPatientDesignateSuppliesService_warehouse_id_fkey");
        });

        modelBuilder.Entity<PatientDesignateServiceSurgicalProceduce>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateSurgicalProceducesId).HasName("CategoryPatientDesignateSurgicalProceducesService_pkey");

            entity.ToTable("PatientDesignateService_SurgicalProceduces", tb => tb.HasComment("chỉ định dịch vụ phẫu thuật thủ thuật"));

            entity.Property(e => e.PatientDesignateSurgicalProceducesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_surgical_proceduces_id");
            entity.Property(e => e.AccountCreated).HasColumnName("account_created");
            entity.Property(e => e.AnesthesiaMethod)
                .HasComment("phương pháp gây mê")
                .HasColumnName("anesthesia_method");
            entity.Property(e => e.ClassificationSurgicalProceduresId)
                .HasComment("Phân loại PTTT")
                .HasColumnName("classification_surgical_procedures_id");
            entity.Property(e => e.CodePrint)
                .HasColumnType("character varying")
                .HasColumnName("code_print");
            entity.Property(e => e.Conclude)
                .HasComment("kết luận")
                .HasColumnName("conclude");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Data)
                .HasColumnType("jsonb")
                .HasColumnName("data");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DiagnosisAfterSurgeryIcdId)
                .HasComment("chuẩn đoán sau pttt icd 10")
                .HasColumnName("diagnosis_after_surgery_icd_id");
            entity.Property(e => e.DiagnosisAfterSurgeryId)
                .HasComment("chẩn đoán sauphẫu thuật")
                .HasColumnName("diagnosis_after_surgery_id");
            entity.Property(e => e.IsNotSurgical)
                .HasComment("không phẫu thuật")
                .HasColumnName("is_not_surgical");
            entity.Property(e => e.MethodOfSurgical)
                .HasComment("cách thức pttt")
                .HasColumnName("method_of_surgical");
            entity.Property(e => e.PatientDesignateServiceId)
                .HasComment("phẫu thuật thủ thuật")
                .HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.PreoperativeDiagnosisId)
                .HasComment("chẩn đoán trước phẫu thuật")
                .HasColumnName("preoperative_diagnosis_id");
            entity.Property(e => e.SurgicalChamberId)
                .HasComment("buồng phẫu thuật")
                .HasColumnName("surgical_chamber_id");
            entity.Property(e => e.SurgicalCode)
                .HasComment("mã phiếu pttt")
                .HasColumnName("surgical_code");
            entity.Property(e => e.SurgicalDiagram)
                .HasComment("lược đồ")
                .HasColumnName("surgical_diagram");
            entity.Property(e => e.SurgicalEndDate)
                .HasComment("thời gian kết thúc")
                .HasColumnName("surgical_end_date");
            entity.Property(e => e.SurgicalMethod)
                .HasComment("phương pháp pttt")
                .HasColumnName("surgical_method");
            entity.Property(e => e.SurgicalPackage)
                .HasComment("gói phẫu thuật")
                .HasColumnName("surgical_package");
            entity.Property(e => e.SurgicalStartDate)
                .HasComment("thời gian bắt đầu")
                .HasColumnName("surgical_start_date");
            entity.Property(e => e.SurgicalStatus)
                .HasComment("trạng thái")
                .HasColumnName("surgical_status");
            entity.Property(e => e.SurgicalTemplateResultId)
                .HasComment("mẫu kết quả")
                .HasColumnName("surgical_template_result_id");
            entity.Property(e => e.SurgicalTime)
                .HasComment("thời gian pttt")
                .HasColumnName("surgical_time");
            entity.Property(e => e.SurgicalType)
                .HasComment("loại pttt")
                .HasColumnName("surgical_type");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.AnesthesiaMethodNavigation).WithMany(p => p.PatientDesignateServiceSurgicalProceduces)
                .HasForeignKey(d => d.AnesthesiaMethod)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_anesthesia_method");

            entity.HasOne(d => d.ClassificationSurgicalProcedures).WithMany(p => p.PatientDesignateServiceSurgicalProceduceClassificationSurgicalProcedures)
                .HasForeignKey(d => d.ClassificationSurgicalProceduresId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_classification_su");

            entity.HasOne(d => d.Department).WithMany(p => p.PatientDesignateServiceSurgicalProceduces)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_department_id_fke");

            entity.HasOne(d => d.DiagnosisAfterSurgeryIcd).WithMany(p => p.PatientDesignateServiceSurgicalProceduceDiagnosisAfterSurgeryIcds)
                .HasForeignKey(d => d.DiagnosisAfterSurgeryIcdId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_diagnosis_after_s");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceSurgicalProceduces)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_patient_designate");

            entity.HasOne(d => d.PreoperativeDiagnosis).WithMany(p => p.PatientDesignateServiceSurgicalProceducePreoperativeDiagnoses)
                .HasForeignKey(d => d.PreoperativeDiagnosisId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_preoperative_diag");

            entity.HasOne(d => d.SurgicalChamber).WithMany(p => p.PatientDesignateServiceSurgicalProceduces)
                .HasForeignKey(d => d.SurgicalChamberId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_surgical_chamber_");

            entity.HasOne(d => d.SurgicalPackageNavigation).WithMany(p => p.PatientDesignateServiceSurgicalProceduces)
                .HasForeignKey(d => d.SurgicalPackage)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_surgical_package_");

            entity.HasOne(d => d.SurgicalTemplateResult).WithMany(p => p.PatientDesignateServiceSurgicalProceduces)
                .HasForeignKey(d => d.SurgicalTemplateResultId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_surgical_template");

            entity.HasOne(d => d.SurgicalTimeNavigation).WithMany(p => p.PatientDesignateServiceSurgicalProceduceSurgicalTimeNavigations)
                .HasForeignKey(d => d.SurgicalTime)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_surgical_time_fke");

            entity.HasOne(d => d.SurgicalTypeNavigation).WithMany(p => p.PatientDesignateServiceSurgicalProceduceSurgicalTypeNavigations)
                .HasForeignKey(d => d.SurgicalType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_SurgicalProceduces_surgical_type_fke");
        });

        modelBuilder.Entity<PatientDesignateServiceVaccine>(entity =>
        {
            entity.HasKey(e => e.PatientDesignateVaccineId).HasName("PatientDesignateService_Vaccine_pkey");

            entity.ToTable("PatientDesignateService_Vaccine", tb => tb.HasComment("Chỉ định dịch vụ vaccine"));

            entity.Property(e => e.PatientDesignateVaccineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_designate_vaccine_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DesignateServiceDate)
                .HasComment("ngày chỉ định")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("designate_service_date");
            entity.Property(e => e.DosageId)
                .HasComment("liều dùng")
                .HasColumnName("dosage_id");
            entity.Property(e => e.ImplementDate)
                .HasComment("ngày thực hiện")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("implement_date");
            entity.Property(e => e.Note)
                .HasComment("ghi chú")
                .HasColumnName("note");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.Qty)
                .HasComment("số lượng")
                .HasColumnName("qty");
            entity.Property(e => e.QtyPrimary)
                .HasComment("số lượng phát")
                .HasColumnName("qty_primary");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.Used)
                .HasComment("cách sử dụng")
                .HasColumnName("used");
            entity.Property(e => e.VaccineType)
                .HasComment("kiểu vaccine")
                .HasColumnName("vaccine_type");
            entity.Property(e => e.WarehourseId).HasColumnName("warehourse_id");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PatientDesignateServiceVaccines)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Vaccine_created_by_fkey");

            entity.HasOne(d => d.Dosage).WithMany(p => p.PatientDesignateServiceVaccines)
                .HasForeignKey(d => d.DosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Vaccine_dosage_id_fkey");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.PatientDesignateServiceVaccines)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Vacci_patient_designate_service_id_fkey");

            entity.HasOne(d => d.Warehourse).WithMany(p => p.PatientDesignateServiceVaccines)
                .HasForeignKey(d => d.WarehourseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDesignateService_Vaccine_warehourse_id_fkey");
        });

        modelBuilder.Entity<PatientDiagnose>(entity =>
        {
            entity.HasKey(e => e.PatientDiagnoseId).HasName("Patient_Diagnose_pkey");

            entity.ToTable("Patient_Diagnose", tb => tb.HasComment("Bệnh nhân - Chẩn đoán"));

            entity.Property(e => e.PatientDiagnoseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_diagnose_id");
            entity.Property(e => e.Desc).HasColumnName("desc");
            entity.Property(e => e.DiagnoseNameAccompanyingId)
                .HasComment("chẩn đoán bệnh kèm theo")
                .HasColumnName("diagnose_name_accompanying_id");
            entity.Property(e => e.DiagnoseNameId)
                .HasComment("Chẩn đoán bệnh")
                .HasColumnName("diagnose_name_id");
            entity.Property(e => e.DiagnoseTypeIcdId).HasColumnName("diagnose_type_icd_id");
            entity.Property(e => e.DiagnosisDetail)
                .HasComment("mô tả chi tiết")
                .HasColumnName("diagnosis_detail");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.PreliminaryDiagnosis)
                .HasComment("chẩn đoán sơ bộ")
                .HasColumnName("preliminary_diagnosis");

            entity.HasOne(d => d.DiagnoseNameAccompanying).WithMany(p => p.PatientDiagnoseDiagnoseNameAccompanyings)
                .HasForeignKey(d => d.DiagnoseNameAccompanyingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Diagnose_diagnose_name_accompanying_id_fkey");

            entity.HasOne(d => d.DiagnoseName).WithMany(p => p.PatientDiagnoseDiagnoseNames)
                .HasForeignKey(d => d.DiagnoseNameId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Diagnose_diagnose_name_id_fkey");

            entity.HasOne(d => d.DiagnoseTypeIcd).WithMany(p => p.PatientDiagnoses)
                .HasForeignKey(d => d.DiagnoseTypeIcdId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Diagnose_diagnose_type_icd_id_fkey");
        });

        modelBuilder.Entity<PatientDiagnoseCompanying>(entity =>
        {
            entity.HasKey(e => e.PatientDiagnoseCompanyingId).HasName("PatientDiagnose_Companying_pkey");

            entity.ToTable("PatientDiagnose_Companying", tb => tb.HasComment("Chẩn đoán kèm theo"));

            entity.Property(e => e.PatientDiagnoseCompanyingId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_diagnose_companying_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Desc).HasColumnName("desc");
            entity.Property(e => e.DiagnoseNameAccompanyingId).HasColumnName("diagnose_name_accompanying_id");
            entity.Property(e => e.PatientDiagnoseId).HasColumnName("patient_diagnose_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.DiagnoseNameAccompanying).WithMany(p => p.PatientDiagnoseCompanyings)
                .HasForeignKey(d => d.DiagnoseNameAccompanyingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDiagnose_Companying_diagnose_name_accompanying_id_fke");

            entity.HasOne(d => d.PatientDiagnose).WithMany(p => p.PatientDiagnoseCompanyings)
                .HasForeignKey(d => d.PatientDiagnoseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDiagnose_Companying_patient_diagnose_id_fkey");
        });

        modelBuilder.Entity<PatientDiagonosePreliminary>(entity =>
        {
            entity.HasKey(e => e.PatientDiagnosePreliminaryId).HasName("PatientDiagonose_Preliminary_pkey");

            entity.ToTable("PatientDiagonose_Preliminary", tb => tb.HasComment("Chẩn đoán sơ bộ"));

            entity.Property(e => e.PatientDiagnosePreliminaryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_diagnose_preliminary_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Desc).HasColumnName("desc");
            entity.Property(e => e.PatientDiagnoseId).HasColumnName("patient_diagnose_id");
            entity.Property(e => e.PreliminaryDiagnosisId).HasColumnName("preliminary_diagnosis_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.PatientDiagnose).WithMany(p => p.PatientDiagonosePreliminaries)
                .HasForeignKey(d => d.PatientDiagnoseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDiagonose_Preliminary_patient_diagnose_id_fkey");

            entity.HasOne(d => d.PreliminaryDiagnosis).WithMany(p => p.PatientDiagonosePreliminaries)
                .HasForeignKey(d => d.PreliminaryDiagnosisId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PatientDiagonose_Preliminary_preliminary_diagnosis_id_fkey");
        });

        modelBuilder.Entity<PatientEmergency>(entity =>
        {
            entity.HasKey(e => e.PatientEmergencyId).HasName("Patient_Emergency_pkey");

            entity.ToTable("Patient_Emergency", tb => tb.HasComment("Tiếp đón - cấp cứu"));

            entity.Property(e => e.PatientEmergencyId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_emergency_id");
            entity.Property(e => e.CauseOfHospitalId)
                .HasComment("nguyên nhân tai nạn thương tích")
                .HasColumnName("cause_of_hospital_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.EmergencyTimeId).HasColumnName("emergency_time_id");
            entity.Property(e => e.EmergencyTypeId)
                .HasComment("loại thương tích")
                .HasColumnName("emergency_type_id");
            entity.Property(e => e.InjuryId)
                .HasComment("vị trí chấn thương")
                .HasColumnName("injury_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.IsNotFamily)
                .HasComment("không có người thân")
                .HasColumnName("is_not_family");
            entity.Property(e => e.IsUnidentity)
                .HasComment("không xd định danh tính")
                .HasColumnName("is_unidentity");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.EmergencyTime).WithMany(p => p.PatientEmergencies)
                .HasForeignKey(d => d.EmergencyTimeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Emergency_emergency_time_id_fkey");

            entity.HasOne(d => d.EmergencyType).WithMany(p => p.PatientEmergencies)
                .HasForeignKey(d => d.EmergencyTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Emergency_emergency_type_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientEmergencies)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Emergency_patient_id_fkey");
        });

        modelBuilder.Entity<PatientHistory>(entity =>
        {
            entity.HasKey(e => e.PatientHistoryId).HasName("Patient_History_pkey");

            entity.ToTable("Patient_History", tb => tb.HasComment("Bệnh nhân- Lịch sử bệnh"));

            entity.Property(e => e.PatientHistoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_history_id");
            entity.Property(e => e.Anamnesis)
                .HasComment("Tiền sử bệnh bản thân")
                .HasColumnName("anamnesis");
            entity.Property(e => e.AnamnesisFamily)
                .HasComment("tiền sử bệnh gia đình")
                .HasColumnName("anamnesis_family");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DrugAllergy)
                .HasComment("dị ứng thuốc")
                .HasColumnName("drug_allergy");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.PathologicalProcess)
                .HasComment("Quá trình bệnh lý")
                .HasColumnName("pathological_process");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<PatientInsurance>(entity =>
        {
            entity.HasKey(e => e.InsuranceId).HasName("Patient_Insurance_pkey");

            entity.ToTable("Patient_Insurance", tb => tb.HasComment("Bệnh nhân- bảo hiểm y tế"));

            entity.Property(e => e.InsuranceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("insurance_id");
            entity.Property(e => e.AreaId).HasColumnName("area_id");
            entity.Property(e => e.BenefitLevel)
                .HasComment("mức hưởng")
                .HasColumnName("benefit_level");
            entity.Property(e => e.CctFrom).HasColumnName("cct_from");
            entity.Property(e => e.CctTo).HasColumnName("cct_to");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiagnosisOfReferral)
                .HasColumnType("character varying")
                .HasColumnName("diagnosis_of_referral");
            entity.Property(e => e.FileAppointment).HasColumnName("file_appointment");
            entity.Property(e => e.FileNameAppointment).HasColumnName("file_name_appointment");
            entity.Property(e => e.InsuranceAddress).HasColumnName("insurance_address");
            entity.Property(e => e.InsuranceFrom).HasColumnName("insurance_from");
            entity.Property(e => e.InsuranceNumber)
                .HasComment("số bh")
                .HasColumnType("character varying")
                .HasColumnName("insurance_number");
            entity.Property(e => e.InsuranceTo).HasColumnName("insurance_to");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsExamineAgain).HasColumnName("is_examine_again");
            entity.Property(e => e.NameTranferPage).HasColumnName("name_tranfer_page");
            entity.Property(e => e.ObjectExamine).HasColumnName("object_examine");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.RegisterPlaceId).HasColumnName("register_place_id");
            entity.Property(e => e.SubjectOfInsuranceId)
                .HasComment("đối tượng bảo hiểm")
                .HasColumnName("subject_of_insurance_id");
            entity.Property(e => e.TimeOf5Year).HasColumnName("time_of_5_year");
            entity.Property(e => e.TranferFrom)
                .HasComment("từ ngày chuyển tuyến")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("tranfer_from");
            entity.Property(e => e.TranferNumber)
                .HasComment("số giấy chuyển tuyến")
                .HasColumnType("character varying")
                .HasColumnName("tranfer_number");
            entity.Property(e => e.TranferPage)
                .HasComment("giấy chuyển tuyến")
                .HasColumnName("tranfer_page");
            entity.Property(e => e.TranferPlace)
                .HasComment("nơi chuyển tuyến")
                .HasColumnName("tranfer_place");
            entity.Property(e => e.TranferTo)
                .HasComment("đến ngày chuyển tuyến")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("tranfer_to");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Area).WithMany(p => p.PatientInsuranceAreas)
                .HasForeignKey(d => d.AreaId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Insurance_area_id_fkey");

            entity.HasOne(d => d.ObjectExamineNavigation).WithMany(p => p.PatientInsuranceObjectExamineNavigations)
                .HasForeignKey(d => d.ObjectExamine)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Insurance_object_examine_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientInsurances)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Insurance_patient_id_fkey");

            entity.HasOne(d => d.RegisterPlace).WithMany(p => p.PatientInsuranceRegisterPlaces)
                .HasForeignKey(d => d.RegisterPlaceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Insurance_register_place_id_fkey");

            entity.HasOne(d => d.SubjectOfInsurance).WithMany(p => p.PatientInsurances)
                .HasForeignKey(d => d.SubjectOfInsuranceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Insurance_subject_of_insurance_id_fkey");

            entity.HasOne(d => d.TranferPlaceNavigation).WithMany(p => p.PatientInsuranceTranferPlaceNavigations)
                .HasForeignKey(d => d.TranferPlace)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Insurance_tranfer_place_fkey");
        });

        modelBuilder.Entity<PatientPackageService>(entity =>
        {
            entity.HasKey(e => e.PatientPackageServiceId).HasName("Patient_PackageService_pkey");

            entity.ToTable("Patient_PackageService", tb => tb.HasComment("Bệnh nhân -Gói dịch vụ"));

            entity.Property(e => e.PatientPackageServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_package_service_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsStatus).HasColumnName("is_status");
            entity.Property(e => e.PackageServiceId)
                .HasComment("gói dịch vụ")
                .HasColumnName("package_service_id");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.PackageService).WithMany(p => p.PatientPackageServices)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_PackageService_package_service_id_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientPackageServices)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_PackageService_patient_id_fkey");
        });

        modelBuilder.Entity<PatientRelation>(entity =>
        {
            entity.HasKey(e => e.PatientRelationId).HasName("Patient_Relation_pkey");

            entity.ToTable("Patient_Relation", tb => tb.HasComment("Bệnh nhân - Người thân"));

            entity.Property(e => e.PatientRelationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_relation_id");
            entity.Property(e => e.AccountId)
                .HasComment("người duyệt")
                .HasColumnName("account_id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ExemptionType)
                .HasComment("loaij miễn trừ")
                .HasColumnName("exemption_type");
            entity.Property(e => e.FullName)
                .HasColumnType("character varying")
                .HasColumnName("full_name");
            entity.Property(e => e.FullName2)
                .HasComment("tên người bảo lãnh 2")
                .HasColumnType("character varying")
                .HasColumnName("full_name2");
            entity.Property(e => e.IdentityCode)
                .HasComment("cccd người bảo lãnh")
                .HasColumnType("character varying")
                .HasColumnName("identity_code");
            entity.Property(e => e.IdentityCode2)
                .HasComment("cccd người bảo lãnh 2")
                .HasColumnType("character varying")
                .HasColumnName("identity_code2");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.PatientSourceId)
                .HasComment("nguồn giới thiệu")
                .HasColumnName("patient_source_id");
            entity.Property(e => e.Phone)
                .HasComment("số điện thoại")
                .HasColumnType("character varying")
                .HasColumnName("phone");
            entity.Property(e => e.Phone2)
                .HasColumnType("character varying")
                .HasColumnName("phone2");
            entity.Property(e => e.PresenterId)
                .HasComment("người giới thiệu")
                .HasColumnName("presenter_id");
            entity.Property(e => e.RelationShip2Id)
                .HasComment("Mối quan hệ với NB")
                .HasColumnName("relation_ship2_id");
            entity.Property(e => e.RelationShipId)
                .HasComment("mối quan hệ")
                .HasColumnName("relation_ship_id");
            entity.Property(e => e.Type)
                .HasComment("phân loại")
                .HasColumnName("type");
            entity.Property(e => e.TypeOfMedicalRecordId)
                .HasComment("bệnh án dài hạn hiện thị khi được tích vào bệnh án dài hạn")
                .HasColumnName("type_of_medical_record_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithMany(p => p.PatientRelations)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_account_id_fkey");

            entity.HasOne(d => d.ExemptionTypeNavigation).WithMany(p => p.PatientRelations)
                .HasForeignKey(d => d.ExemptionType)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_exemption_type_fkey");

            entity.HasOne(d => d.Patient).WithMany(p => p.PatientRelations)
                .HasForeignKey(d => d.PatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_patient_id_fkey");

            entity.HasOne(d => d.PatientSource).WithMany(p => p.PatientRelations)
                .HasForeignKey(d => d.PatientSourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_patient_source_id_fkey");

            entity.HasOne(d => d.Presenter).WithMany(p => p.PatientRelations)
                .HasForeignKey(d => d.PresenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_presenter_id_fkey");

            entity.HasOne(d => d.RelationShip2).WithMany(p => p.PatientRelationRelationShip2s)
                .HasForeignKey(d => d.RelationShip2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_relation_ship2_id_fkey");

            entity.HasOne(d => d.RelationShip).WithMany(p => p.PatientRelationRelationShips)
                .HasForeignKey(d => d.RelationShipId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_relation_ship_id_fkey");

            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.PatientRelations)
                .HasForeignKey(d => d.Type)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_type_fkey");

            entity.HasOne(d => d.TypeOfMedicalRecord).WithMany(p => p.PatientRelations)
                .HasForeignKey(d => d.TypeOfMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Patient_Relation_type_of_medical_record_id_fkey");
        });

        modelBuilder.Entity<PatientSearch>(entity =>
        {
            entity.HasKey(e => e.PatientSearchId).HasName("Patient_Search_pkey");

            entity.ToTable("Patient_Search", tb => tb.HasComment("Bệnh nhân - Khám xét"));

            entity.Property(e => e.PatientSearchId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("patient_search_id");
            entity.Property(e => e.Body)
                .HasComment("Toàn thân")
                .HasColumnName("body");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiseaseStage)
                .HasComment("giai đoạn bệnh")
                .HasColumnName("disease_stage");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Note)
                .HasComment("lưu ý")
                .HasColumnName("note");
            entity.Property(e => e.Parts)
                .HasComment("Bộ phận")
                .HasColumnName("parts");
            entity.Property(e => e.Process)
                .HasComment("diến biến")
                .HasColumnName("process");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
        });

        modelBuilder.Entity<PermissionAttribute>(entity =>
        {
            entity.HasKey(e => e.PermissionAttributeId).HasName("Permission_Attribute_pkey");

            entity.ToTable("Permission_Attribute", tb => tb.HasComment("Quyeen - Thuộc tính"));

            entity.Property(e => e.PermissionAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("permission_attribute_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.PermissionId).HasColumnName("permission_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.PermissionAttributes)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Permission_Attribute_attribute_id_fkey");

            entity.HasOne(d => d.Permission).WithMany(p => p.PermissionAttributes)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Permission_Attribute_permission_id_fkey");
        });

        modelBuilder.Entity<PermissionGroupPermission>(entity =>
        {
            entity.HasKey(e => e.PermissionGroupPermissionId).HasName("Permission_GroupPermission_pkey");

            entity.ToTable("Permission_GroupPermission", tb => tb.HasComment("Quyền  - Nhóm tính năng"));

            entity.Property(e => e.PermissionGroupPermissionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("permission_group_permission_id");
            entity.Property(e => e.GroupPermissionId).HasColumnName("group_permission_id");
            entity.Property(e => e.PermissionId).HasColumnName("permission_id");

            entity.HasOne(d => d.GroupPermission).WithMany(p => p.PermissionGroupPermissions)
                .HasForeignKey(d => d.GroupPermissionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Permission_GroupPermission_group_permission_id_fkey");

            entity.HasOne(d => d.Permission).WithMany(p => p.PermissionGroupPermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Permission_GroupPermission_permission_id_fkey");
        });

        modelBuilder.Entity<PlaceOfSamplingServiceGroupLvl2>(entity =>
        {
            entity.HasKey(e => e.PlaceOfSamplingServiceGroupId).HasName("PlaceOf_Sampling_ServiceGroupLvl2_pkey");

            entity.ToTable("PlaceOfSampling_ServiceGroupLvl2", tb => tb.HasComment("nơi lấy mẫu bệnh phẩm - nhóm dịch vụ cấp 2"));

            entity.Property(e => e.PlaceOfSamplingServiceGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("place_of_sampling_service_group_id");
            entity.Property(e => e.GroupServiceId).HasColumnName("group_service_id");
            entity.Property(e => e.PlaceOfSamplingId).HasColumnName("place_of_sampling_id");

            entity.HasOne(d => d.GroupService).WithMany(p => p.PlaceOfSamplingServiceGroupLvl2s)
                .HasForeignKey(d => d.GroupServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PlaceOfSampling_ServiceGroupLvl2_group_service_id_fkey");

            entity.HasOne(d => d.PlaceOfSampling).WithMany(p => p.PlaceOfSamplingServiceGroupLvl2s)
                .HasForeignKey(d => d.PlaceOfSamplingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PlaceOfSampling_ServiceGroupLvl2_place_of_sampling_id_fkey");
        });

        modelBuilder.Entity<PrescriptionMedicineDosage>(entity =>
        {
            entity.HasKey(e => e.PrescriptionMedicineDosageId).HasName("PrescriptionMedicine_Dosage_pkey");

            entity.ToTable("PrescriptionMedicine_Dosage", tb => tb.HasComment("Thuốc kê ngoài - liều dùng"));

            entity.Property(e => e.PrescriptionMedicineDosageId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("prescription_medicine_dosage_id");
            entity.Property(e => e.DosageId).HasColumnName("dosage_id");
            entity.Property(e => e.PrescriptionMedicineId).HasColumnName("prescription_medicine_id");

            entity.HasOne(d => d.Dosage).WithMany(p => p.PrescriptionMedicineDosages)
                .HasForeignKey(d => d.DosageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PrescriptionMedicine_Dosage_dosage_id_fkey");

            entity.HasOne(d => d.PrescriptionMedicine).WithMany(p => p.PrescriptionMedicineDosages)
                .HasForeignKey(d => d.PrescriptionMedicineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("PrescriptionMedicine_Dosage_prescription_medicine_id_fkey");
        });

        modelBuilder.Entity<PresenterPatientSource>(entity =>
        {
            entity.HasKey(e => e.PresenterPatientSourceId).HasName("Presenter_PatientSource_pkey");

            entity.ToTable("Presenter_PatientSource", tb => tb.HasComment("Người giới thiệu - nguồn người bệnh"));

            entity.Property(e => e.PresenterPatientSourceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("presenter_patient_source_id");
            entity.Property(e => e.PatientSourceId).HasColumnName("patient_source_id");
            entity.Property(e => e.PrensenterId).HasColumnName("prensenter_id");

            entity.HasOne(d => d.PatientSource).WithMany(p => p.PresenterPatientSources)
                .HasForeignKey(d => d.PatientSourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Presenter_PatientSource_patient_source_id_fkey");

            entity.HasOne(d => d.Prensenter).WithMany(p => p.PresenterPatientSources)
                .HasForeignKey(d => d.PrensenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Presenter_PatientSource_prensenter_id_fkey");
        });

        modelBuilder.Entity<ProductSuppliesProductEstimate>(entity =>
        {
            entity.HasKey(e => e.ProductSuppliesProductEstimateId).HasName("ProductSupplies_ProductEstimate_pkey");

            entity.ToTable("ProductSupplies_ProductEstimate", tb => tb.HasComment("Sản phẩm vật tư - sản phẩm dự trù"));

            entity.Property(e => e.ProductSuppliesProductEstimateId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("product_supplies_product_estimate_id");
            entity.Property(e => e.PatientId).HasColumnName("patient_id");
            entity.Property(e => e.QtyProductEstimate).HasColumnName("qty_product_estimate");
            entity.Property(e => e.QtyProductSupplies).HasColumnName("qty_product_supplies");
            entity.Property(e => e.QtyRemain).HasColumnName("qty_remain");
            entity.Property(e => e.ReceiptCodeProductEstimateId).HasColumnName("receipt_code_product_estimate_id");
            entity.Property(e => e.ReceiptCodeProductSuppliesId).HasColumnName("receipt_code_product_supplies_id");
            entity.Property(e => e.WarehouseExport).HasColumnName("warehouse_export");
            entity.Property(e => e.WarehouseImport).HasColumnName("warehouse_import");

            entity.HasOne(d => d.ReceiptCodeProductEstimate).WithMany(p => p.ProductSuppliesProductEstimates)
                .HasForeignKey(d => d.ReceiptCodeProductEstimateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ProductSupplies_ProductEstima_receipt_code_product_estimat_fkey");

            entity.HasOne(d => d.ReceiptCodeProductSupplies).WithMany(p => p.ProductSuppliesProductEstimates)
                .HasForeignKey(d => d.ReceiptCodeProductSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ProductSupplies_ProductEstima_receipt_code_product_supplie_fkey");

            entity.HasOne(d => d.WarehouseExportNavigation).WithMany(p => p.ProductSuppliesProductEstimateWarehouseExportNavigations)
                .HasForeignKey(d => d.WarehouseExport)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ProductSupplies_ProductEstimate_warehouse_export_fkey");

            entity.HasOne(d => d.WarehouseImportNavigation).WithMany(p => p.ProductSuppliesProductEstimateWarehouseImportNavigations)
                .HasForeignKey(d => d.WarehouseImport)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ProductSupplies_ProductEstimate_warehouse_import_fkey");
        });

        modelBuilder.Entity<ProgramGroupService>(entity =>
        {
            entity.HasKey(e => e.ProgramGroupServiceId).HasName("Program_GroupService_pkey");

            entity.ToTable("Program_GroupService", tb => tb.HasComment("Chương trình - nhóm dịch vụ"));

            entity.Property(e => e.ProgramGroupServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("program_group_service_id");
            entity.Property(e => e.GroupServiceId).HasColumnName("group_service_id");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");

            entity.HasOne(d => d.GroupService).WithMany(p => p.ProgramGroupServices)
                .HasForeignKey(d => d.GroupServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Program_GroupService_group_service_id_fkey");

            entity.HasOne(d => d.Program).WithMany(p => p.ProgramGroupServices)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Program_GroupService_program_id_fkey");
        });

        modelBuilder.Entity<ProgramService>(entity =>
        {
            entity.HasKey(e => e.ProgramServiceId).HasName("Program_Service_pkey");

            entity.ToTable("Program_Service", tb => tb.HasComment("Danh mục Chương trình - Dịch vụ"));

            entity.Property(e => e.ProgramServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("program_service_id");
            entity.Property(e => e.MoneyDiscount)
                .HasColumnType("money")
                .HasColumnName("money_discount");
            entity.Property(e => e.PercentDiscount).HasColumnName("percent_discount");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProgramId).HasColumnName("program_id");

            entity.HasOne(d => d.Product).WithMany(p => p.ProgramServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Program_Service_service_id_fkey2");

            entity.HasOne(d => d.Program).WithMany(p => p.ProgramServices)
                .HasForeignKey(d => d.ProgramId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Program_Service_program_id_fkey");
        });

        modelBuilder.Entity<QmstypeScreenKiosk>(entity =>
        {
            entity.HasKey(e => e.QmsScreenKioskId).HasName("QMSType_ScreenKiosk_pkey");

            entity.ToTable("QMSType_ScreenKiosk", tb => tb.HasComment("Qms - màn hình kiosk"));

            entity.Property(e => e.QmsScreenKioskId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("qms_screen_kiosk_id");
            entity.Property(e => e.QmsTypeId).HasColumnName("qms_type_id");
            entity.Property(e => e.ScreenKioskId).HasColumnName("screen_kiosk_id");

            entity.HasOne(d => d.QmsType).WithMany(p => p.QmstypeScreenKiosks)
                .HasForeignKey(d => d.QmsTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("QMSType_ScreenKiosk_qms_type_id_fkey");

            entity.HasOne(d => d.ScreenKiosk).WithMany(p => p.QmstypeScreenKiosks)
                .HasForeignKey(d => d.ScreenKioskId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("QMSType_ScreenKiosk_screen_kiosk_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeDesignateService>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeDesignateServiceId).HasName("ReceiptCode_DesignateService_pkey");

            entity.ToTable("ReceiptCode_DesignateService", tb => tb.HasComment("Phiếu thu - dịch vụ chỉ định"));

            entity.Property(e => e.ReceiptCodeDesignateServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_designate_service_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("deleted_at");
            entity.Property(e => e.DesignateServiceId)
                .HasComment("chỉ định dịch vụ")
                .HasColumnName("designate_service_id");
            entity.Property(e => e.DesignateServicePrescriptionId)
                .HasComment("chỉ định dịch vụ thuốc")
                .HasColumnName("designate_service_prescription_id");
            entity.Property(e => e.IsStatus)
                .HasComment("trạng thái 0 Mới tiếp đón 1 đang điều trị")
                .HasColumnName("is_status");
            entity.Property(e => e.PackageServiceId).HasColumnName("package_service_id");
            entity.Property(e => e.PatientDesignateSuppliesServiceId).HasColumnName("patient_designate_supplies_service_id");
            entity.Property(e => e.PatientReceptionId).HasColumnName("patient_reception_id");
            entity.Property(e => e.ReceiptCodeId)
                .HasComment("id phiếu thu")
                .HasColumnName("receipt_code_id");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.DesignateService).WithMany(p => p.ReceiptCodeDesignateServices)
                .HasForeignKey(d => d.DesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_designate_service_id_fkey");

            entity.HasOne(d => d.DesignateServicePrescription).WithMany(p => p.ReceiptCodeDesignateServices)
                .HasForeignKey(d => d.DesignateServicePrescriptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_designate_service_prescription_");

            entity.HasOne(d => d.PackageService).WithMany(p => p.ReceiptCodeDesignateServices)
                .HasForeignKey(d => d.PackageServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_package_service_id_fkey");

            entity.HasOne(d => d.PatientDesignateSuppliesService).WithMany(p => p.ReceiptCodeDesignateServices)
                .HasForeignKey(d => d.PatientDesignateSuppliesServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_patient_designate_supplies_serv");

            entity.HasOne(d => d.PatientReception).WithMany(p => p.ReceiptCodeDesignateServices)
                .HasForeignKey(d => d.PatientReceptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_patient_reception_id_fkey");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.ReceiptCodeDesignateServices)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_receipt_code_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeDesignateServiceDiscount>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeDesignateServiceDiscountId).HasName("ReceiptCode_DesignateService_Discount_pkey");

            entity.ToTable("ReceiptCode_DesignateService_Discount", tb => tb.HasComment("Phiếu thu - Giảm giá"));

            entity.Property(e => e.ReceiptCodeDesignateServiceDiscountId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_designate_service_discount_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DiscountMoney)
                .HasColumnType("money")
                .HasColumnName("discount_money");
            entity.Property(e => e.DiscountPercent).HasColumnName("discount_percent");
            entity.Property(e => e.DiscountType).HasColumnName("discount_type");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PatientDesignateServiceId).HasColumnName("patient_designate_service_id");
            entity.Property(e => e.ReceiptCodeDesignateServiceId).HasColumnName("receipt_code_designate_service_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VoucherId).HasColumnName("voucher_id");

            entity.HasOne(d => d.PatientDesignateService).WithMany(p => p.ReceiptCodeDesignateServiceDiscounts)
                .HasForeignKey(d => d.PatientDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_Discount_patient_designate_serv");

            entity.HasOne(d => d.ReceiptCodeDesignateService).WithMany(p => p.ReceiptCodeDesignateServiceDiscounts)
                .HasForeignKey(d => d.ReceiptCodeDesignateServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService__receipt_code_designate_servi_fkey");

            entity.HasOne(d => d.Voucher).WithMany(p => p.ReceiptCodeDesignateServiceDiscounts)
                .HasForeignKey(d => d.VoucherId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DesignateService_Discount_voucher_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeDrug>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeDrugId).HasName("ReceiptCode_Drug_pkey");

            entity.ToTable("ReceiptCode_Drug", tb => tb.HasComment("Phiếu lĩnh - Đơn thuốc"));

            entity.Property(e => e.ReceiptCodeDrugId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_drug_id");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.ReceiptCodeId).HasColumnName("receipt_code_id");

            entity.HasOne(d => d.Drug).WithMany(p => p.ReceiptCodeDrugs)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_Drug_drug_id_fkey");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.ReceiptCodeDrugs)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_Drug_receipt_code_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeDrugClassification>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeMedicineTypeId).HasName("ReceiptCode_MedicineType_pkey");

            entity.ToTable("ReceiptCode_DrugClassification", tb => tb.HasComment("Phiếu lĩnh- phân loại thuốc"));

            entity.Property(e => e.ReceiptCodeMedicineTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_medicine_type_id");
            entity.Property(e => e.DrugClassificationId).HasColumnName("drug_classification_id");
            entity.Property(e => e.ReceiptCodeId).HasColumnName("receipt_code_id");

            entity.HasOne(d => d.DrugClassification).WithMany(p => p.ReceiptCodeDrugClassifications)
                .HasForeignKey(d => d.DrugClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_DrugClassification_drug_classification_id_fkey");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.ReceiptCodeDrugClassifications)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_MedicineType_receipt_code_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeEstimateProduct>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeEstimateProductId).HasName("ReceiptCodeEstimate_Product_pkey");

            entity.ToTable("ReceiptCodeEstimate_Product", tb => tb.HasComment("Phiếu dự trù - Hàng hóa"));

            entity.Property(e => e.ReceiptCodeEstimateProductId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_estimate_product_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.QtyApprove)
                .HasComment("số lượng duyệt")
                .HasColumnName("qty_approve");
            entity.Property(e => e.QtyEstmatime)
                .HasComment("số lượng dự trù")
                .HasColumnName("qty_estmatime");
            entity.Property(e => e.QtyRemain).HasColumnName("qty_remain");
            entity.Property(e => e.ReceiptCodeEstimateId).HasColumnName("receipt_code_estimate_id");
            entity.Property(e => e.ReceiptCodeSupplieProductId).HasColumnName("receipt_code_supplie_product_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Concept).WithMany(p => p.ReceiptCodeEstimateProducts)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeEstimate_Product_concept_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ReceiptCodeEstimateProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeEstimate_Product_product_id_fkey");

            entity.HasOne(d => d.ReceiptCodeEstimate).WithMany(p => p.ReceiptCodeEstimateProducts)
                .HasForeignKey(d => d.ReceiptCodeEstimateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeEstimate_Product_receipt_code_estimate_id_fkey");

            entity.HasOne(d => d.ReceiptCodeSupplieProduct).WithMany(p => p.ReceiptCodeEstimateProducts)
                .HasForeignKey(d => d.ReceiptCodeSupplieProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeEstimate_Product_receipt_code_supplie_product_id_");
        });

        modelBuilder.Entity<ReceiptCodeMoney>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeMoneyId).HasName("ReceiptCode_Money_pkey");

            entity.ToTable("ReceiptCode_Money", tb => tb.HasComment("Lưu số tiền phiếu thu"));

            entity.Property(e => e.ReceiptCodeMoneyId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_money_id");
            entity.Property(e => e.DiscountReceiptCode)
                .HasComment("tiiền miễn giảm phiếu thu")
                .HasColumnName("discount_receipt_code");
            entity.Property(e => e.DiscountTotal)
                .HasComment("tổng tiền chính sách miễn giảm")
                .HasColumnName("discount_total");
            entity.Property(e => e.InsuranceTotal)
                .HasComment("tổng tiền bảo hiểm")
                .HasColumnName("insurance_total");
            entity.Property(e => e.PatientTotal)
                .HasComment("tổng tiền nb thanh toán")
                .HasColumnName("patient_total");
            entity.Property(e => e.ReceiptCodeId).HasColumnName("receipt_code_id");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.ReceiptCodeMoneys)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_Money_receipt_code_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeRoom>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeRoomId).HasName("ReceiptCode_Room_pkey");

            entity.ToTable("ReceiptCode_Room", tb => tb.HasComment("Phiếu lĩnh - Phòng"));

            entity.Property(e => e.ReceiptCodeRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_room_id");
            entity.Property(e => e.ReceiptCodeId).HasColumnName("receipt_code_id");
            entity.Property(e => e.RoomId).HasColumnName("room_id");

            entity.HasOne(d => d.ReceiptCode).WithMany(p => p.ReceiptCodeRooms)
                .HasForeignKey(d => d.ReceiptCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_Room_receipt_code_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.ReceiptCodeRooms)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCode_Room_room_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeSuppliesProduct>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeSupplieProductId).HasName("ReceiptCodeSupplies_Product_pkey");

            entity.ToTable("ReceiptCodeSupplies_Product", tb => tb.HasComment("Phiếu thu nhà cung cấp - hàng hóa"));

            entity.Property(e => e.ReceiptCodeSupplieProductId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_supplie_product_id");
            entity.Property(e => e.AfterPriceVat)
                .HasComment("don gia sau vat")
                .HasColumnName("after_price_vat");
            entity.Property(e => e.BeforePriceVat)
                .HasComment("giá trước vat")
                .HasColumnName("before_price_vat");
            entity.Property(e => e.CountriesId)
                .HasComment("nước sản xuất")
                .HasColumnName("countries_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Discount)
                .HasComment("giảm giá")
                .HasColumnName("discount");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.LabelCode)
                .HasComment("mã nhãn hiệu")
                .HasColumnType("character varying")
                .HasColumnName("label_code");
            entity.Property(e => e.PartnerId)
                .HasComment("nhà sản xuất")
                .HasColumnName("partner_id");
            entity.Property(e => e.PriceInsurance)
                .HasComment("đơn giá bh")
                .HasColumnName("price_insurance");
            entity.Property(e => e.PriceSurance)
                .HasComment("đơn giá bv")
                .HasColumnName("price_surance");
            entity.Property(e => e.ProductId)
                .HasComment("hàng hóa")
                .HasColumnName("product_id");
            entity.Property(e => e.ProductSuppliesProductEstimateId).HasColumnName("product_supplies_product_estimate_id");
            entity.Property(e => e.Qty)
                .HasComment("số lượng")
                .HasColumnName("qty");
            entity.Property(e => e.QtyRemain).HasColumnName("qty_remain");
            entity.Property(e => e.ReceiptCodeSuppliesId).HasColumnName("receipt_code_supplies_id");
            entity.Property(e => e.RetailSurplus)
                .HasDefaultValueSql("0")
                .HasComment("thặng dư bán lẻ")
                .HasColumnName("retail_surplus");
            entity.Property(e => e.Surcharge)
                .HasComment("phụ thu")
                .HasColumnName("surcharge");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.Vat).HasColumnName("vat");

            entity.HasOne(d => d.Countries).WithMany(p => p.ReceiptCodeSuppliesProducts)
                .HasForeignKey(d => d.CountriesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeSupplies_Product_countries_id_fkey");

            entity.HasOne(d => d.Partner).WithMany(p => p.ReceiptCodeSuppliesProducts)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeSupplies_Product_partner_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ReceiptCodeSuppliesProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeSupplies_Product_product_id_fkey");

            entity.HasOne(d => d.ProductSuppliesProductEstimate).WithMany(p => p.ReceiptCodeSuppliesProducts)
                .HasForeignKey(d => d.ProductSuppliesProductEstimateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeSupplies_Product_product_supplies_product_estimat");

            entity.HasOne(d => d.ReceiptCodeSupplies).WithMany(p => p.ReceiptCodeSuppliesProducts)
                .HasForeignKey(d => d.ReceiptCodeSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeSupplies_Product_receipt_code_supplies_id_fkey");
        });

        modelBuilder.Entity<ReceiptCodeSuppliesProductLot>(entity =>
        {
            entity.HasKey(e => e.ReceiptCodeSuppliesProductLotId).HasName("ReceiptCodeSuppliesProduct_Lot_pkey");

            entity.ToTable("ReceiptCodeSuppliesProduct_Lot", tb => tb.HasComment("Phiếu nhập nhà cung cấp - số lô"));

            entity.Property(e => e.ReceiptCodeSuppliesProductLotId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_code_supplies_product_lot_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ExpiredDate).HasColumnName("expired_date");
            entity.Property(e => e.LotNumber)
                .HasColumnType("character varying")
                .HasColumnName("lot_number");
            entity.Property(e => e.ReceiptCodeSuppliesProductId).HasColumnName("receipt_code_supplies_product_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.ReceiptCodeSuppliesProduct).WithMany(p => p.ReceiptCodeSuppliesProductLots)
                .HasForeignKey(d => d.ReceiptCodeSuppliesProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptCodeSupplies_ProductLots_receipt_code_supplie_product");
        });

        modelBuilder.Entity<ReceiptListDrugClassification>(entity =>
        {
            entity.HasKey(e => e.ReceiptListDrugClassificationId).HasName("ReceiptList_DrugClassification_pkey");

            entity.ToTable("ReceiptList_DrugClassification", tb => tb.HasComment("Phiếu lĩnh - phân loại thuốc"));

            entity.Property(e => e.ReceiptListDrugClassificationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("receipt_list_drug_classification_id");
            entity.Property(e => e.DrugClassificationId).HasColumnName("drug_classification_id");
            entity.Property(e => e.ReceiptListId).HasColumnName("receipt_list_id");

            entity.HasOne(d => d.DrugClassification).WithMany(p => p.ReceiptListDrugClassifications)
                .HasForeignKey(d => d.DrugClassificationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptList_DrugClassification_drug_classification_id_fkey");

            entity.HasOne(d => d.ReceiptList).WithMany(p => p.ReceiptListDrugClassifications)
                .HasForeignKey(d => d.ReceiptListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReceiptList_DrugClassification_receipt_list_id_fkey");
        });

        modelBuilder.Entity<RegisterAppoiment>(entity =>
        {
            entity.HasKey(e => e.RegisterAppointmentId).HasName("RegisterAppoiment_pkey");

            entity.ToTable("RegisterAppoiment", tb => tb.HasComment("Đăng kí lịch khám"));

            entity.Property(e => e.RegisterAppointmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("register_appointment_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Dob).HasColumnName("dob");
            entity.Property(e => e.FullName).HasColumnName("full_name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.TimeAppointment).HasColumnName("time_appointment");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.Account).WithMany(p => p.RegisterAppoiments)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RegisterAppoiment_account_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.RegisterAppoiments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RegisterAppoiment_department_id_fkey");
        });

        modelBuilder.Entity<RehabilitationAccountImplement>(entity =>
        {
            entity.HasKey(e => e.RehabilitationAccountImplementId).HasName("Rehabilitation_AccountImplement_pkey");

            entity.ToTable("Rehabilitation_AccountImplement");

            entity.Property(e => e.RehabilitationAccountImplementId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_account_implement_id");
            entity.Property(e => e.Anesthesia1).HasColumnName("anesthesia1");
            entity.Property(e => e.Anesthesia2).HasColumnName("anesthesia2");
            entity.Property(e => e.AnestheticAdditive1).HasColumnName("anesthetic_additive1");
            entity.Property(e => e.AnestheticAdditive2).HasColumnName("anesthetic_additive2");
            entity.Property(e => e.MachineMainId).HasColumnName("machine_main_id");
            entity.Property(e => e.MachineSubId).HasColumnName("machine_sub_id");
            entity.Property(e => e.Nurse).HasColumnName("nurse");
            entity.Property(e => e.NurseTool1).HasColumnName("nurse_tool1");
            entity.Property(e => e.NurseTool2).HasColumnName("nurse_tool2");
            entity.Property(e => e.NurseTool3).HasColumnName("nurse_tool3");
            entity.Property(e => e.NurseTool4).HasColumnName("nurse_tool4");
            entity.Property(e => e.NurseTool5).HasColumnName("nurse_tool5");
            entity.Property(e => e.OutpatientAnesthesiologist).HasColumnName("outpatient_anesthesiologist");
            entity.Property(e => e.OutpatientDoctorId).HasColumnName("outpatient_doctor_id");
            entity.Property(e => e.PatientDesignateSurgicalProceduresId).HasColumnName("patient_designate_surgical_procedures_id");
            entity.Property(e => e.Surgeons1Id).HasColumnName("surgeons1_id");
            entity.Property(e => e.Surgeons2Id).HasColumnName("surgeons2_id");
            entity.Property(e => e.SurgeonsId).HasColumnName("surgeons_id");

            entity.HasOne(d => d.Anesthesia1Navigation).WithMany(p => p.RehabilitationAccountImplementAnesthesia1Navigations)
                .HasForeignKey(d => d.Anesthesia1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthesia1_fkey");

            entity.HasOne(d => d.Anesthesia2Navigation).WithMany(p => p.RehabilitationAccountImplementAnesthesia2Navigations)
                .HasForeignKey(d => d.Anesthesia2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthesia2_fkey");

            entity.HasOne(d => d.AnestheticAdditive1Navigation).WithMany(p => p.RehabilitationAccountImplementAnestheticAdditive1Navigations)
                .HasForeignKey(d => d.AnestheticAdditive1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthetic_additive1_fkey");

            entity.HasOne(d => d.AnestheticAdditive2Navigation).WithMany(p => p.RehabilitationAccountImplementAnestheticAdditive2Navigations)
                .HasForeignKey(d => d.AnestheticAdditive2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthetic_additive2_fkey");

            entity.HasOne(d => d.MachineMain).WithMany(p => p.RehabilitationAccountImplementMachineMains)
                .HasForeignKey(d => d.MachineMainId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_machine_main_id_fkey");

            entity.HasOne(d => d.MachineSub).WithMany(p => p.RehabilitationAccountImplementMachineSubs)
                .HasForeignKey(d => d.MachineSubId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_machine_sub_id_fkey");

            entity.HasOne(d => d.NurseNavigation).WithMany(p => p.RehabilitationAccountImplementNurseNavigations)
                .HasForeignKey(d => d.Nurse)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_fkey");

            entity.HasOne(d => d.NurseTool1Navigation).WithMany(p => p.RehabilitationAccountImplementNurseTool1Navigations)
                .HasForeignKey(d => d.NurseTool1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool1_fkey");

            entity.HasOne(d => d.NurseTool2Navigation).WithMany(p => p.RehabilitationAccountImplementNurseTool2Navigations)
                .HasForeignKey(d => d.NurseTool2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool2_fkey");

            entity.HasOne(d => d.NurseTool3Navigation).WithMany(p => p.RehabilitationAccountImplementNurseTool3Navigations)
                .HasForeignKey(d => d.NurseTool3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool3_fkey");

            entity.HasOne(d => d.NurseTool4Navigation).WithMany(p => p.RehabilitationAccountImplementNurseTool4Navigations)
                .HasForeignKey(d => d.NurseTool4)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool4_fkey");

            entity.HasOne(d => d.NurseTool5Navigation).WithMany(p => p.RehabilitationAccountImplementNurseTool5Navigations)
                .HasForeignKey(d => d.NurseTool5)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool5_fkey");

            entity.HasOne(d => d.OutpatientAnesthesiologistNavigation).WithMany(p => p.RehabilitationAccountImplementOutpatientAnesthesiologistNavigations)
                .HasForeignKey(d => d.OutpatientAnesthesiologist)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImpl_outpatient_anesthesiologist_fkey");

            entity.HasOne(d => d.OutpatientDoctor).WithMany(p => p.RehabilitationAccountImplementOutpatientDoctors)
                .HasForeignKey(d => d.OutpatientDoctorId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_outpatient_doctor_id_fkey");

            entity.HasOne(d => d.PatientDesignateSurgicalProcedures).WithMany(p => p.RehabilitationAccountImplements)
                .HasForeignKey(d => d.PatientDesignateSurgicalProceduresId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SRehabilitation_AccountImp_patient_designate_surgical_p_fkey");

            entity.HasOne(d => d.Surgeons1).WithMany(p => p.RehabilitationAccountImplementSurgeons1s)
                .HasForeignKey(d => d.Surgeons1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_surgeons2_id_fkey");

            entity.HasOne(d => d.Surgeons2).WithMany(p => p.RehabilitationAccountImplementSurgeons2s)
                .HasForeignKey(d => d.Surgeons2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_surgeons3_id_fkey");

            entity.HasOne(d => d.Surgeons).WithMany(p => p.RehabilitationAccountImplementSurgeons)
                .HasForeignKey(d => d.SurgeonsId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_surgeons1_id_fkey");
        });

        modelBuilder.Entity<RehabilitationOtherSourcePay>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceOtherSourcePayId).HasName("Rehabilitation_OtherSourcePay_pkey");

            entity.ToTable("Rehabilitation_OtherSourcePay", tb => tb.HasComment("Phục hồi chức năng - nguồn chi trả khác"));

            entity.Property(e => e.RehabilitationServiceOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_other_source_pay_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");
            entity.Property(e => e.RehabilitationServiceId).HasColumnName("rehabilitation_service_id");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.RehabilitationOtherSourcePays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Rehabilitation_OtherSourceP_other_source_pay_id_fkey");

            entity.HasOne(d => d.RehabilitationService).WithMany(p => p.RehabilitationOtherSourcePays)
                .HasForeignKey(d => d.RehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Rehabilitation_Oth_surgical_procedures_service__fkey");
        });

        modelBuilder.Entity<RehabilitationServiceServiceList>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceServiceListId).HasName("RehabilitationService_ServiceList_pkey");

            entity.ToTable("RehabilitationService_ServiceList", tb => tb.HasComment("phục hồi chức năng trường hợp kê dịch vụ"));

            entity.Property(e => e.RehabilitationServiceServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_service_list_id");
            entity.Property(e => e.RehabilitationServiceId).HasColumnName("rehabilitation_service_id");
            entity.Property(e => e.ServiceListId).HasColumnName("service_list_id");

            entity.HasOne(d => d.RehabilitationService).WithMany(p => p.RehabilitationServiceServiceLists)
                .HasForeignKey(d => d.RehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_Ser_surgical_procedures_service__fkey");

            entity.HasOne(d => d.ServiceList).WithMany(p => p.RehabilitationServiceServiceLists)
                .HasForeignKey(d => d.ServiceListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_ServiceList_service_list_id_fkey");
        });

        modelBuilder.Entity<RehabilitationServiceTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceTabCostGroupId).HasName("RehabilitationService_TabCostGroup_pkey");

            entity.ToTable("RehabilitationService_TabCostGroup");

            entity.Property(e => e.RehabilitationServiceTabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_tab_cost_group_id");
            entity.Property(e => e.RehabilitationServiceId).HasColumnName("rehabilitation_service_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.RehabilitationService).WithMany(p => p.RehabilitationServiceTabCostGroups)
                .HasForeignKey(d => d.RehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_Ta_surgical_procedures_service__fkey3");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.RehabilitationServiceTabCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_TabCostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<RehabilitationServiceTabImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceTabImplementationRoomId).HasName("RehabilitationService_TabImplementationRoom_pkey");

            entity.ToTable("RehabilitationService_TabImplementationRoom", tb => tb.HasComment("Phẫu thuật thủ thuật - phòng thực hiện"));

            entity.Property(e => e.RehabilitationServiceTabImplementationRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_tab_implementation_room_id");
            entity.Property(e => e.RehabilitationServiceId).HasColumnName("rehabilitation_service_id");
            entity.Property(e => e.TabImplementRoomId).HasColumnName("tab_implement_room_id");

            entity.HasOne(d => d.RehabilitationService).WithMany(p => p.RehabilitationServiceTabImplementationRooms)
                .HasForeignKey(d => d.RehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_Ta_surgical_procedures_service__fkey1");

            entity.HasOne(d => d.TabImplementRoom).WithMany(p => p.RehabilitationServiceTabImplementationRooms)
                .HasForeignKey(d => d.TabImplementRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_TabImpleme_tab_implement_room_id_fkey");
        });

        modelBuilder.Entity<RehabilitationServiceTabInsurancePaymentConditon>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceTabInsurancePaymentConditionId).HasName("RehabilitationService_TabInsurancePaymentConditon_pkey");

            entity.ToTable("RehabilitationService_TabInsurancePaymentConditon", tb => tb.HasComment("Phục hồi chức năng - đk thanh toán bh"));

            entity.Property(e => e.RehabilitationServiceTabInsurancePaymentConditionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_tab_insurance_payment_condition_id");
            entity.Property(e => e.RehabilitationServiceId).HasColumnName("rehabilitation_service_id");
            entity.Property(e => e.TabInsurancePaymentConditionId).HasColumnName("tab_insurance_payment_condition_id");

            entity.HasOne(d => d.RehabilitationService).WithMany(p => p.RehabilitationServiceTabInsurancePaymentConditons)
                .HasForeignKey(d => d.RehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_Tab_surgical_procedure_service_i_fkey");

            entity.HasOne(d => d.TabInsurancePaymentCondition).WithMany(p => p.RehabilitationServiceTabInsurancePaymentConditons)
                .HasForeignKey(d => d.TabInsurancePaymentConditionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationsService_Tab_tab_insurance_payment_condit_fkey");
        });

        modelBuilder.Entity<RehabilitationsServiceTabPriceOption>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceTabPriceOptionId).HasName("RehabilitationService_TabPriceOption_pkey");

            entity.ToTable("RehabilitationsService_TabPriceOption", tb => tb.HasComment("Phục hồi chức năng - Tùy chọn giá"));

            entity.Property(e => e.RehabilitationServiceTabPriceOptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_tab_price_option_id");
            entity.Property(e => e.RehabilitationServiceId).HasColumnName("rehabilitation_service_id");
            entity.Property(e => e.TabPriceOptionId).HasColumnName("tab_price_option_id");

            entity.HasOne(d => d.RehabilitationService).WithMany(p => p.RehabilitationsServiceTabPriceOptions)
                .HasForeignKey(d => d.RehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationsService_Tab_surgical_procedures_service__fkey");

            entity.HasOne(d => d.TabPriceOption).WithMany(p => p.RehabilitationsServiceTabPriceOptions)
                .HasForeignKey(d => d.TabPriceOptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationService_TabPriceOpti_tab_price_option_id_fkey");
        });

        modelBuilder.Entity<RehabilitationsServicesTabHistoryChanged>(entity =>
        {
            entity.HasKey(e => e.RehabilitationServiceTabHistoryChangedId).HasName("RehabilitationsServices_TabHistoryChanged_pkey");

            entity.ToTable("RehabilitationsServices_TabHistoryChanged", tb => tb.HasComment("Phục hồi chức năng - lịch sử thay đổi"));

            entity.Property(e => e.RehabilitationServiceTabHistoryChangedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("rehabilitation_service_tab_history_changed_id");
            entity.Property(e => e.RehabilitationServiceId).HasColumnName("rehabilitation_service_id");
            entity.Property(e => e.TabHistoryChangedId).HasColumnName("tab_history_changed_id");

            entity.HasOne(d => d.RehabilitationService).WithMany(p => p.RehabilitationsServicesTabHistoryChangeds)
                .HasForeignKey(d => d.RehabilitationServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("RehabilitationsServices_Ta_surgical_procedure_service_i_fkey");

            entity.HasOne(d => d.TabHistoryChanged).WithMany(p => p.RehabilitationsServicesTabHistoryChangeds)
                .HasForeignKey(d => d.TabHistoryChangedId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Rehabilitations_TabHisto_tab_history_changed_id_fkey");
        });

        modelBuilder.Entity<ReportBallotType>(entity =>
        {
            entity.HasKey(e => e.ReportBallotTypeId).HasName("Report_BallotType_pkey");

            entity.ToTable("Report_BallotType", tb => tb.HasComment("Báo cáo - Loại phiếu"));

            entity.Property(e => e.ReportBallotTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_ballot_type_id");
            entity.Property(e => e.BallotTypeId).HasColumnName("ballot_type_id");
            entity.Property(e => e.ReportId).HasColumnName("report_id");

            entity.HasOne(d => d.BallotType).WithMany(p => p.ReportBallotTypes)
                .HasForeignKey(d => d.BallotTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Report_BallotType_ballot_type_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.ReportBallotTypes)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Report_BallotType_report_id_fkey");
        });

        modelBuilder.Entity<ReportDrugInteractionLaboratoryService>(entity =>
        {
            entity.HasKey(e => e.ReportDrugInterationLaboratoryServiceId).HasName("ReportDrugInteraction_LaboratoryService_pkey");

            entity.ToTable("ReportDrugInteraction_LaboratoryService", tb => tb.HasComment("Khai báo tương tác thuốc - xét nghiệm"));

            entity.Property(e => e.ReportDrugInterationLaboratoryServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_drug_interation_laboratory_service_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.ChildIndex).HasColumnName("child_index");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.ECrCl).HasColumnName("eCrCl");
            entity.Property(e => e.HighIndex).HasColumnName("high_index");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.LaboratoryServiceId).HasColumnName("laboratory_service_id");
            entity.Property(e => e.LowIndex).HasColumnName("low_index");
            entity.Property(e => e.ReportDrugInterationId).HasColumnName("report_drug_interation_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.LaboratoryService).WithMany(p => p.ReportDrugInteractionLaboratoryServices)
                .HasForeignKey(d => d.LaboratoryServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteraction_LaboratoryServ_laboratory_service_id_fkey");

            entity.HasOne(d => d.ReportDrugInteration).WithMany(p => p.ReportDrugInteractionLaboratoryServices)
                .HasForeignKey(d => d.ReportDrugInterationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteraction_Laboratory_report_drug_interation_id_fkey");
        });

        modelBuilder.Entity<ReportDrugInteractionsAtc1code>(entity =>
        {
            entity.HasKey(e => e.ReportDrupInteractionAtc1CodeId).HasName("ReportDrugInteractions_ATC1Code_pkey");

            entity.ToTable("ReportDrugInteractions_ATC1Code", tb => tb.HasComment("khai báo tương tác thuốc - mã atc"));

            entity.Property(e => e.ReportDrupInteractionAtc1CodeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_drup_interaction_atc1_code_id");
            entity.Property(e => e.AtcCodeId).HasColumnName("atc_code_id");
            entity.Property(e => e.ReportDrugInterationId).HasColumnName("report_drug_interation_id");

            entity.HasOne(d => d.AtcCode).WithMany(p => p.ReportDrugInteractionsAtc1codes)
                .HasForeignKey(d => d.AtcCodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_ATC1Code_atc_code_id_fkey");

            entity.HasOne(d => d.ReportDrugInteration).WithMany(p => p.ReportDrugInteractionsAtc1codes)
                .HasForeignKey(d => d.ReportDrugInterationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_ATC1Code_report_drug_interation_id_fkey");
        });

        modelBuilder.Entity<ReportDrugInteractionsAtc2code>(entity =>
        {
            entity.HasKey(e => e.ReportDrugInteractionAtc2CodeId).HasName("ReportDrugInteractions_ATC2Code_pkey");

            entity.ToTable("ReportDrugInteractions_ATC2Code", tb => tb.HasComment("khai báo tương tác thuốc - mã atc 2"));

            entity.Property(e => e.ReportDrugInteractionAtc2CodeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_drug_interaction_atc2_code_id");
            entity.Property(e => e.Atc2CodeId).HasColumnName("atc2_code_id");
            entity.Property(e => e.ReportDrugInteractionId).HasColumnName("report_drug_interaction_id");

            entity.HasOne(d => d.Atc2Code).WithMany(p => p.ReportDrugInteractionsAtc2codes)
                .HasForeignKey(d => d.Atc2CodeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_ATC2Code_atc2_code_id_fkey");

            entity.HasOne(d => d.ReportDrugInteraction).WithMany(p => p.ReportDrugInteractionsAtc2codes)
                .HasForeignKey(d => d.ReportDrugInteractionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_ATC2Code_report_drug_interaction_id_fkey");
        });

        modelBuilder.Entity<ReportDrugInteractionsDiseaseName>(entity =>
        {
            entity.HasKey(e => e.ReportDrugInteractionDiseaseNameId).HasName("ReportDrugInteractions_DiseaseName_pkey");

            entity.ToTable("ReportDrugInteractions_DiseaseName", tb => tb.HasComment("Khai báo tương tác thuốc - chẩn đoán bệnh"));

            entity.Property(e => e.ReportDrugInteractionDiseaseNameId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_drug_interaction_disease_name_id");
            entity.Property(e => e.DiseaseNameId).HasColumnName("disease_name_id");
            entity.Property(e => e.ReportDrugInteractionId).HasColumnName("report_drug_interaction_id");

            entity.HasOne(d => d.DiseaseName).WithMany(p => p.ReportDrugInteractionsDiseaseNames)
                .HasForeignKey(d => d.DiseaseNameId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_DiseaseName_disease_name_id_fkey");

            entity.HasOne(d => d.ReportDrugInteraction).WithMany(p => p.ReportDrugInteractionsDiseaseNames)
                .HasForeignKey(d => d.ReportDrugInteractionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_DiseaseN_report_drug_interaction_id_fkey");
        });

        modelBuilder.Entity<ReportDrugInteractionsDrug1>(entity =>
        {
            entity.HasKey(e => e.ReportDrugInteractionDrug1Id).HasName("ReportDrugInteractions_Drug1_pkey");

            entity.ToTable("ReportDrugInteractions_Drug1", tb => tb.HasComment("Khai báo tương tác thuốc - biệt dược 1"));

            entity.Property(e => e.ReportDrugInteractionDrug1Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_drug_interaction_drug1_id");
            entity.Property(e => e.DrugId1).HasColumnName("drug_id1");
            entity.Property(e => e.ReportDrugInteractionId).HasColumnName("report_drug_interaction_id");

            entity.HasOne(d => d.DrugId1Navigation).WithMany(p => p.ReportDrugInteractionsDrug1s)
                .HasForeignKey(d => d.DrugId1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_Drug1_drug_id1_fkey");

            entity.HasOne(d => d.ReportDrugInteraction).WithMany(p => p.ReportDrugInteractionsDrug1s)
                .HasForeignKey(d => d.ReportDrugInteractionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_Drug1_report_drug_interaction_id_fkey");
        });

        modelBuilder.Entity<ReportDrugInteractionsDrug2>(entity =>
        {
            entity.HasKey(e => e.ReportDrugInteractionDrug2).HasName("ReportDrugInteractions_Drug2_pkey");

            entity.ToTable("ReportDrugInteractions_Drug2", tb => tb.HasComment("Khai báo tương tác thuốc "));

            entity.Property(e => e.ReportDrugInteractionDrug2)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_drug_interaction_drug2");
            entity.Property(e => e.DrugId).HasColumnName("drug_id");
            entity.Property(e => e.ReportDrugInteractionId).HasColumnName("report_drug_interaction_id");

            entity.HasOne(d => d.Drug).WithMany(p => p.ReportDrugInteractionsDrug2s)
                .HasForeignKey(d => d.DrugId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_Drug2_drug_id_fkey");

            entity.HasOne(d => d.ReportDrugInteraction).WithMany(p => p.ReportDrugInteractionsDrug2s)
                .HasForeignKey(d => d.ReportDrugInteractionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ReportDrugInteractions_Drug2_report_drug_interaction_id_fkey");
        });

        modelBuilder.Entity<ReportTypeOfMedicalRecord>(entity =>
        {
            entity.HasKey(e => e.ReportTypeOfMedicalRecordId).HasName("Report_TypeOfMedicalRecord_pkey");

            entity.ToTable("Report_TypeOfMedicalRecord", tb => tb.HasComment("Báo cáo -Loại bệnh án"));

            entity.Property(e => e.ReportTypeOfMedicalRecordId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("report_type_of_medical_record_id");
            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.TypeOfMedicalRecordId).HasColumnName("type_of_medical_record_id");

            entity.HasOne(d => d.Report).WithMany(p => p.ReportTypeOfMedicalRecords)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Report_TypeOfMedicalRecord_report_id_fkey");

            entity.HasOne(d => d.TypeOfMedicalRecord).WithMany(p => p.ReportTypeOfMedicalRecords)
                .HasForeignKey(d => d.TypeOfMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Report_TypeOfMedicalRecord_type_of_medical_record_id_fkey");
        });

        modelBuilder.Entity<ResultAppoimentBasicInformationPatient>(entity =>
        {
            entity.HasKey(e => e.ResultAppointmentBasicInfomationPatientId).HasName("ResultAppoimentBasicInformationPatient_pkey");

            entity.ToTable("ResultAppoimentBasicInformationPatient", tb => tb.HasComment("Kết luận khám - hẹn khám"));

            entity.Property(e => e.ResultAppointmentBasicInfomationPatientId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("result_appointment_basic_infomation_patient_id");
            entity.Property(e => e.AppointmentDate).HasColumnName("appointment_date");
            entity.Property(e => e.BasicInfomationPatientId).HasColumnName("basic_infomation_patient_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PathologicalProcess).HasColumnName("pathological_process");
            entity.Property(e => e.Remind).HasColumnName("remind");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.BasicInfomationPatient).WithMany(p => p.ResultAppoimentBasicInformationPatients)
                .HasForeignKey(d => d.BasicInfomationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ResultAppoimentBasicInformatio_basic_infomation_patient_id_fkey");

            entity.HasOne(d => d.Room).WithMany(p => p.ResultAppoimentBasicInformationPatients)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ResultAppoimentBasicInformationPatient_room_id_fkey");
        });

        modelBuilder.Entity<ResultHomeBasicInformationPatient>(entity =>
        {
            entity.HasKey(e => e.ResultBasicInfomatiionPatientId).HasName("ResultBasicInformationPatient_pkey");

            entity.ToTable("ResultHomeBasicInformationPatient", tb => tb.HasComment("Kết luận khám -cho về"));

            entity.Property(e => e.ResultBasicInfomatiionPatientId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("result_basic_infomatiion_patient_id");
            entity.Property(e => e.BasicInformationPatientId).HasColumnName("basic_information_patient_id");
            entity.Property(e => e.Remind).HasColumnName("remind");
            entity.Property(e => e.Result).HasColumnName("result");
            entity.Property(e => e.TreatmentDirection).HasColumnName("treatment_direction");

            entity.HasOne(d => d.BasicInformationPatient).WithMany(p => p.ResultHomeBasicInformationPatients)
                .HasForeignKey(d => d.BasicInformationPatientId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ResultHomeBasicInformationPatient_basic_infomation_patient_i");
        });

        modelBuilder.Entity<RolePermisionGroupPermission>(entity =>
        {
            entity.HasKey(e => e.RolePermissionGroupPermissionId).HasName("Role_Permision_GroupPermission_pkey");

            entity.ToTable("Role_Permision_GroupPermission", tb => tb.HasComment("Vai trò - quyền - nhóm tính năng"));

            entity.Property(e => e.RolePermissionGroupPermissionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("role_permission_group_permission_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.GroupPermissionId).HasColumnName("group_permission_id");
            entity.Property(e => e.PermissionId).HasColumnName("permission_id");
            entity.Property(e => e.RoleId).HasColumnName("role_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.RolePermisionGroupPermissions)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Role_Permision_GroupPermission_attribute_id_fkey");

            entity.HasOne(d => d.GroupPermission).WithMany(p => p.RolePermisionGroupPermissions)
                .HasForeignKey(d => d.GroupPermissionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Role_Permision_GroupPermission_group_permission_id_fkey");

            entity.HasOne(d => d.Permission).WithMany(p => p.RolePermisionGroupPermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Role_Permision_GroupPermission_permission_id_fkey");

            entity.HasOne(d => d.Role).WithMany(p => p.RolePermisionGroupPermissions)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Role_Permision_GroupPermission_role_id_fkey");
        });

        modelBuilder.Entity<RoomTypeRooom>(entity =>
        {
            entity.HasKey(e => e.RoomTypeRoomId).HasName("Room_TypeRooom_pkey");

            entity.ToTable("Room_TypeRooom", tb => tb.HasComment("Phòng - Loại Phong"));

            entity.Property(e => e.RoomTypeRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("room_type_room_id");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.TypeRoomId).HasColumnName("type_room_id");

            entity.HasOne(d => d.Room).WithMany(p => p.RoomTypeRoooms)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Room_TypeRooom_room_id_fkey");

            entity.HasOne(d => d.TypeRoom).WithMany(p => p.RoomTypeRoooms)
                .HasForeignKey(d => d.TypeRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Room_TypeRooom_type_room_id_fkey");
        });

        modelBuilder.Entity<ServiceConcept>(entity =>
        {
            entity.HasKey(e => e.ServiceConceptId).HasName("Service_Concept_pkey");

            entity.ToTable("Service_Concept", tb => tb.HasComment("Dịch vụ -concecpt"));

            entity.Property(e => e.ServiceConceptId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("service_concept_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.ServiceId).HasColumnName("service_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.ServiceConcepts)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Service_Concept_concept_id_fkey");

            entity.HasOne(d => d.Service).WithMany(p => p.ServiceConcepts)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Service_Concept_service_id_fkey");
        });

        modelBuilder.Entity<SetUpBedSelectionOtherSourcePay>(entity =>
        {
            entity.HasKey(e => e.SetUpBedSelectionOtherSourcePayId).HasName("SetUpBedSelection_OtherSourcePay_pkey");

            entity.ToTable("SetUpBedSelection_OtherSourcePay", tb => tb.HasComment("Thiết lập chọn giường - nguồn chi trả khác"));

            entity.Property(e => e.SetUpBedSelectionOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("set_up_bed_selection_other_source_pay_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");
            entity.Property(e => e.SetUpBedSelectionId).HasColumnName("set_up_bed_selection_id");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.SetUpBedSelectionOtherSourcePays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SetUpBedSelection_OtherSourcePay_other_source_pay_id_fkey");
        });

        modelBuilder.Entity<SettingBedChooseClassifySurgery>(entity =>
        {
            entity.HasKey(e => e.SettingBedChooseClassifySurgery1).HasName("SettingBedChoose_ClassifySurgery_pkey");

            entity.ToTable("SettingBedChoose_ClassifySurgery", tb => tb.HasComment("Thiết lập chọn giường - phân loại PTTT"));

            entity.Property(e => e.SettingBedChooseClassifySurgery1)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_bed_choose_classify_surgery");
            entity.Property(e => e.ClassifySurgeryId).HasColumnName("classify_surgery_id");
            entity.Property(e => e.SettingBedChooseId).HasColumnName("setting_bed_choose_id");

            entity.HasOne(d => d.ClassifySurgery).WithMany(p => p.SettingBedChooseClassifySurgeries)
                .HasForeignKey(d => d.ClassifySurgeryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingBedChoose_ClassifySurgery_classify_surgery_id_fkey");

            entity.HasOne(d => d.SettingBedChoose).WithMany(p => p.SettingBedChooseClassifySurgeries)
                .HasForeignKey(d => d.SettingBedChooseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingBedChoose_ClassifySurgery_setting_bed_choose_id_fkey");
        });

        modelBuilder.Entity<SettingGeneralValue>(entity =>
        {
            entity.HasKey(e => e.SettingGeneralValueId).HasName("SettingGeneral_Value_pkey");

            entity.ToTable("SettingGeneral_Value", tb => tb.HasComment("Thiết lập chung - Giá trị"));

            entity.Property(e => e.SettingGeneralValueId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_general_value_id");
            entity.Property(e => e.SettingGeneralFromDate).HasColumnName("setting_general_from_date");
            entity.Property(e => e.SettingGeneralId).HasColumnName("setting_general_id");
            entity.Property(e => e.SettingGeneralToDate).HasColumnName("setting_general_to_date");
            entity.Property(e => e.SettingGeneralValue1)
                .HasColumnType("character varying")
                .HasColumnName("setting_general_value");

            entity.HasOne(d => d.SettingGeneral).WithMany(p => p.SettingGeneralValues)
                .HasForeignKey(d => d.SettingGeneralId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingGeneral_Value_setting_general_id_fkey");
        });

        modelBuilder.Entity<SettingQueueQueueObjectType>(entity =>
        {
            entity.HasKey(e => e.SettingQueueQueueObjectIdType).HasName("SettingQueue_QueueObjectType_pkey");

            entity.ToTable("SettingQueue_QueueObjectType", tb => tb.HasComment("Thiết lập loại đối tượng"));

            entity.Property(e => e.SettingQueueQueueObjectIdType)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_queue_queue_object_id_type");
            entity.Property(e => e.IsSortQms).HasColumnName("is_sort_qms");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.QueueObjectTypeId).HasColumnName("queue_object_type_id");
            entity.Property(e => e.SettingQueueId).HasColumnName("setting_queue_id");

            entity.HasOne(d => d.QueueObjectType).WithMany(p => p.SettingQueueQueueObjectTypes)
                .HasForeignKey(d => d.QueueObjectTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingQueue_QueueObjectType_queue_object_type_id_fkey");

            entity.HasOne(d => d.SettingQueue).WithMany(p => p.SettingQueueQueueObjectTypes)
                .HasForeignKey(d => d.SettingQueueId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingQueue_QueueObjectType_setting_queue_id_fkey");
        });

        modelBuilder.Entity<SettingScreenVote>(entity =>
        {
            entity.HasKey(e => e.SettingScreenVoteId).HasName("SettingScreen_Vote_pkey");

            entity.ToTable("SettingScreen_Vote", tb => tb.HasComment("Thiết lập phiếu tại màn hinh"));

            entity.Property(e => e.SettingScreenVoteId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_screen_vote_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.SettingScreenId)
                .HasComment("Tên màn hình vị trí")
                .HasColumnName("setting_screen_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.VoteScreenId)
                .HasComment("tên phiếu")
                .HasColumnName("vote_screen_id");

            entity.HasOne(d => d.SettingScreen).WithMany(p => p.SettingScreenVoteSettingScreens)
                .HasForeignKey(d => d.SettingScreenId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingScreen_Vote_setting_screen_id_fkey");

            entity.HasOne(d => d.VoteScreen).WithMany(p => p.SettingScreenVoteVoteScreens)
                .HasForeignKey(d => d.VoteScreenId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingScreen_Vote_vote_screen_id_fkey");
        });

        modelBuilder.Entity<SettingSeparateMergeServiceGeneralService>(entity =>
        {
            entity.HasKey(e => e.SettingSeparateMergeServiceGeneralServiceId).HasName("SettingSeparateMergeService_GeneralService_pkey");

            entity.ToTable("SettingSeparateMergeService_GeneralService", tb => tb.HasComment("Thiết lập -tách gộp các dịch vụ"));

            entity.Property(e => e.SettingSeparateMergeServiceGeneralServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_separate_merge_service_general_service_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.GeneralIndication)
                .HasComment("chung tờ chỉ định 1:Tách 2 gộp")
                .HasColumnName("general_indication");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("1")
                .HasColumnName("is_active");
            entity.Property(e => e.MergeBallots)
                .HasComment("gộp phiếu xét nghiệm or  gộp phiếu cddv 1:Tách 2 gộp")
                .HasColumnName("merge_ballots");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.SettingSeparateMergeServiceId).HasColumnName("setting_separate_merge_service_id");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");

            entity.HasOne(d => d.SettingSeparateMergeService).WithMany(p => p.SettingSeparateMergeServiceGeneralServices)
                .HasForeignKey(d => d.SettingSeparateMergeServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingSeparateMergeService_G_setting_separate_merge_servi_fkey");
        });

        modelBuilder.Entity<SettingVaccine>(entity =>
        {
            entity.HasKey(e => e.SettingVaccineId).HasName("SettingVaccine_pkey");

            entity.ToTable("SettingVaccine", tb => tb.HasComment("Thiết lap vaccine"));

            entity.Property(e => e.SettingVaccineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setting_vaccine_id");
            entity.Property(e => e.AccountDoctorId).HasColumnName("account_doctor_id");
            entity.Property(e => e.AccountNurseId).HasColumnName("account_nurse_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.FromTime)
                .HasColumnType("time with time zone")
                .HasColumnName("from_time");
            entity.Property(e => e.ToTime)
                .HasColumnType("time with time zone")
                .HasColumnName("to_time");

            entity.HasOne(d => d.AccountDoctor).WithMany(p => p.SettingVaccineAccountDoctors)
                .HasForeignKey(d => d.AccountDoctorId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingVaccine_account_doctor_id_fkey");

            entity.HasOne(d => d.AccountNurse).WithMany(p => p.SettingVaccineAccountNurses)
                .HasForeignKey(d => d.AccountNurseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SettingVaccine_account_nurse_id_fkey");
        });

        modelBuilder.Entity<SetupMedicalRecordSummary15Day>(entity =>
        {
            entity.HasKey(e => e.SetupMedicalRecordSummary15DayId).HasName("SetupMedicalRecord_Summary15Day_pkey");

            entity.ToTable("SetupMedicalRecord_Summary15Day", tb => tb.HasComment("Hồ sơ bệnh án và sơ kết 15 ngày"));

            entity.Property(e => e.SetupMedicalRecordSummary15DayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("setup_medical_record_summary_15_day_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.SetupMedicalRecordId).HasColumnName("setup_medical_record_id");
            entity.Property(e => e.Summary15DayId).HasColumnName("summary_15_day_id");

            entity.HasOne(d => d.SetupMedicalRecord).WithMany(p => p.SetupMedicalRecordSummary15Days)
                .HasForeignKey(d => d.SetupMedicalRecordId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SetupMedicalRecord_Summary15Day_setup_medical_record_id_fkey");

            entity.HasOne(d => d.Summary15Day).WithMany(p => p.SetupMedicalRecordSummary15Days)
                .HasForeignKey(d => d.Summary15DayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SetupMedicalRecord_Summary15Day_summary_15_day_id_fkey");
        });

        modelBuilder.Entity<SuppliesCostGroup>(entity =>
        {
            entity.HasKey(e => e.SuppliesCostGroupId).HasName("Supplies_CostGroup_pkey");

            entity.ToTable("Supplies_CostGroup", tb => tb.HasComment("Vật tư -  nhóm chi phí"));

            entity.Property(e => e.SuppliesCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("supplies_cost_group_id");
            entity.Property(e => e.SuppliesId).HasColumnName("supplies_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.Supplies).WithMany(p => p.SuppliesCostGroups)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_CostGroup_supplies_id_fkey");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.SuppliesCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_CostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<SuppliesKitSupply>(entity =>
        {
            entity.HasKey(e => e.SuppliesKitSuppliesId).HasName("Supplies_KitSupplies_pkey");

            entity.ToTable("Supplies_KitSupplies", tb => tb.HasComment("Vật tư - Vật tư bộ"));

            entity.Property(e => e.SuppliesKitSuppliesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("supplies_kit_supplies_id");
            entity.Property(e => e.KitSuppliesId).HasColumnName("kit_supplies_id");
            entity.Property(e => e.SuppliesId).HasColumnName("supplies_id");

            entity.HasOne(d => d.KitSupplies).WithMany(p => p.SuppliesKitSupplies)
                .HasForeignKey(d => d.KitSuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_KitSupplies_kit_supplies_id_fkey");

            entity.HasOne(d => d.Supplies).WithMany(p => p.SuppliesKitSupplies)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_KitSupplies_supplies_id_fkey");
        });

        modelBuilder.Entity<SuppliesOtherPaymentSource>(entity =>
        {
            entity.HasKey(e => e.SuppliesOtherPaymentSourceId).HasName("Supplies_OtherPaymentSource_pkey");

            entity.ToTable("Supplies_OtherPaymentSource", tb => tb.HasComment("Vật tư - nguồn chi trả khác"));

            entity.Property(e => e.SuppliesOtherPaymentSourceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("supplies_other_payment_source_id");
            entity.Property(e => e.OtherPaymentSourceAttributeId).HasColumnName("other_payment_source_attribute_id");
            entity.Property(e => e.SuppliesId).HasColumnName("supplies_id");

            entity.HasOne(d => d.OtherPaymentSourceAttribute).WithMany(p => p.SuppliesOtherPaymentSources)
                .HasForeignKey(d => d.OtherPaymentSourceAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_OtherPaymentSource_other_payment_source_attribute_fkey");

            entity.HasOne(d => d.Supplies).WithMany(p => p.SuppliesOtherPaymentSources)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_OtherPaymentSource_supplies_id_fkey");
        });

        modelBuilder.Entity<SuppliesPurposeUse>(entity =>
        {
            entity.HasKey(e => e.SuppliesPurposeUseId).HasName("Supplies_PurposeUse_pkey");

            entity.ToTable("Supplies_PurposeUse", tb => tb.HasComment("Vật tư - Mục đích sử dụng"));

            entity.Property(e => e.SuppliesPurposeUseId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("supplies_purpose_use_id");
            entity.Property(e => e.PurposeUseAttributeId).HasColumnName("purpose_use_attribute_id");
            entity.Property(e => e.SuppliesId).HasColumnName("supplies_id");

            entity.HasOne(d => d.PurposeUseAttribute).WithMany(p => p.SuppliesPurposeUses)
                .HasForeignKey(d => d.PurposeUseAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_PurposeUse_purpose_use_attribute_id_fkey");

            entity.HasOne(d => d.Supplies).WithMany(p => p.SuppliesPurposeUses)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_PurposeUse_supplies_id_fkey");
        });

        modelBuilder.Entity<SuppliesSupplieBySize>(entity =>
        {
            entity.HasKey(e => e.SuppliesSuppliesBySizeId).HasName("Supplies_SupplieBySize_pkey");

            entity.ToTable("Supplies_SupplieBySize", tb => tb.HasComment("Vật tư - Vật tư theo kích cỡ"));

            entity.Property(e => e.SuppliesSuppliesBySizeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("supplies_supplies_by_size_id");
            entity.Property(e => e.SuppliesBySizeId).HasColumnName("supplies_by_size_id");
            entity.Property(e => e.SuppliesId).HasColumnName("supplies_id");

            entity.HasOne(d => d.SuppliesBySize).WithMany(p => p.SuppliesSupplieBySizes)
                .HasForeignKey(d => d.SuppliesBySizeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_SupplieBySize_supplies_by_size_id_fkey");

            entity.HasOne(d => d.Supplies).WithMany(p => p.SuppliesSupplieBySizes)
                .HasForeignKey(d => d.SuppliesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Supplies_SupplieBySize_supplies_id_fkey");
        });

        modelBuilder.Entity<SurgeryPackageGeneralService>(entity =>
        {
            entity.HasKey(e => e.SurgeryPackageGeneralServiceId).HasName("SurgeryPackage_GeneralService_pkey");

            entity.ToTable("SurgeryPackage_GeneralService", tb => tb.HasComment("Gói mổ 10 ngày - danh mục chung"));

            entity.Property(e => e.SurgeryPackageGeneralServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgery_package_general_service_id");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.SurgeryPackageId).HasColumnName("surgery_package_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.SurgeryPackageGeneralServices)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgeryPackage_GeneralService_concept_id_fkey");

            entity.HasOne(d => d.SurgeryPackage).WithMany(p => p.SurgeryPackageGeneralServices)
                .HasForeignKey(d => d.SurgeryPackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgeryPackage_GeneralService_surgery_package_id_fkey");
        });

        modelBuilder.Entity<SurgicalProceducesAccountImplement>(entity =>
        {
            entity.HasKey(e => e.SurgicalProcedureAccountImplementId).HasName("SurgicalProceduces_AccountImplement_pkey");

            entity.ToTable("SurgicalProceduces_AccountImplement", tb => tb.HasComment("Phẫu thuật thủ thuật - Thông tin người thực hiện"));

            entity.Property(e => e.SurgicalProcedureAccountImplementId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedure_account_implement_id");
            entity.Property(e => e.Anesthesia1)
                .HasComment("gây mê 01")
                .HasColumnName("anesthesia1");
            entity.Property(e => e.Anesthesia2)
                .HasComment("gây mê 02")
                .HasColumnName("anesthesia2");
            entity.Property(e => e.AnestheticAdditive1)
                .HasComment("phụ gây mê 01")
                .HasColumnName("anesthetic_additive1");
            entity.Property(e => e.AnestheticAdditive2)
                .HasComment("phụ gây mê 02")
                .HasColumnName("anesthetic_additive2");
            entity.Property(e => e.MachineMainId)
                .HasComment("chạy máy chính")
                .HasColumnName("machine_main_id");
            entity.Property(e => e.MachineSubId)
                .HasComment("chạy máy phụ")
                .HasColumnName("machine_sub_id");
            entity.Property(e => e.Nurse)
                .HasComment("y tá giúp việc")
                .HasColumnName("nurse");
            entity.Property(e => e.NurseTool1)
                .HasComment("y tá dụng cụ 01")
                .HasColumnName("nurse_tool1");
            entity.Property(e => e.NurseTool2)
                .HasComment("y tá dụng cụ 02")
                .HasColumnName("nurse_tool2");
            entity.Property(e => e.NurseTool3)
                .HasComment("y tá dụng cụ 03")
                .HasColumnName("nurse_tool3");
            entity.Property(e => e.NurseTool4)
                .HasComment("y tá dụng cụ 04")
                .HasColumnName("nurse_tool4");
            entity.Property(e => e.NurseTool5)
                .HasComment("y tá dụng cụ 05")
                .HasColumnName("nurse_tool5");
            entity.Property(e => e.OutpatientAnesthesiologist)
                .HasComment("bác sĩ gây mê ngoại viện")
                .HasColumnName("outpatient_anesthesiologist");
            entity.Property(e => e.OutpatientDoctorId)
                .HasComment("bác sĩ ngoại viện")
                .HasColumnName("outpatient_doctor_id");
            entity.Property(e => e.PatientDesignateSurgicalProceduresId)
                .HasComment("dịch vụ phẫu thuật thủ thuật")
                .HasColumnName("patient_designate_surgical_procedures_id");
            entity.Property(e => e.Surgeons1Id)
                .HasComment("phẫu thuật viên 01")
                .HasColumnName("surgeons1_id");
            entity.Property(e => e.Surgeons2Id)
                .HasComment("phẫu thuật viên 02")
                .HasColumnName("surgeons2_id");
            entity.Property(e => e.Surgeons3Id).HasColumnName("surgeons3_id");
            entity.Property(e => e.SurgeonsId)
                .HasComment("phẫu thuật viên chính")
                .HasColumnName("surgeons_id");

            entity.HasOne(d => d.Anesthesia1Navigation).WithMany(p => p.SurgicalProceducesAccountImplementAnesthesia1Navigations)
                .HasForeignKey(d => d.Anesthesia1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthesia1_fkey");

            entity.HasOne(d => d.Anesthesia2Navigation).WithMany(p => p.SurgicalProceducesAccountImplementAnesthesia2Navigations)
                .HasForeignKey(d => d.Anesthesia2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthesia2_fkey");

            entity.HasOne(d => d.AnestheticAdditive1Navigation).WithMany(p => p.SurgicalProceducesAccountImplementAnestheticAdditive1Navigations)
                .HasForeignKey(d => d.AnestheticAdditive1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthetic_additive1_fkey");

            entity.HasOne(d => d.AnestheticAdditive2Navigation).WithMany(p => p.SurgicalProceducesAccountImplementAnestheticAdditive2Navigations)
                .HasForeignKey(d => d.AnestheticAdditive2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_anesthetic_additive2_fkey");

            entity.HasOne(d => d.MachineMain).WithMany(p => p.SurgicalProceducesAccountImplementMachineMains)
                .HasForeignKey(d => d.MachineMainId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_machine_main_id_fkey");

            entity.HasOne(d => d.MachineSub).WithMany(p => p.SurgicalProceducesAccountImplementMachineSubs)
                .HasForeignKey(d => d.MachineSubId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_machine_sub_id_fkey");

            entity.HasOne(d => d.NurseNavigation).WithMany(p => p.SurgicalProceducesAccountImplementNurseNavigations)
                .HasForeignKey(d => d.Nurse)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_fkey");

            entity.HasOne(d => d.NurseTool1Navigation).WithMany(p => p.SurgicalProceducesAccountImplementNurseTool1Navigations)
                .HasForeignKey(d => d.NurseTool1)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool1_fkey");

            entity.HasOne(d => d.NurseTool2Navigation).WithMany(p => p.SurgicalProceducesAccountImplementNurseTool2Navigations)
                .HasForeignKey(d => d.NurseTool2)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool2_fkey");

            entity.HasOne(d => d.NurseTool3Navigation).WithMany(p => p.SurgicalProceducesAccountImplementNurseTool3Navigations)
                .HasForeignKey(d => d.NurseTool3)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool3_fkey");

            entity.HasOne(d => d.NurseTool4Navigation).WithMany(p => p.SurgicalProceducesAccountImplementNurseTool4Navigations)
                .HasForeignKey(d => d.NurseTool4)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool4_fkey");

            entity.HasOne(d => d.NurseTool5Navigation).WithMany(p => p.SurgicalProceducesAccountImplementNurseTool5Navigations)
                .HasForeignKey(d => d.NurseTool5)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_nurse_tool5_fkey");

            entity.HasOne(d => d.OutpatientAnesthesiologistNavigation).WithMany(p => p.SurgicalProceducesAccountImplementOutpatientAnesthesiologistNavigations)
                .HasForeignKey(d => d.OutpatientAnesthesiologist)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImpl_outpatient_anesthesiologist_fkey");

            entity.HasOne(d => d.OutpatientDoctor).WithMany(p => p.SurgicalProceducesAccountImplementOutpatientDoctors)
                .HasForeignKey(d => d.OutpatientDoctorId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_outpatient_doctor_id_fkey");

            entity.HasOne(d => d.PatientDesignateSurgicalProcedures).WithMany(p => p.SurgicalProceducesAccountImplements)
                .HasForeignKey(d => d.PatientDesignateSurgicalProceduresId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImp_patient_designate_surgical_p_fkey");

            entity.HasOne(d => d.Surgeons1).WithMany(p => p.SurgicalProceducesAccountImplementSurgeons1s)
                .HasForeignKey(d => d.Surgeons1Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_surgeons2_id_fkey");

            entity.HasOne(d => d.Surgeons2).WithMany(p => p.SurgicalProceducesAccountImplementSurgeons2s)
                .HasForeignKey(d => d.Surgeons2Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_surgeons3_id_fkey");

            entity.HasOne(d => d.Surgeons3).WithMany(p => p.SurgicalProceducesAccountImplementSurgeons3s)
                .HasForeignKey(d => d.Surgeons3Id)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_surgeons3_id_fkey2");

            entity.HasOne(d => d.Surgeons).WithMany(p => p.SurgicalProceducesAccountImplementSurgeons)
                .HasForeignKey(d => d.SurgeonsId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduces_AccountImplement_surgeons1_id_fkey");
        });

        modelBuilder.Entity<SurgicalProcedureAttribute>(entity =>
        {
            entity.HasKey(e => e.SurgicalProcedureAttributeId).HasName("SurgicalProcedure_Attribute_pkey");

            entity.ToTable("SurgicalProcedure_Attribute", tb => tb.HasComment("Phẫu thuật thủ thuật - Thuộc tính"));

            entity.Property(e => e.SurgicalProcedureAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedure_attribute_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.SurgicalProcedureId).HasColumnName("surgical_procedure_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.SurgicalProcedureAttributes)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProcedure_Attribute_attribute_id_fkey");

            entity.HasOne(d => d.SurgicalProcedure).WithMany(p => p.SurgicalProcedureAttributes)
                .HasForeignKey(d => d.SurgicalProcedureId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProcedure_Attribute_surgical_procedure_id_fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServiceOtherSourcePay>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceOtherSourcePayId).HasName("SurgicalProceduresService_OtherSourcePay_pkey");

            entity.ToTable("SurgicalProceduresService_OtherSourcePay", tb => tb.HasComment("Phẫu thuật thủ thuật - nguồn chi trả khác"));

            entity.Property(e => e.SurgicalProceduresServiceOtherSourcePayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_other_source_pay_id");
            entity.Property(e => e.OtherSourcePayId).HasColumnName("other_source_pay_id");
            entity.Property(e => e.SurgicalProceduresServiceId).HasColumnName("surgical_procedures_service_id");

            entity.HasOne(d => d.OtherSourcePay).WithMany(p => p.SurgicalProceduresServiceOtherSourcePays)
                .HasForeignKey(d => d.OtherSourcePayId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_OtherSourceP_other_source_pay_id_fkey");

            entity.HasOne(d => d.SurgicalProceduresService).WithMany(p => p.SurgicalProceduresServiceOtherSourcePays)
                .HasForeignKey(d => d.SurgicalProceduresServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Oth_surgical_procedures_service__fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServiceServiceList>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceServiceListId).HasName("SurgicalProceduresService_ServiceList_pkey");

            entity.ToTable("SurgicalProceduresService_ServiceList", tb => tb.HasComment("Phẫu thuật thủ thuật - Trường hợp kê dịch vụ"));

            entity.Property(e => e.SurgicalProceduresServiceServiceListId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_service_list_id");
            entity.Property(e => e.ServiceListId).HasColumnName("service_list_id");
            entity.Property(e => e.SurgicalProceduresServiceId).HasColumnName("surgical_procedures_service_id");

            entity.HasOne(d => d.ServiceList).WithMany(p => p.SurgicalProceduresServiceServiceLists)
                .HasForeignKey(d => d.ServiceListId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_ServiceList_service_list_id_fkey");

            entity.HasOne(d => d.SurgicalProceduresService).WithMany(p => p.SurgicalProceduresServiceServiceLists)
                .HasForeignKey(d => d.SurgicalProceduresServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Ser_surgical_procedures_service__fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServiceTabAccompanyingService>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceTabAccompanyingServiceId).HasName("SurgicalProceduresService_TabAccompanyingServices_pkey");

            entity.ToTable("SurgicalProceduresService_TabAccompanyingServices", tb => tb.HasComment("Phẫu thuật thủ thuật - Dịch vụ kèm theo"));

            entity.Property(e => e.SurgicalProceduresServiceTabAccompanyingServiceId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_tab_accompanying_service_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SurgicalProceduresServiceId).HasColumnName("surgical_procedures_service_id");
            entity.Property(e => e.TabAccompanyingServiceId).HasColumnName("tab_accompanying_service_id");

            entity.HasOne(d => d.Product).WithMany(p => p.SurgicalProceduresServiceTabAccompanyingServices)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_TabAccompanyingServices_product_id");

            entity.HasOne(d => d.SurgicalProceduresService).WithMany(p => p.SurgicalProceduresServiceTabAccompanyingServices)
                .HasForeignKey(d => d.SurgicalProceduresServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Ta_surgical_procedures_service__fkey2");

            entity.HasOne(d => d.TabAccompanyingService).WithMany(p => p.SurgicalProceduresServiceTabAccompanyingServices)
                .HasForeignKey(d => d.TabAccompanyingServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_TabA_tab_accompanying_service_id_fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServiceTabCostGroup>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceTabCostGroupId).HasName("SurgicalProceduresService_TabCostGroup_pkey");

            entity.ToTable("SurgicalProceduresService_TabCostGroup", tb => tb.HasComment("Phẫu thuật thủ thuật - nhóm chi phí"));

            entity.Property(e => e.SurgicalProceduresServiceTabCostGroupId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_tab_cost_group_id");
            entity.Property(e => e.SurgicalProceduresServiceId).HasColumnName("surgical_procedures_service_id");
            entity.Property(e => e.TabCostGroupId).HasColumnName("tab_cost_group_id");

            entity.HasOne(d => d.SurgicalProceduresService).WithMany(p => p.SurgicalProceduresServiceTabCostGroups)
                .HasForeignKey(d => d.SurgicalProceduresServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Ta_surgical_procedures_service__fkey3");

            entity.HasOne(d => d.TabCostGroup).WithMany(p => p.SurgicalProceduresServiceTabCostGroups)
                .HasForeignKey(d => d.TabCostGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_TabCostGroup_tab_cost_group_id_fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServiceTabImplementationRoom>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceTabImplementationRoomId).HasName("SurgicalProceduresService_TabImplementationRoom_pkey");

            entity.ToTable("SurgicalProceduresService_TabImplementationRoom", tb => tb.HasComment("Phẫu thuật thủ thuật - phòng thực hiện"));

            entity.Property(e => e.SurgicalProceduresServiceTabImplementationRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_tab_implementation_room_id");
            entity.Property(e => e.SurgicalProceduresServiceId).HasColumnName("surgical_procedures_service_id");
            entity.Property(e => e.TabImplementRoomId).HasColumnName("tab_implement_room_id");

            entity.HasOne(d => d.SurgicalProceduresService).WithMany(p => p.SurgicalProceduresServiceTabImplementationRooms)
                .HasForeignKey(d => d.SurgicalProceduresServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Ta_surgical_procedures_service__fkey1");

            entity.HasOne(d => d.TabImplementRoom).WithMany(p => p.SurgicalProceduresServiceTabImplementationRooms)
                .HasForeignKey(d => d.TabImplementRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_TabImpleme_tab_implement_room_id_fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServiceTabInsurancePaymentConditon>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceTabInsurancePaymentConditionId).HasName("SurgicalProceduresService_TabInsurancePaymentConditon_pkey");

            entity.ToTable("SurgicalProceduresService_TabInsurancePaymentConditon", tb => tb.HasComment("Phẫu thuật thủ thuật - đk thanh toán bh"));

            entity.Property(e => e.SurgicalProceduresServiceTabInsurancePaymentConditionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_tab_insurance_payment_condition_id");
            entity.Property(e => e.SurgicalProcedureServiceId).HasColumnName("surgical_procedure_service_id");
            entity.Property(e => e.TabInsurancePaymentConditionId).HasColumnName("tab_insurance_payment_condition_id");

            entity.HasOne(d => d.SurgicalProcedureService).WithMany(p => p.SurgicalProceduresServiceTabInsurancePaymentConditons)
                .HasForeignKey(d => d.SurgicalProcedureServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Tab_surgical_procedure_service_i_fkey");

            entity.HasOne(d => d.TabInsurancePaymentCondition).WithMany(p => p.SurgicalProceduresServiceTabInsurancePaymentConditons)
                .HasForeignKey(d => d.TabInsurancePaymentConditionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Tab_tab_insurance_payment_condit_fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServiceTabPriceOption>(entity =>
        {
            entity.HasKey(e => e.SurgicalProceduresServiceTabPriceOptionId).HasName("SurgicalProceduresService_TabPriceOption_pkey");

            entity.ToTable("SurgicalProceduresService_TabPriceOption", tb => tb.HasComment("Phẫu thuật thủ thuật - Tùy chọn giá"));

            entity.Property(e => e.SurgicalProceduresServiceTabPriceOptionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedures_service_tab_price_option_id");
            entity.Property(e => e.SurgicalProceduresServiceId).HasColumnName("surgical_procedures_service_id");
            entity.Property(e => e.TabPriceOptionId).HasColumnName("tab_price_option_id");

            entity.HasOne(d => d.SurgicalProceduresService).WithMany(p => p.SurgicalProceduresServiceTabPriceOptions)
                .HasForeignKey(d => d.SurgicalProceduresServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_Tab_surgical_procedures_service__fkey");

            entity.HasOne(d => d.TabPriceOption).WithMany(p => p.SurgicalProceduresServiceTabPriceOptions)
                .HasForeignKey(d => d.TabPriceOptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresService_TabPriceOpti_tab_price_option_id_fkey");
        });

        modelBuilder.Entity<SurgicalProceduresServicesTabHistoryChanged>(entity =>
        {
            entity.HasKey(e => e.SurgicalProcedureServiceTabHistoryChangedId).HasName("SurgicalProceduresServices_TabHistoryChanged_pkey");

            entity.ToTable("SurgicalProceduresServices_TabHistoryChanged", tb => tb.HasComment("Phẫu thuật thủ thuật - lịch sử thay đổi"));

            entity.Property(e => e.SurgicalProcedureServiceTabHistoryChangedId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("surgical_procedure_service_tab_history_changed_id");
            entity.Property(e => e.SurgicalProcedureServiceId).HasColumnName("surgical_procedure_service_id");
            entity.Property(e => e.TabHistoryChangedId).HasColumnName("tab_history_changed_id");

            entity.HasOne(d => d.SurgicalProcedureService).WithMany(p => p.SurgicalProceduresServicesTabHistoryChangeds)
                .HasForeignKey(d => d.SurgicalProcedureServiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresServices_Ta_surgical_procedure_service_i_fkey");

            entity.HasOne(d => d.TabHistoryChanged).WithMany(p => p.SurgicalProceduresServicesTabHistoryChangeds)
                .HasForeignKey(d => d.TabHistoryChangedId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurgicalProceduresServices_TabHisto_tab_history_changed_id_fkey");
        });

        modelBuilder.Entity<SurvivalIndexDepartment>(entity =>
        {
            entity.HasKey(e => e.SurvivalIndexDepartment1).HasName("SurvivalIndex_Department_pkey");

            entity.ToTable("SurvivalIndex_Department", tb => tb.HasComment("Chỉ số sống - Khoa chỉ định"));

            entity.Property(e => e.SurvivalIndexDepartment1)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("survival_index_department");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.SurvivalIndexId).HasColumnName("survival_index_id");

            entity.HasOne(d => d.Department).WithMany(p => p.SurvivalIndexDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurvivalIndex_Department_department_id_fkey");

            entity.HasOne(d => d.SurvivalIndex).WithMany(p => p.SurvivalIndexDepartments)
                .HasForeignKey(d => d.SurvivalIndexId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("SurvivalIndex_Department_survival_index_id_fkey");
        });

        modelBuilder.Entity<TabAccompanyingServicesObjectType>(entity =>
        {
            entity.HasKey(e => e.AccompanyingServicesObjectTypeId).HasName("AccompanyingServices_ObjectType_pkey");

            entity.ToTable("TabAccompanyingServices_ObjectType", tb => tb.HasComment("Dịch vụ kèm theo - Loại đối tượng"));

            entity.Property(e => e.AccompanyingServicesObjectTypeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("accompanying_services_object_type_id");
            entity.Property(e => e.AccompanyingServicesId).HasColumnName("accompanying_services_id");
            entity.Property(e => e.ObjectTypeId).HasColumnName("object_type_id");

            entity.HasOne(d => d.AccompanyingServices).WithMany(p => p.TabAccompanyingServicesObjectTypes)
                .HasForeignKey(d => d.AccompanyingServicesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("AccompanyingServices_ObjectType_accompanying_services_id_fkey");

            entity.HasOne(d => d.ObjectType).WithMany(p => p.TabAccompanyingServicesObjectTypes)
                .HasForeignKey(d => d.ObjectTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("AccompanyingServices_ObjectType_object_type_id_fkey");
        });

        modelBuilder.Entity<TabImplementationRoomsRoom>(entity =>
        {
            entity.HasKey(e => e.TabImplementRoomRoomId).HasName("TabImplementationRooms_Room_pkey");

            entity.ToTable("TabImplementationRooms_Room", tb => tb.HasComment("Phòng thực hiện -phòng"));

            entity.Property(e => e.TabImplementRoomRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_implement_room_room_id");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.TabImplementRoomId).HasColumnName("tab_implement_room_id");

            entity.HasOne(d => d.Room).WithMany(p => p.TabImplementationRoomsRooms)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TabImplementationRooms_Room_room_id_fkey");

            entity.HasOne(d => d.TabImplementRoom).WithMany(p => p.TabImplementationRoomsRooms)
                .HasForeignKey(d => d.TabImplementRoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TabImplementationRooms_Room_tab_implement_room_id_fkey");
        });

        modelBuilder.Entity<TabInsurancePaymentConditionAttribute>(entity =>
        {
            entity.HasKey(e => e.TabInsurancePaymentConditionAttributeId).HasName("TabInsurancePaymentCondition_Attribute_pkey");

            entity.ToTable("TabInsurancePaymentCondition_Attribute", tb => tb.HasComment("Điều kiện thanh toán bảo hiểm- Đối tượng khám chữa bệnh"));

            entity.Property(e => e.TabInsurancePaymentConditionAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_insurance_payment_condition_attribute_id");
            entity.Property(e => e.InsurancePaymentConditionId).HasColumnName("insurance_payment_condition_id");
            entity.Property(e => e.ObjectHealthcareAttributeId).HasColumnName("object_healthcare_attribute_id");

            entity.HasOne(d => d.InsurancePaymentCondition).WithMany(p => p.TabInsurancePaymentConditionAttributes)
                .HasForeignKey(d => d.InsurancePaymentConditionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TabInsurancePaymentCondition__insurance_payment_condition__fkey");

            entity.HasOne(d => d.ObjectHealthcareAttribute).WithMany(p => p.TabInsurancePaymentConditionAttributes)
                .HasForeignKey(d => d.ObjectHealthcareAttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TabInsurancePaymentCondition__object_healthcare_attribute__fkey");
        });

        modelBuilder.Entity<TabPriceOptionAttribute>(entity =>
        {
            entity.HasKey(e => e.TabPriceOptionAttributeId).HasName("TabPriceOption_Attribute_pkey");

            entity.ToTable("TabPriceOption_Attribute", tb => tb.HasComment("Tùy chọn giá - Nguồn chi trả khác"));

            entity.Property(e => e.TabPriceOptionAttributeId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("tab_price_option_attribute_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.TabPriceOptionId).HasColumnName("tab_price_option_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.TabPriceOptionAttributes)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TabPriceOption_Attribute_attribute_id_fkey");

            entity.HasOne(d => d.TabPriceOption).WithMany(p => p.TabPriceOptionAttributes)
                .HasForeignKey(d => d.TabPriceOptionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TabPriceOption_Attribute_tab_price_option_id_fkey");
        });

        modelBuilder.Entity<TemplateOfDevelopmentsAccount>(entity =>
        {
            entity.HasKey(e => e.TemplateOfDevelopmentAccountId).HasName("TemplateOfDevelopments_Account_pkey");

            entity.ToTable("TemplateOfDevelopments_Account", tb => tb.HasComment("mẫu diễn biến - bác sĩ"));

            entity.Property(e => e.TemplateOfDevelopmentAccountId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_of_development_account_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.TemplateOfDevelopmentId).HasColumnName("template_of_development_id");

            entity.HasOne(d => d.Account).WithMany(p => p.TemplateOfDevelopmentsAccounts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TemplateOfDevelopments_Account_account_id_fkey");

            entity.HasOne(d => d.TemplateOfDevelopment).WithMany(p => p.TemplateOfDevelopmentsAccounts)
                .HasForeignKey(d => d.TemplateOfDevelopmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TemplateOfDevelopments_Account_template_of_development_id_fkey");
        });

        modelBuilder.Entity<TemplateOfDevelopmentsDepartment>(entity =>
        {
            entity.HasKey(e => e.TemplateOfDevelopmentDepartmentId).HasName("TemplateOfDevelopments_Department_pkey");

            entity.ToTable("TemplateOfDevelopments_Department", tb => tb.HasComment("Mẫu diễn biến - khoa chỉ định"));

            entity.Property(e => e.TemplateOfDevelopmentDepartmentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_of_development_department_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.TemplateOfDevelopmentId).HasColumnName("template_of_development_id");

            entity.HasOne(d => d.Department).WithMany(p => p.TemplateOfDevelopmentsDepartments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TemplateOfDevelopments_Department_department_id_fkey");

            entity.HasOne(d => d.TemplateOfDevelopment).WithMany(p => p.TemplateOfDevelopmentsDepartments)
                .HasForeignKey(d => d.TemplateOfDevelopmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TemplateOfDevelopments_Departme_template_of_development_id_fkey");
        });

        modelBuilder.Entity<TemplateOfDevelopmentsRoom>(entity =>
        {
            entity.HasKey(e => e.TemplateOfDepartmentRoomId).HasName("TemplateOfDevelopments_Room_pkey");

            entity.ToTable("TemplateOfDevelopments_Room", tb => tb.HasComment("Mẫu diễn biến - phòng"));

            entity.Property(e => e.TemplateOfDepartmentRoomId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("template_of_department_room_id");
            entity.Property(e => e.RoomId).HasColumnName("room_id");
            entity.Property(e => e.TemplateOfDepartmentId).HasColumnName("template_of_department_id");

            entity.HasOne(d => d.Room).WithMany(p => p.TemplateOfDevelopmentsRooms)
                .HasForeignKey(d => d.RoomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TemplateOfDevelopments_Room_room_id_fkey");

            entity.HasOne(d => d.TemplateOfDepartment).WithMany(p => p.TemplateOfDevelopmentsRooms)
                .HasForeignKey(d => d.TemplateOfDepartmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TemplateOfDevelopments_Room_template_of_department_id_fkey");
        });

        modelBuilder.Entity<TestingProcedureLaboratory>(entity =>
        {
            entity.HasKey(e => e.TestingProcedureLaboratoryId).HasName("TestingProcedure_Laboratory_pkey");

            entity.ToTable("TestingProcedure_Laboratory", tb => tb.HasComment("quy trình xét nghiệm - dịch vụ"));

            entity.Property(e => e.TestingProcedureLaboratoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("testing_procedure_laboratory_id");
            entity.Property(e => e.LaboratoryId).HasColumnName("laboratory_id");
            entity.Property(e => e.TestingProcedureId).HasColumnName("testing_procedure_id");

            entity.HasOne(d => d.Laboratory).WithMany(p => p.TestingProcedureLaboratories)
                .HasForeignKey(d => d.LaboratoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TestingProcedure_Laboratory_laboratory_id_fkey");

            entity.HasOne(d => d.TestingProcedure).WithMany(p => p.TestingProcedureLaboratories)
                .HasForeignKey(d => d.TestingProcedureId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TestingProcedure_Laboratory_testing_procedure_id_fkey");
        });

        modelBuilder.Entity<TestingProcedureMachine>(entity =>
        {
            entity.HasKey(e => e.TestingProcedureMachineId).HasName("TestingProcedure_Machine_pkey");

            entity.ToTable("TestingProcedure_Machine", tb => tb.HasComment("Quy trình xét nghiệm - Mã máy"));

            entity.Property(e => e.TestingProcedureMachineId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("testing_procedure_machine_id");
            entity.Property(e => e.MachineId).HasColumnName("machine_id");
            entity.Property(e => e.TestingProcedureId).HasColumnName("testing_procedure_id");

            entity.HasOne(d => d.Machine).WithMany(p => p.TestingProcedureMachines)
                .HasForeignKey(d => d.MachineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TestingProcedure_Machine_machine_id_fkey");

            entity.HasOne(d => d.TestingProcedure).WithMany(p => p.TestingProcedureMachines)
                .HasForeignKey(d => d.TestingProcedureId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("TestingProcedure_Machine_testing_procedure_id_fkey");
        });

        modelBuilder.Entity<Viewcheckcontrain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("viewcheckcontrains");

            entity.Property(e => e.ColumnName)
                .HasColumnType("character varying")
                .HasColumnName("column_name");
            entity.Property(e => e.ForeignTableName)
                .HasColumnType("character varying")
                .HasColumnName("foreign_table_name");
            entity.Property(e => e.TableName)
                .HasColumnType("character varying")
                .HasColumnName("table_name");
        });

        modelBuilder.Entity<VitalSignsPid>(entity =>
        {
            entity.HasKey(e => e.VitalSignsPidId).HasName("Vital_Signs_PID_pkey");

            entity.ToTable("Vital_Signs_PID", tb => tb.HasComment("Nội trú sinh hiệu"));

            entity.Property(e => e.VitalSignsPidId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("vital_signs_pid_id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.BasicInformationPatientPid).HasColumnName("basic_information_patient_pid");
            entity.Property(e => e.BloodPressure)
                .HasComment("huyết áp tâm thu")
                .HasColumnType("character varying")
                .HasColumnName("blood_pressure");
            entity.Property(e => e.BloodPressure2)
                .HasComment("huyết áp tâm trương")
                .HasColumnType("character varying")
                .HasColumnName("blood_pressure2");
            entity.Property(e => e.BreathingRate)
                .HasComment("nhịp thở")
                .HasColumnType("character varying")
                .HasColumnName("breathing_rate");
            entity.Property(e => e.CreatedAt)
                .HasComment("ngày tạo")
                .HasColumnName("created_at");
            entity.Property(e => e.Data)
                .HasColumnType("jsonb")
                .HasColumnName("data");
            entity.Property(e => e.IsBreathingMachine)
                .HasComment("thở máy")
                .HasColumnName("is_breathing_machine");
            entity.Property(e => e.IsQueezeAmbuBall)
                .HasComment("bóp bóng")
                .HasColumnName("is_queeze_ambu_ball");
            entity.Property(e => e.Pulse)
                .HasComment("mạch")
                .HasColumnType("character varying")
                .HasColumnName("pulse");
            entity.Property(e => e.Temperature)
                .HasColumnType("character varying")
                .HasColumnName("temperature");
            entity.Property(e => e.Weight)
                .HasColumnType("character varying")
                .HasColumnName("weight");

            entity.HasOne(d => d.Account).WithMany(p => p.VitalSignsPids)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Vital_Signs_PID_account_id_fkey");

            entity.HasOne(d => d.BasicInformationPatientP).WithMany(p => p.VitalSignsPids)
                .HasForeignKey(d => d.BasicInformationPatientPid)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Vital_Signs_PID_basic_information_patient_pid_fkey");
        });

        modelBuilder.Entity<VitalSignsPidSurvivalIndex>(entity =>
        {
            entity.HasKey(e => e.VitalSignsPidSurvivalIndexId).HasName("VitalSignsPID_SurvivalIndex_pkey");

            entity.ToTable("VitalSignsPID_SurvivalIndex", tb => tb.HasComment("sinh hiệu chỉ só sống"));

            entity.Property(e => e.VitalSignsPidSurvivalIndexId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("vital_signs_pid_survival_index_id");
            entity.Property(e => e.SurvivalIndexId).HasColumnName("survival_index_id");
            entity.Property(e => e.VitalSignsPid).HasColumnName("vital_signs_pid");

            entity.HasOne(d => d.SurvivalIndex).WithMany(p => p.VitalSignsPidSurvivalIndices)
                .HasForeignKey(d => d.SurvivalIndexId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("VitalSignsPID_SurvivalIndex_survival_index_id_fkey");

            entity.HasOne(d => d.VitalSignsP).WithMany(p => p.VitalSignsPidSurvivalIndices)
                .HasForeignKey(d => d.VitalSignsPid)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("VitalSignsPID_SurvivalIndex_vital_signs_pid_fkey");
        });

        modelBuilder.Entity<WarehouseAccount>(entity =>
        {
            entity.HasKey(e => e.WarehouseAccountId).HasName("Warehouse_Account_pkey");

            entity.ToTable("Warehouse_Account", tb => tb.HasComment("Quản trị kho - Nhân viên quản lý"));

            entity.Property(e => e.WarehouseAccountId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_account_id");
            entity.Property(e => e.AccountId)
                .HasComment("tài khoản")
                .HasColumnName("account_id");
            entity.Property(e => e.ChangedBy).HasColumnName("changed_by");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.DeletedAt).HasColumnName("deleted_at");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.UpdatedAt).HasColumnName("updated_at");
            entity.Property(e => e.WarehouseId)
                .HasComment("Kho")
                .HasColumnName("warehouse_id");

            entity.HasOne(d => d.Account).WithMany(p => p.WarehouseAccounts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_Account_account_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseAccounts)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_Account_warehouse_id_fkey");
        });

        modelBuilder.Entity<WarehouseMechanismBrowerPay>(entity =>
        {
            entity.HasKey(e => e.WarehouseMechainsmBrowerPayId).HasName("Warehouse_MechanismBrowerPay_pkey");

            entity.ToTable("Warehouse_MechanismBrowerPay", tb => tb.HasComment("Cơ chế duyệt/phát"));

            entity.Property(e => e.WarehouseMechainsmBrowerPayId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_mechainsm_brower_pay_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.Attribute).WithMany(p => p.WarehouseMechanismBrowerPays)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_MechanismBrowerPay_attribute_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseMechanismBrowerPays)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_MechanismBrowerPay_warehouse_id_fkey");
        });

        modelBuilder.Entity<WarehouseMechanismEstimationCompensation>(entity =>
        {
            entity.HasKey(e => e.WarehouseMechanismEstimationCompensationId).HasName("Warehouse_MechanismEstimationCompensation_pkey");

            entity.ToTable("Warehouse_MechanismEstimationCompensation", tb => tb.HasComment("Kho -  Cơ chế dự trù/Lĩnh bù"));

            entity.Property(e => e.WarehouseMechanismEstimationCompensationId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_mechanism_estimation_compensation_id");
            entity.Property(e => e.MechanismEstimationCompensationId).HasColumnName("mechanism_estimation_compensation_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.MechanismEstimationCompensation).WithMany(p => p.WarehouseMechanismEstimationCompensations)
                .HasForeignKey(d => d.MechanismEstimationCompensationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_MechanismEstimation_mechanism_estimation_compens_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseMechanismEstimationCompensations)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_MechanismEstimationCompensation_warehouse_id_fkey");
        });

        modelBuilder.Entity<WarehouseReserveBook>(entity =>
        {
            entity.HasKey(e => e.WarehouseReserveBookId).HasName("Warehouse_ReserveBook_pkey");

            entity.ToTable("Warehouse_ReserveBook", tb => tb.HasComment("Kho - Giữ chỗ ngay khi kê"));

            entity.Property(e => e.WarehouseReserveBookId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_reserve_book_id");
            entity.Property(e => e.ReserveBookId).HasColumnName("reserve_book_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.ReserveBook).WithMany(p => p.WarehouseReserveBooks)
                .HasForeignKey(d => d.ReserveBookId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_ReserveBook_reserve_book_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseReserveBooks)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_ReserveBook_warehouse_id_fkey");
        });

        modelBuilder.Entity<WarehouseWareHouseType>(entity =>
        {
            entity.HasKey(e => e.WarehouseWarehouseType1).HasName("Warehouse_WareHouseType_pkey");

            entity.ToTable("Warehouse_WareHouseType", tb => tb.HasComment("Kho -Loại kho"));

            entity.Property(e => e.WarehouseWarehouseType1)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_warehouse_type");
            entity.Property(e => e.ConceptId).HasColumnName("concept_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");

            entity.HasOne(d => d.Concept).WithMany(p => p.WarehouseWareHouseTypes)
                .HasForeignKey(d => d.ConceptId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_WareHouseType_concept_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseWareHouseTypes)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_WareHouseType_warehouse_id_fkey");
        });

        modelBuilder.Entity<WarehouseWarehousePropertite>(entity =>
        {
            entity.HasKey(e => e.WarehouseWarehousePropertitiesId).HasName("Warehouse_WarehousePropertites_pkey");

            entity.ToTable("Warehouse_WarehousePropertites", tb => tb.HasComment("Kho - Tính chất kho"));

            entity.Property(e => e.WarehouseWarehousePropertitiesId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("warehouse_warehouse_propertities_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.WarehousePropertitiesId).HasColumnName("warehouse_propertities_id");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.WarehouseWarehousePropertites)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_WarehousePropertites_warehouse_id_fkey");

            entity.HasOne(d => d.WarehousePropertities).WithMany(p => p.WarehouseWarehousePropertites)
                .HasForeignKey(d => d.WarehousePropertitiesId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("Warehouse_WarehousePropertites_warehouse_propertities_id_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
